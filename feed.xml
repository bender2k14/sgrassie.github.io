<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">temporalcohesion.co.uk</title><subtitle type="text">temporalcohesion.co.uk</subtitle><id>http://www.temporalcohesion.co.uk/</id><updated>2014-05-30T21:39:10+01:00</updated><author><name>Stuart Grassie</name><uri>http://www.temporalcohesion.co.uk</uri><email>sgrassie@gmail.com</email></author><generator>Sandra.Snow Atom Generator</generator><link rel="alternate" href="http://www.temporalcohesion.co.uk/feed.xml" /><link rel="self" type="text/html" title="temporalcohesion.co.uk" href="http://www.temporalcohesion.co.uk/feed.xml" /><entry><id>http://www.temporalcohesion.co.uk/2014/05/30/how-i-moved-my-blog-to-sandra-now-part2/</id><title type="text">How I moved my blog to sandra snow, part two</title><summary type="html">&lt;p&gt;Once you have liberated your content from Wordpress, getting it generated by Snow is fairly trivial.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compile &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Snow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Copy &lt;a href="https://github.com/Sandra/Sandra.Snow/tree/master/SnowSite"&gt;SnowSite&lt;/a&gt; somewhere.&lt;/li&gt;
&lt;li&gt;Copy the fresh Snow files into a sub folder of the folder you created in #2. Mine is called &lt;code&gt;_compiler&lt;/code&gt; and contains &lt;code&gt;snow.exe&lt;/code&gt;, &lt;code&gt;Nancy.dll&lt;/code&gt;, &lt;code&gt;Nancy.ViewEngines.Razor.dll&lt;/code&gt; and &lt;code&gt;Nancy.Testing.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clean out the _posts folder, as it contains the markdown for &lt;a href="http://www.philiphaydon.com"&gt;philiphaydon.com&lt;/a&gt;, who is the creator of Snow.&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;snow.config&lt;/code&gt;. You'll want to change things to reflect your details, e.g. your name, email, blog title etc. The urlFormat is important. Mine is set to &lt;code&gt;yyyy/MM/dd/slug&lt;/code&gt;, which follows the same pattern as my old wordpres blog. This important because it means that the blog posts be generated with the same url, which means I don't have to dick about with 302 redirects or any of that shit.&lt;/li&gt;
&lt;li&gt;Compile your site. This is best achieved via a batch file which should live in the folder above the \Snow folder you created in #2. The batch file will look something like:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;echo off
cls
.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we tell snow where to find the &lt;code&gt;snow.config&lt;/code&gt; file, specify that we'd like snow to give us some debug output to the console window, and that we want it to fire up its built in web server so that we can preview our site.&lt;/p&gt;

&lt;p&gt;Name the batch file &lt;code&gt;compile.snow.bat&lt;/code&gt; so that Snow doesn't delete it when it compiles your site. When you now execute the batch file, Snow should compile your blog and fire it up in your default webbrowser, so you can check it out, and make sure it looks ok.&lt;/p&gt;

&lt;p&gt;At this point, you should be ready to deploy your site somewhere.&lt;/p&gt;
</summary><published>2014-05-29T23:00:00Z</published><updated>2014-05-29T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/05/30/how-i-moved-my-blog-to-sandra-now-part2/" /><content type="html">&lt;p&gt;Once you have liberated your content from Wordpress, getting it generated by Snow is fairly trivial.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compile &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Snow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Copy &lt;a href="https://github.com/Sandra/Sandra.Snow/tree/master/SnowSite"&gt;SnowSite&lt;/a&gt; somewhere.&lt;/li&gt;
&lt;li&gt;Copy the fresh Snow files into a sub folder of the folder you created in #2. Mine is called &lt;code&gt;_compiler&lt;/code&gt; and contains &lt;code&gt;snow.exe&lt;/code&gt;, &lt;code&gt;Nancy.dll&lt;/code&gt;, &lt;code&gt;Nancy.ViewEngines.Razor.dll&lt;/code&gt; and &lt;code&gt;Nancy.Testing.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clean out the _posts folder, as it contains the markdown for &lt;a href="http://www.philiphaydon.com"&gt;philiphaydon.com&lt;/a&gt;, who is the creator of Snow.&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;snow.config&lt;/code&gt;. You'll want to change things to reflect your details, e.g. your name, email, blog title etc. The urlFormat is important. Mine is set to &lt;code&gt;yyyy/MM/dd/slug&lt;/code&gt;, which follows the same pattern as my old wordpres blog. This important because it means that the blog posts be generated with the same url, which means I don't have to dick about with 302 redirects or any of that shit.&lt;/li&gt;
&lt;li&gt;Compile your site. This is best achieved via a batch file which should live in the folder above the \Snow folder you created in #2. The batch file will look something like:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;echo off
cls
.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we tell snow where to find the &lt;code&gt;snow.config&lt;/code&gt; file, specify that we'd like snow to give us some debug output to the console window, and that we want it to fire up its built in web server so that we can preview our site.&lt;/p&gt;

&lt;p&gt;Name the batch file &lt;code&gt;compile.snow.bat&lt;/code&gt; so that Snow doesn't delete it when it compiles your site. When you now execute the batch file, Snow should compile your blog and fire it up in your default webbrowser, so you can check it out, and make sure it looks ok.&lt;/p&gt;

&lt;p&gt;At this point, you should be ready to deploy your site somewhere.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/03/03/how-i-moved-my-blog-from-wordpress-to-snow/</id><title type="text">How I moved my blog from wordpress to snow, part one</title><summary type="html">&lt;p&gt;Wherein I show you how I moved my blog from Wordpress, to a statically generated html hosted on github. I will assume that you have a wordpress blog, hosted on either Wordpress.com or your own hosting. If you don't have a wordpress based blog, then that's ok, most of this will still apply.&lt;/p&gt;

&lt;p&gt;We can identify a pretty broad set of tasks straightaway:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export posts from wordpress into markdown.&lt;/li&gt;
&lt;li&gt;Configure Sandra.Snow to publish our markdown.&lt;/li&gt;
&lt;li&gt;Make it look nice.&lt;/li&gt;
&lt;li&gt;Setup github to publish our new site.&lt;/li&gt;
&lt;li&gt;Update our DNS settings.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Liberating content from Wordpress&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.temporalcohesion.co.uk/../../../../../images/wordpress-export.png" alt="Export wordpress content"&gt;&lt;/p&gt;

&lt;p&gt;Jekyll has some tooling that enables auto-exporting of your blog and its contents into markdown for you, but as it is still (relativly) early days for Sandra.Snow, there is no such tooling for us to leverage.&lt;/p&gt;

&lt;p&gt;Wordpress makes it fairly easy to export your blog posts, pages, comments and some other meta-information, packaging everything up into a single XML file, that depending on the number of blog post and other content you have, can be fairly large.&lt;/p&gt;

&lt;p&gt;When you click export, you'll be able to download the XML file containing your content. Now we just have to pull out what we want.&lt;/p&gt;

&lt;h2&gt;wp2md&lt;/h2&gt;

&lt;p&gt;I looked around for something that would do the conversion of my wordpress content into markdown, but I couldn't find one that I liked, or that worked exactly the way that I wanted it to. So &lt;a href="https://github.com/sgrassie/wp2md.net"&gt;I wrote my own&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The export file format isn't documented anywhere that I could find online, there were a few bits and pieces here and there on blogs and on some forums, but, honestly, it's just an xml file, it's not all that difficult. The only thing that may trip you up is the number of xml namespaces it uses, although if like me you've had a job maintaining software which manages complex xml, then it's no big deal.&lt;/p&gt;

&lt;p&gt;I found it has a root &lt;code&gt;&amp;lt;rss&amp;gt;&lt;/code&gt; element, followed by &lt;code&gt;&amp;lt;channel&amp;gt;&lt;/code&gt; and then &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; where an item is a post, comment or even a page. An item is then broken down into further child elements which include things like the title of the post (or page, or comment), the url, publication date, actual content of the post, and various other pieces of meta data about the post. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Definitely given up on my github-csharp-api project&amp;lt;/title&amp;gt;
&amp;lt;link&amp;gt;http://temporalcohesion.co.uk/2013/11/07/definitely-given-up-on-my-github-csharp-api-project/&amp;lt;/link&amp;gt;
&amp;lt;pubDate&amp;gt;Thu, 07 Nov 2013 21:08:19 +0000&amp;lt;/pubDate&amp;gt;
&amp;lt;dc:creator&amp;gt;&amp;lt;![CDATA[stuart]]&amp;gt;&amp;lt;/dc:creator&amp;gt;
&amp;lt;guid isPermaLink="false"&amp;gt;http://temporalcohesion.co.uk/?p=394&amp;lt;/guid&amp;gt;
&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;
&amp;lt;content:encoded&amp;gt;&amp;lt;![CDATA[Not that I'd spent much time working on it lately. The fine folks at github have released Ocktokit.net, a C# library for accessing the github api. It's an official api - it renders my crappy project useless, so I'm putting it down completely.

I will not work on it anymore.]]&amp;gt;&amp;lt;/content:encoded&amp;gt;
&amp;lt;excerpt:encoded&amp;gt;&amp;lt;![CDATA[]]&amp;gt;&amp;lt;/excerpt:encoded&amp;gt;
&amp;lt;wp:post_id&amp;gt;394&amp;lt;/wp:post_id&amp;gt;
&amp;lt;wp:post_date&amp;gt;2013-11-07 21:08:19&amp;lt;/wp:post_date&amp;gt;
&amp;lt;wp:post_date_gmt&amp;gt;2013-11-07 21:08:19&amp;lt;/wp:post_date_gmt&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I defined a POCO &lt;a href="https://github.com/sgrassie/wp2md.net/blob/master/wp2md/Item.cs"&gt;&lt;code&gt;Item.cs&lt;/code&gt;&lt;/a&gt; model class to hold everything interesting about a post, and then parsed the document to get all of the items.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Items = (from item in _document.Root.Element("channel").Elements("item")
  select new Item
  {
    Title = item.Element("title").Value,
    PublicationDate = ParseDateTime(item.Element("pubDate").Value),
    Author = item.Element(dc + "creator").Value,
    ....
  }).ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fairly standard Linq-to-Object parsing of the XML document. You can see the XML Namespace &lt;code&gt;dc&lt;/code&gt; being used, that is just a static namespace member defined as &lt;code&gt;private static XNamespace dc = "http://purl.org/dc/elements/1.1/";&lt;/code&gt; at the top of the class.&lt;/p&gt;

&lt;p&gt;Now that we have a whole bunch of &lt;code&gt;Items&lt;/code&gt;, we can move on to generating the markdown.&lt;/p&gt;

&lt;p&gt;Markdown is really fairly simple. Before I embarked on this process, I'd never realised how powerfully simple it is. Our &lt;code&gt;Item&lt;/code&gt; now contains the (mostly) encoded content of our post, so we don't have any worry about doing any escaped html removal. To my eyes, and someone correct me if I'm wrong, but it seems to me that Wordpress virtually converts our content into markdown when it generates the export. I could be wrong, but it's what it looks like to me.&lt;/p&gt;

&lt;p&gt;We can then use the Visitor pattern to control how we want our &lt;code&gt;Items&lt;/code&gt; to be processed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parser.Parse(document);
parser.VisitWith(new PostVisitor());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did not have very many pages on my wordpress blog, so I was not concerned with converting them. Similarly, I'd already converted my wordpress blog to use disqus comments, so I did not need to write a Visitor to handle converting the comments.&lt;/p&gt;

&lt;p&gt;As this post is already getting fairly long, I will leave a discussion of the Visitor pattern to another time, but you can see the &lt;code&gt;PostVisitor&lt;/code&gt; implementation in detail &lt;a href="https://github.com/sgrassie/wp2md.net/blob/master/wp2md/Visitor.cs"&gt;in the repo on Github.com&lt;/a&gt;.&lt;/p&gt;
</summary><published>2014-03-03T00:00:00Z</published><updated>2014-03-03T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/03/03/how-i-moved-my-blog-from-wordpress-to-snow/" /><content type="html">&lt;p&gt;Wherein I show you how I moved my blog from Wordpress, to a statically generated html hosted on github. I will assume that you have a wordpress blog, hosted on either Wordpress.com or your own hosting. If you don't have a wordpress based blog, then that's ok, most of this will still apply.&lt;/p&gt;

&lt;p&gt;We can identify a pretty broad set of tasks straightaway:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export posts from wordpress into markdown.&lt;/li&gt;
&lt;li&gt;Configure Sandra.Snow to publish our markdown.&lt;/li&gt;
&lt;li&gt;Make it look nice.&lt;/li&gt;
&lt;li&gt;Setup github to publish our new site.&lt;/li&gt;
&lt;li&gt;Update our DNS settings.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Liberating content from Wordpress&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.temporalcohesion.co.uk/../../../../../images/wordpress-export.png" alt="Export wordpress content"&gt;&lt;/p&gt;

&lt;p&gt;Jekyll has some tooling that enables auto-exporting of your blog and its contents into markdown for you, but as it is still (relativly) early days for Sandra.Snow, there is no such tooling for us to leverage.&lt;/p&gt;

&lt;p&gt;Wordpress makes it fairly easy to export your blog posts, pages, comments and some other meta-information, packaging everything up into a single XML file, that depending on the number of blog post and other content you have, can be fairly large.&lt;/p&gt;

&lt;p&gt;When you click export, you'll be able to download the XML file containing your content. Now we just have to pull out what we want.&lt;/p&gt;

&lt;h2&gt;wp2md&lt;/h2&gt;

&lt;p&gt;I looked around for something that would do the conversion of my wordpress content into markdown, but I couldn't find one that I liked, or that worked exactly the way that I wanted it to. So &lt;a href="https://github.com/sgrassie/wp2md.net"&gt;I wrote my own&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The export file format isn't documented anywhere that I could find online, there were a few bits and pieces here and there on blogs and on some forums, but, honestly, it's just an xml file, it's not all that difficult. The only thing that may trip you up is the number of xml namespaces it uses, although if like me you've had a job maintaining software which manages complex xml, then it's no big deal.&lt;/p&gt;

&lt;p&gt;I found it has a root &lt;code&gt;&amp;lt;rss&amp;gt;&lt;/code&gt; element, followed by &lt;code&gt;&amp;lt;channel&amp;gt;&lt;/code&gt; and then &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; where an item is a post, comment or even a page. An item is then broken down into further child elements which include things like the title of the post (or page, or comment), the url, publication date, actual content of the post, and various other pieces of meta data about the post. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Definitely given up on my github-csharp-api project&amp;lt;/title&amp;gt;
&amp;lt;link&amp;gt;http://temporalcohesion.co.uk/2013/11/07/definitely-given-up-on-my-github-csharp-api-project/&amp;lt;/link&amp;gt;
&amp;lt;pubDate&amp;gt;Thu, 07 Nov 2013 21:08:19 +0000&amp;lt;/pubDate&amp;gt;
&amp;lt;dc:creator&amp;gt;&amp;lt;![CDATA[stuart]]&amp;gt;&amp;lt;/dc:creator&amp;gt;
&amp;lt;guid isPermaLink="false"&amp;gt;http://temporalcohesion.co.uk/?p=394&amp;lt;/guid&amp;gt;
&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;
&amp;lt;content:encoded&amp;gt;&amp;lt;![CDATA[Not that I'd spent much time working on it lately. The fine folks at github have released Ocktokit.net, a C# library for accessing the github api. It's an official api - it renders my crappy project useless, so I'm putting it down completely.

I will not work on it anymore.]]&amp;gt;&amp;lt;/content:encoded&amp;gt;
&amp;lt;excerpt:encoded&amp;gt;&amp;lt;![CDATA[]]&amp;gt;&amp;lt;/excerpt:encoded&amp;gt;
&amp;lt;wp:post_id&amp;gt;394&amp;lt;/wp:post_id&amp;gt;
&amp;lt;wp:post_date&amp;gt;2013-11-07 21:08:19&amp;lt;/wp:post_date&amp;gt;
&amp;lt;wp:post_date_gmt&amp;gt;2013-11-07 21:08:19&amp;lt;/wp:post_date_gmt&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I defined a POCO &lt;a href="https://github.com/sgrassie/wp2md.net/blob/master/wp2md/Item.cs"&gt;&lt;code&gt;Item.cs&lt;/code&gt;&lt;/a&gt; model class to hold everything interesting about a post, and then parsed the document to get all of the items.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Items = (from item in _document.Root.Element("channel").Elements("item")
  select new Item
  {
    Title = item.Element("title").Value,
    PublicationDate = ParseDateTime(item.Element("pubDate").Value),
    Author = item.Element(dc + "creator").Value,
    ....
  }).ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fairly standard Linq-to-Object parsing of the XML document. You can see the XML Namespace &lt;code&gt;dc&lt;/code&gt; being used, that is just a static namespace member defined as &lt;code&gt;private static XNamespace dc = "http://purl.org/dc/elements/1.1/";&lt;/code&gt; at the top of the class.&lt;/p&gt;

&lt;p&gt;Now that we have a whole bunch of &lt;code&gt;Items&lt;/code&gt;, we can move on to generating the markdown.&lt;/p&gt;

&lt;p&gt;Markdown is really fairly simple. Before I embarked on this process, I'd never realised how powerfully simple it is. Our &lt;code&gt;Item&lt;/code&gt; now contains the (mostly) encoded content of our post, so we don't have any worry about doing any escaped html removal. To my eyes, and someone correct me if I'm wrong, but it seems to me that Wordpress virtually converts our content into markdown when it generates the export. I could be wrong, but it's what it looks like to me.&lt;/p&gt;

&lt;p&gt;We can then use the Visitor pattern to control how we want our &lt;code&gt;Items&lt;/code&gt; to be processed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parser.Parse(document);
parser.VisitWith(new PostVisitor());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did not have very many pages on my wordpress blog, so I was not concerned with converting them. Similarly, I'd already converted my wordpress blog to use disqus comments, so I did not need to write a Visitor to handle converting the comments.&lt;/p&gt;

&lt;p&gt;As this post is already getting fairly long, I will leave a discussion of the Visitor pattern to another time, but you can see the &lt;code&gt;PostVisitor&lt;/code&gt; implementation in detail &lt;a href="https://github.com/sgrassie/wp2md.net/blob/master/wp2md/Visitor.cs"&gt;in the repo on Github.com&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/02/19/extending-sandra-snow/</id><title type="text">Extending Sandra.Snow</title><summary type="html">&lt;p&gt;After switching my blog over to use &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt;, I noticed that in at least one feed aggregator that my blog shows up in, it wasn't displaying correct. The escaped html in the feed generator from the markdown by Snow wasn't getting rendered in the aggregator correctly. After a little digging it was apparant to me that the &lt;code&gt;RssResponse&lt;/code&gt; in Snow was not correctly setting it's content type.&lt;/p&gt;

&lt;p&gt;I could have left it there, or submitted a small patch to fix the issue (I still will), but I noticed that the feed it generates isn't a pure atom feed, so I basically copied the relevant classes (changing 'rss' to 'atom') in the class names, and did a little configuration, and swapped over the feed to use atom.&lt;/p&gt;

&lt;p&gt;Even though I know that the atom feed validates, this post is in part a test to see what happens...&lt;/p&gt;
</summary><published>2014-02-19T00:00:00Z</published><updated>2014-02-19T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/02/19/extending-sandra-snow/" /><content type="html">&lt;p&gt;After switching my blog over to use &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt;, I noticed that in at least one feed aggregator that my blog shows up in, it wasn't displaying correct. The escaped html in the feed generator from the markdown by Snow wasn't getting rendered in the aggregator correctly. After a little digging it was apparant to me that the &lt;code&gt;RssResponse&lt;/code&gt; in Snow was not correctly setting it's content type.&lt;/p&gt;

&lt;p&gt;I could have left it there, or submitted a small patch to fix the issue (I still will), but I noticed that the feed it generates isn't a pure atom feed, so I basically copied the relevant classes (changing 'rss' to 'atom') in the class names, and did a little configuration, and swapped over the feed to use atom.&lt;/p&gt;

&lt;p&gt;Even though I know that the atom feed validates, this post is in part a test to see what happens...&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/02/15/updating-git-submodules/</id><title type="text">Updating git submodules</title><summary type="html">&lt;p&gt;I'm writing this up mostly for my own benefit so that I don't have to go searching for it again in future.&lt;/p&gt;

&lt;p&gt;When you have a git repository which has a few submodules (.e.g. a vim dotfiles repo), you may find that you'll notice one day that they all point to ancient commits in their parent repositories. Consequently, you want to update them, to get the new shiny things.&lt;/p&gt;

&lt;p&gt;To do so is fairly straightforward (from your parent repository):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule update --recursive --remote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells git that you want to update the submodules to the latest commit on the submodules remote tracking branch (&lt;code&gt;--remote&lt;/code&gt;) and to do it recursively (&lt;code&gt;--recursive&lt;/code&gt;) on all of the submodules (and their submodules if any).&lt;/p&gt;

&lt;p&gt;Then if you check the &lt;code&gt;git status&lt;/code&gt; you should see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
M:\vimfiles [master +0 ~9 -0]&gt; git status
# On branch master
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   bundle/ctrlp (new commits)
#       modified:   bundle/delimitmate (new commits)
#       modified:   bundle/nerdtree (new commits)
#       modified:   bundle/tagbar (new commits)
#       modified:   bundle/vim-jade (new commits)
#       modified:   bundle/vim-javascript.git (new commits)
#       modified:   bundle/vim-pathogen (new commits)
#       modified:   bundle/vim-powerline (new commits)
#       modified:   bundle/vim-ps1 (new commits)
#
no changes added to commit (use "git add" and/or "git commit -a")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may find this confusing, as you have just updated all the submodules to the latest commit. Why are are there new commits? If you do a &lt;code&gt;diff&lt;/code&gt; on one of them, you'll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
M:\vimfiles [master +0 ~9 -0]&gt; git diff bundle/ctrlp
diff --git a/bundle/ctrlp b/bundle/ctrlp
index be5842a..b5d3fe6 160000
--- a/bundle/ctrlp
+++ b/bundle/ctrlp
@@ -1 +1 @@
-Subproject commit be5842a376f16c16c5dc4cc1879d7168a074f7de
+Subproject commit b5d3fe66a58a13d2ff8b6391f4387608496a030f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which makes sense, because you have asked git to update the submodule(s) to the latest commit, so it is therefore unsuprising that your repo now knows that its submodules have changed. You need to tell your repository to actually use the latest commit of the submodules, and then commit everything:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git submodule update
git commit -am "Updated submodules to latest"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope that helps someone.&lt;/p&gt;
</summary><published>2014-02-15T00:00:00Z</published><updated>2014-02-15T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/02/15/updating-git-submodules/" /><content type="html">&lt;p&gt;I'm writing this up mostly for my own benefit so that I don't have to go searching for it again in future.&lt;/p&gt;

&lt;p&gt;When you have a git repository which has a few submodules (.e.g. a vim dotfiles repo), you may find that you'll notice one day that they all point to ancient commits in their parent repositories. Consequently, you want to update them, to get the new shiny things.&lt;/p&gt;

&lt;p&gt;To do so is fairly straightforward (from your parent repository):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule update --recursive --remote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells git that you want to update the submodules to the latest commit on the submodules remote tracking branch (&lt;code&gt;--remote&lt;/code&gt;) and to do it recursively (&lt;code&gt;--recursive&lt;/code&gt;) on all of the submodules (and their submodules if any).&lt;/p&gt;

&lt;p&gt;Then if you check the &lt;code&gt;git status&lt;/code&gt; you should see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
M:\vimfiles [master +0 ~9 -0]&gt; git status
# On branch master
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   bundle/ctrlp (new commits)
#       modified:   bundle/delimitmate (new commits)
#       modified:   bundle/nerdtree (new commits)
#       modified:   bundle/tagbar (new commits)
#       modified:   bundle/vim-jade (new commits)
#       modified:   bundle/vim-javascript.git (new commits)
#       modified:   bundle/vim-pathogen (new commits)
#       modified:   bundle/vim-powerline (new commits)
#       modified:   bundle/vim-ps1 (new commits)
#
no changes added to commit (use "git add" and/or "git commit -a")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may find this confusing, as you have just updated all the submodules to the latest commit. Why are are there new commits? If you do a &lt;code&gt;diff&lt;/code&gt; on one of them, you'll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
M:\vimfiles [master +0 ~9 -0]&gt; git diff bundle/ctrlp
diff --git a/bundle/ctrlp b/bundle/ctrlp
index be5842a..b5d3fe6 160000
--- a/bundle/ctrlp
+++ b/bundle/ctrlp
@@ -1 +1 @@
-Subproject commit be5842a376f16c16c5dc4cc1879d7168a074f7de
+Subproject commit b5d3fe66a58a13d2ff8b6391f4387608496a030f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which makes sense, because you have asked git to update the submodule(s) to the latest commit, so it is therefore unsuprising that your repo now knows that its submodules have changed. You need to tell your repository to actually use the latest commit of the submodules, and then commit everything:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git submodule update
git commit -am "Updated submodules to latest"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope that helps someone.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/02/08/moved-blog-to-snow-and-github/</id><title type="text">Moved blog to snow and github</title><summary type="html">&lt;h1&gt;No longed bound to wordpress&lt;/h1&gt;

&lt;p&gt;For most of the time I've been blogging, I've used Wordpress. It's very good software, but kind of requires
somewhere to host it. Either on your own custom hosting, or wordpress.com. For a long time, I paid for my own
hosting provider. But the times they are a changing, and I'm no longer prepared to pay for my own hosting.&lt;/p&gt;

&lt;h2&gt;Enter snow&lt;/h2&gt;

&lt;p&gt;Github provide a way of hosting a website, for free, it's called Github Pages. Using a tool called Jekyll, it is
possible to take a series of Markdown files and generate a static html website from them. The only drawback to Jekyll
is that that it's written in Ruby, it can be a pain to configure on Windows, and I'm primarily a windows kind of guy. &lt;/p&gt;

&lt;p&gt;It's also true that the vast majority of guides/tutorials out there for running a blog with Jekyll assume that you'll
be doing it on either a Mac or a Linux machine. I work entirely on Windows, and there is no way I'm going to try to
configure Ruby on all the machines I use (or might use).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt; is written in C#, and uses &lt;a href="https://github.com/nancyFx/Nancy"&gt;Nancyfx&lt;/a&gt; to process the markdown into static html, exactly like Jekyll. I'm
not sure about the name myself, but there you go.&lt;/p&gt;

&lt;p&gt;Over the next few posts I'll go over how I switched my blog from a hosted Wordpress to a staticly generated site using Snow.&lt;/p&gt;
</summary><published>2014-02-08T00:00:00Z</published><updated>2014-02-08T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/02/08/moved-blog-to-snow-and-github/" /><content type="html">&lt;h1&gt;No longed bound to wordpress&lt;/h1&gt;

&lt;p&gt;For most of the time I've been blogging, I've used Wordpress. It's very good software, but kind of requires
somewhere to host it. Either on your own custom hosting, or wordpress.com. For a long time, I paid for my own
hosting provider. But the times they are a changing, and I'm no longer prepared to pay for my own hosting.&lt;/p&gt;

&lt;h2&gt;Enter snow&lt;/h2&gt;

&lt;p&gt;Github provide a way of hosting a website, for free, it's called Github Pages. Using a tool called Jekyll, it is
possible to take a series of Markdown files and generate a static html website from them. The only drawback to Jekyll
is that that it's written in Ruby, it can be a pain to configure on Windows, and I'm primarily a windows kind of guy. &lt;/p&gt;

&lt;p&gt;It's also true that the vast majority of guides/tutorials out there for running a blog with Jekyll assume that you'll
be doing it on either a Mac or a Linux machine. I work entirely on Windows, and there is no way I'm going to try to
configure Ruby on all the machines I use (or might use).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt; is written in C#, and uses &lt;a href="https://github.com/nancyFx/Nancy"&gt;Nancyfx&lt;/a&gt; to process the markdown into static html, exactly like Jekyll. I'm
not sure about the name myself, but there you go.&lt;/p&gt;

&lt;p&gt;Over the next few posts I'll go over how I switched my blog from a hosted Wordpress to a staticly generated site using Snow.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/11/17/learning-reactiveui-for-fun-and-profit-hello-world/</id><title type="text">Learning ReactiveUI for fun and profit: Hello, World!</title><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to start learning how to use ReactiveUI to develop a WPF desktop application, and I have experience with building MVVM applications with Prism and Caliburn.Micro, so the challenge for me is learning RxUi's opinions and how to do stuff in an asynchronous fashion. I'm going to assume that anyone reading this has some understanding of WPF, XAML, MVVM and some familiarity with C#.&lt;/p&gt;

&lt;h1&gt;Baby Steps&lt;/h1&gt;

&lt;p&gt;Our goal here is simple: Create a basic WPF application, configure ReactiveUI and display a view with a label on it which says "Hello, World!". Not very original, but it should enable us to get a very basic grasp of the library.&lt;/p&gt;

&lt;p&gt;Ok?&lt;/p&gt;

&lt;p&gt;Start a new WPF application, and add ReactiveUI to it via NuGet. Make sure to add ReactiveUI-Xaml to it, as that will allow us to exciting things with WPF.&lt;/p&gt;
</summary><published>2013-11-17T00:00:00Z</published><updated>2013-11-17T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/11/17/learning-reactiveui-for-fun-and-profit-hello-world/" /><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to start learning how to use ReactiveUI to develop a WPF desktop application, and I have experience with building MVVM applications with Prism and Caliburn.Micro, so the challenge for me is learning RxUi's opinions and how to do stuff in an asynchronous fashion. I'm going to assume that anyone reading this has some understanding of WPF, XAML, MVVM and some familiarity with C#.&lt;/p&gt;

&lt;h1&gt;Baby Steps&lt;/h1&gt;

&lt;p&gt;Our goal here is simple: Create a basic WPF application, configure ReactiveUI and display a view with a label on it which says "Hello, World!". Not very original, but it should enable us to get a very basic grasp of the library.&lt;/p&gt;

&lt;p&gt;Ok?&lt;/p&gt;

&lt;p&gt;Start a new WPF application, and add ReactiveUI to it via NuGet. Make sure to add ReactiveUI-Xaml to it, as that will allow us to exciting things with WPF.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/11/16/learning-reactiveui-for-fun-and-profit/</id><title type="text">Learning ReactiveUI for fun and profit</title><summary type="html">&lt;p&gt;&lt;a title="ReactiveUI" href="http://www.reactiveui.net/" target="_blank"&gt;ReactiveUI&lt;/a&gt; (RxUI) is a C# library which combines the MVVM architectural pattern for UI development, and the &lt;a title="Reactive Extensions" href="http://rx.codeplex.com/" target="_blank"&gt;Reactive Extensions&lt;/a&gt; for asynchronous and event-based programming.&lt;/p&gt;

&lt;p&gt;I've done a &lt;a title="Custom Structuremap Dependency Resolver for ReactiveUI 5" href="http://temporalcohesion.co.uk/2013/07/04/custom-structuremap-dependency-resolver-for-reactiveui-5/" target="_blank"&gt;little bit messing around in the past&lt;/a&gt; with RxUI, but I've not really put together a full blown app that actually does something, so I've decided to learn how to use it to (for the time being) build a WPF desktop app. I might expand on what I build. We shall see.&lt;/p&gt;

&lt;p&gt;&lt;a title="Paul Betts" href="https://twitter.com/paulcbetts" target="_blank"&gt;Paul Betts&lt;/a&gt;, the amazing coding ninja and author of ReactiveUI, will probably be the first to admit that the documentation for ReactiveUI hasn't historically been all that it could be. There are some great example applications already out there, and if you ask a question on Twitter or the ReativeUI mailing list, you will get an answer. There also doesn't seem to be very many people blogging about how to use RxUI.&lt;/p&gt;

&lt;p&gt;So I thought I'd give it a try myself.&lt;/p&gt;

&lt;p&gt;I'm going to try and blog my way through my learning experience, on a step-by-step basis. I'm going to make mistakes, some of my code will be awful, my WPF UI design is guaranteed to make you vomit, and I might not even use RxUI in the way that you are supposed to. But hopefully any mistakes I make will go towards the learning aspect of this endeavour.&lt;/p&gt;
</summary><published>2013-11-16T00:00:00Z</published><updated>2013-11-16T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/11/16/learning-reactiveui-for-fun-and-profit/" /><content type="html">&lt;p&gt;&lt;a title="ReactiveUI" href="http://www.reactiveui.net/" target="_blank"&gt;ReactiveUI&lt;/a&gt; (RxUI) is a C# library which combines the MVVM architectural pattern for UI development, and the &lt;a title="Reactive Extensions" href="http://rx.codeplex.com/" target="_blank"&gt;Reactive Extensions&lt;/a&gt; for asynchronous and event-based programming.&lt;/p&gt;

&lt;p&gt;I've done a &lt;a title="Custom Structuremap Dependency Resolver for ReactiveUI 5" href="http://temporalcohesion.co.uk/2013/07/04/custom-structuremap-dependency-resolver-for-reactiveui-5/" target="_blank"&gt;little bit messing around in the past&lt;/a&gt; with RxUI, but I've not really put together a full blown app that actually does something, so I've decided to learn how to use it to (for the time being) build a WPF desktop app. I might expand on what I build. We shall see.&lt;/p&gt;

&lt;p&gt;&lt;a title="Paul Betts" href="https://twitter.com/paulcbetts" target="_blank"&gt;Paul Betts&lt;/a&gt;, the amazing coding ninja and author of ReactiveUI, will probably be the first to admit that the documentation for ReactiveUI hasn't historically been all that it could be. There are some great example applications already out there, and if you ask a question on Twitter or the ReativeUI mailing list, you will get an answer. There also doesn't seem to be very many people blogging about how to use RxUI.&lt;/p&gt;

&lt;p&gt;So I thought I'd give it a try myself.&lt;/p&gt;

&lt;p&gt;I'm going to try and blog my way through my learning experience, on a step-by-step basis. I'm going to make mistakes, some of my code will be awful, my WPF UI design is guaranteed to make you vomit, and I might not even use RxUI in the way that you are supposed to. But hopefully any mistakes I make will go towards the learning aspect of this endeavour.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/11/07/definitely-given-up-on-my-github-csharp-api-project/</id><title type="text">Definitely given up on my github-csharp-api project</title><summary type="html">&lt;p&gt;Not that I'd spent much time working on it lately. The fine folks at github have released Ocktokit.net, a C# library for accessing the github api. It's an official api - it renders my crappy project useless, so I'm putting it down completely.&lt;/p&gt;

&lt;p&gt;I will not work on it anymore.&lt;/p&gt;
</summary><published>2013-11-07T00:00:00Z</published><updated>2013-11-07T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/11/07/definitely-given-up-on-my-github-csharp-api-project/" /><content type="html">&lt;p&gt;Not that I'd spent much time working on it lately. The fine folks at github have released Ocktokit.net, a C# library for accessing the github api. It's an official api - it renders my crappy project useless, so I'm putting it down completely.&lt;/p&gt;

&lt;p&gt;I will not work on it anymore.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/07/04/custom-structuremap-dependency-resolver-for-reactiveui-5/</id><title type="text">Custom Structuremap Dependency Resolver for ReactiveUI 5</title><summary type="html">&lt;p&gt;&lt;a title="ReactiveUI" href="http://reactiveui.net" target="_blank"&gt;ReactiveUI&lt;/a&gt; 5 has just been released (although I've been playing with the -pre-release alpha for a while), and one of the shiny new things it brings is a simplified Service Location model. This is fine in the most part, for most applications. But, when you have some complicated dependencies between objects (ignoring the fact you might be heading towards a constructor over-injection anti-pattern), you may feel you need to use a full IoC container, like Structuremap, to do the heavy work.&lt;/p&gt;

&lt;p&gt;All we need to do first is implement {csharp}IMutableDependencyResolver{/csharp}, and replace the default implementation in ReactiveUi with our new one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    public class StructureMapDependencyResolver : IMutableDependencyResolver
    {
        public StructureMapDependencyResolver()
        {
            ObjectFactory.Initialize(init =&amp;gt; init.Scan(scan =&amp;gt;
                          {
                              scan.TheCallingAssembly();
                              scan.LookForRegistries();
                              scan.WithDefaultConventions();
                          }));

        }

        public void Dispose()
        {
        }

        public object GetService(Type serviceType, string contract = null)
        {
            return string.IsNullOrEmpty(contract)
                       ? ObjectFactory.GetInstance(serviceType)
                       : ObjectFactory.GetNamedInstance(serviceType, contract);
        }

        public IEnumerable&amp;lt;object&amp;gt; GetServices(Type serviceType, string contract = null)
        {
            return ObjectFactory.GetAllInstances(serviceType).Cast&amp;lt;object&amp;gt;();
        }

        public void Register(Func&amp;lt;object&amp;gt; factory, Type serviceType, string contract = null)
        {
            ObjectFactory.Configure(x =&amp;gt; x.For(serviceType).Use(factory()));
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, make ReactiveUI use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var resolver = new StructureMapDependencyResolver();
RxApp.InitializeCustomResolver((o, type) =&amp;gt; resolver.Register(() =&amp;gt; o, type));
RxApp.DependencyResolver = resolver;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second line there is very important: ReactiveUi uses the DependecyResolver internally, so if you use your own, you need to initialise it with the default ReactiveUi types, or else The Bad Things� will happen.&lt;/p&gt;
</summary><published>2013-07-03T23:00:00Z</published><updated>2013-07-03T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/07/04/custom-structuremap-dependency-resolver-for-reactiveui-5/" /><content type="html">&lt;p&gt;&lt;a title="ReactiveUI" href="http://reactiveui.net" target="_blank"&gt;ReactiveUI&lt;/a&gt; 5 has just been released (although I've been playing with the -pre-release alpha for a while), and one of the shiny new things it brings is a simplified Service Location model. This is fine in the most part, for most applications. But, when you have some complicated dependencies between objects (ignoring the fact you might be heading towards a constructor over-injection anti-pattern), you may feel you need to use a full IoC container, like Structuremap, to do the heavy work.&lt;/p&gt;

&lt;p&gt;All we need to do first is implement {csharp}IMutableDependencyResolver{/csharp}, and replace the default implementation in ReactiveUi with our new one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    public class StructureMapDependencyResolver : IMutableDependencyResolver
    {
        public StructureMapDependencyResolver()
        {
            ObjectFactory.Initialize(init =&amp;gt; init.Scan(scan =&amp;gt;
                          {
                              scan.TheCallingAssembly();
                              scan.LookForRegistries();
                              scan.WithDefaultConventions();
                          }));

        }

        public void Dispose()
        {
        }

        public object GetService(Type serviceType, string contract = null)
        {
            return string.IsNullOrEmpty(contract)
                       ? ObjectFactory.GetInstance(serviceType)
                       : ObjectFactory.GetNamedInstance(serviceType, contract);
        }

        public IEnumerable&amp;lt;object&amp;gt; GetServices(Type serviceType, string contract = null)
        {
            return ObjectFactory.GetAllInstances(serviceType).Cast&amp;lt;object&amp;gt;();
        }

        public void Register(Func&amp;lt;object&amp;gt; factory, Type serviceType, string contract = null)
        {
            ObjectFactory.Configure(x =&amp;gt; x.For(serviceType).Use(factory()));
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, make ReactiveUI use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var resolver = new StructureMapDependencyResolver();
RxApp.InitializeCustomResolver((o, type) =&amp;gt; resolver.Register(() =&amp;gt; o, type));
RxApp.DependencyResolver = resolver;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second line there is very important: ReactiveUi uses the DependecyResolver internally, so if you use your own, you need to initialise it with the default ReactiveUi types, or else The Bad Things� will happen.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/06/21/temp/</id><title type="text">temp</title><summary type="html">&lt;p&gt;this is a test while I move hosting&lt;/p&gt;
</summary><published>2013-06-20T23:00:00Z</published><updated>2013-06-20T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/06/21/temp/" /><content type="html">&lt;p&gt;this is a test while I move hosting&lt;/p&gt;
</content></entry></feed>