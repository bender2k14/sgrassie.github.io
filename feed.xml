<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">temporalcohesion.co.uk</title><subtitle type="text">temporalcohesion.co.uk</subtitle><id>http://www.temporalcohesion.co.uk/</id><updated>2015-03-08T23:09:30Z</updated><author><name>Stuart Grassie</name><uri>http://www.temporalcohesion.co.uk</uri><email>sgrassie@gmail.com</email></author><generator>Sandra.Snow Atom Generator</generator><link rel="alternate" href="http://www.temporalcohesion.co.uk/feed.xml" /><link rel="self" type="text/html" title="temporalcohesion.co.uk" href="http://www.temporalcohesion.co.uk/feed.xml" /><entry><id>http://www.temporalcohesion.co.uk/2015/03/08/learned-so-much-about-vim-that-i-should-already-know/</id><title type="text">Learned so much about Vim that I should already know</title><summary type="html">&lt;p&gt;I've been a user of Vim for several years now. I use it as my go-to standard editor. As I primarily write C# code, I obviously use Visual Studio, a lot, and I have the wonderful &lt;a href="https://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329"&gt;VsVim&lt;/a&gt; extension installed, which provides a lot of the power of Vim, from within Visual Studio.&lt;/p&gt;

&lt;p&gt;I thought I was pretty good at using Vim, until the other day when I saw Vim being used in some screencasts and I immediately thought that I suck at using Vim.&lt;/p&gt;

&lt;p&gt;It turns out, that I learned enough about using Vim that got me a good increase in productivity, that I basically stopped learning how to use it. My brain must have decided that I learned all I needed to know to get me through my day, and stopped me wanting to learn anymore.&lt;/p&gt;

&lt;p&gt;I have now found a great source of screencasts about using Vim, &lt;a href="http://derekwyatt.org/vim/tutorials/"&gt;here&lt;/a&gt;, which are split into Beginner, Intermediate and Advanced. I learned how to do new stuff with Vim that is in the first beginner video.&lt;/p&gt;

&lt;p&gt;I wish that I had found these videos several years ago when I was first starting out with Vim, as watching them then would probably have saved me a lot of time over the last several years.&lt;/p&gt;
</summary><published>2015-03-08T00:00:00Z</published><updated>2015-03-08T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2015/03/08/learned-so-much-about-vim-that-i-should-already-know/" /><content type="html">&lt;p&gt;I've been a user of Vim for several years now. I use it as my go-to standard editor. As I primarily write C# code, I obviously use Visual Studio, a lot, and I have the wonderful &lt;a href="https://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329"&gt;VsVim&lt;/a&gt; extension installed, which provides a lot of the power of Vim, from within Visual Studio.&lt;/p&gt;

&lt;p&gt;I thought I was pretty good at using Vim, until the other day when I saw Vim being used in some screencasts and I immediately thought that I suck at using Vim.&lt;/p&gt;

&lt;p&gt;It turns out, that I learned enough about using Vim that got me a good increase in productivity, that I basically stopped learning how to use it. My brain must have decided that I learned all I needed to know to get me through my day, and stopped me wanting to learn anymore.&lt;/p&gt;

&lt;p&gt;I have now found a great source of screencasts about using Vim, &lt;a href="http://derekwyatt.org/vim/tutorials/"&gt;here&lt;/a&gt;, which are split into Beginner, Intermediate and Advanced. I learned how to do new stuff with Vim that is in the first beginner video.&lt;/p&gt;

&lt;p&gt;I wish that I had found these videos several years ago when I was first starting out with Vim, as watching them then would probably have saved me a lot of time over the last several years.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/10/22/about-those-view-locator-conventions/</id><title type="text">About those view locator conventions</title><summary type="html">&lt;p&gt;As I mentioned in a previous post, I do not like some of the default PRISM view location conventions.&lt;/p&gt;

&lt;p&gt;As a refresher, these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View models to be located in a folder called ViewModel, named MyAwesomeViewModel&lt;/li&gt;
&lt;li&gt;Views to be located in a folder called Views, named MyAwesome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's the view naming that I don't like: In my world (which is based on Caliburn.Micro and ReactiveUI), views should be named MyAwesomeView. This is a simple distinction, but an important one for me because I automatically expect view names to end in View.&lt;/p&gt;

&lt;p&gt;Fortunately in PRISM 5, this is easy to change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver(viewType =&amp;gt;
{
    var viewName = viewType.FullName;
    var viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;
    var viewModelName = string.Format(CultureInfo.InvariantCulture, " {0}Model, {1} ", viewName.Replace("Views", "ViewModels"), viewAssemblyName);
    return Type.GetType(viewModelName);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get the full name of the view, and the full name of the assembly, and then replace "Views" for the "ViewModels" folder, and add "Model" to the end. I would call this somewhere in your applications startup, such as in the bootstrapper &lt;code&gt;Run&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Autowiring&lt;/h2&gt;

&lt;p&gt;Something else that you can do in PRISM 5, is autowire the view model and view such that the &lt;code&gt;DataContext&lt;/code&gt; of the view is automatically populated. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ViewModelLocationProvider.SetDefaultViewModelFactory(type =&amp;gt; Container.GetInstance(type));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I'm using StructureMap here (of which I am a big fan), but you should be able to get to work with your favourite IoC library.&lt;/p&gt;

&lt;p&gt;This though, means that you have to tell StructureMap about all your views in order for it to be able to resolve them. That's too much messing about remembering having to update a &lt;code&gt;Registry&lt;/code&gt; everytime I add a view. StructureMap can solve that for us no problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ViewRegistrationConvention : IRegistrationConvention
{
    public void Process(Type type, Registry registry)
    {
        if (!type.Name.EndsWith("View") || ! type.IsConcrete()) return ;

        registry.For(typeof(object)).Use(type).Named(type.Name);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we say that if the name of the type being resolved ends with "View", and it is a concrete type (i.e. not an abstract class or interface), then add it to the registry.
The trick with PRISM is that it is asking to resolve an &lt;code&gt;object&lt;/code&gt; with a specific name, it doesn't try to resolve the type of the view, so adding something to the registry as &lt;code&gt;For&amp;lt;MyAwesomeView&amp;gt;().Use&amp;lt;MyAwesomeView&amp;gt;()&lt;/code&gt; won't work, you have to use &lt;code&gt;For(typeof(object))&lt;/code&gt; and make it a named instance, using the name of the type. &lt;/p&gt;

&lt;p&gt;And then just register the convention when you configure the container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Container.Configure(configure =&amp;gt;
{
    configure.Scan(scan =&amp;gt;
    {
        ...
        scan.Convention&amp;lt;ViewRegistrationConvention&amp;gt;();
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then from the region manager, you can &lt;code&gt;RequestNavigate("AwesomeRegion", new Uri(typeof(MyAwesomeView)))&lt;/code&gt;, or use the extension method in my previous post. &lt;/p&gt;
</summary><published>2014-10-21T23:00:00Z</published><updated>2014-10-21T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/10/22/about-those-view-locator-conventions/" /><content type="html">&lt;p&gt;As I mentioned in a previous post, I do not like some of the default PRISM view location conventions.&lt;/p&gt;

&lt;p&gt;As a refresher, these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View models to be located in a folder called ViewModel, named MyAwesomeViewModel&lt;/li&gt;
&lt;li&gt;Views to be located in a folder called Views, named MyAwesome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's the view naming that I don't like: In my world (which is based on Caliburn.Micro and ReactiveUI), views should be named MyAwesomeView. This is a simple distinction, but an important one for me because I automatically expect view names to end in View.&lt;/p&gt;

&lt;p&gt;Fortunately in PRISM 5, this is easy to change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver(viewType =&amp;gt;
{
    var viewName = viewType.FullName;
    var viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;
    var viewModelName = string.Format(CultureInfo.InvariantCulture, " {0}Model, {1} ", viewName.Replace("Views", "ViewModels"), viewAssemblyName);
    return Type.GetType(viewModelName);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get the full name of the view, and the full name of the assembly, and then replace "Views" for the "ViewModels" folder, and add "Model" to the end. I would call this somewhere in your applications startup, such as in the bootstrapper &lt;code&gt;Run&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Autowiring&lt;/h2&gt;

&lt;p&gt;Something else that you can do in PRISM 5, is autowire the view model and view such that the &lt;code&gt;DataContext&lt;/code&gt; of the view is automatically populated. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ViewModelLocationProvider.SetDefaultViewModelFactory(type =&amp;gt; Container.GetInstance(type));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I'm using StructureMap here (of which I am a big fan), but you should be able to get to work with your favourite IoC library.&lt;/p&gt;

&lt;p&gt;This though, means that you have to tell StructureMap about all your views in order for it to be able to resolve them. That's too much messing about remembering having to update a &lt;code&gt;Registry&lt;/code&gt; everytime I add a view. StructureMap can solve that for us no problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ViewRegistrationConvention : IRegistrationConvention
{
    public void Process(Type type, Registry registry)
    {
        if (!type.Name.EndsWith("View") || ! type.IsConcrete()) return ;

        registry.For(typeof(object)).Use(type).Named(type.Name);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we say that if the name of the type being resolved ends with "View", and it is a concrete type (i.e. not an abstract class or interface), then add it to the registry.
The trick with PRISM is that it is asking to resolve an &lt;code&gt;object&lt;/code&gt; with a specific name, it doesn't try to resolve the type of the view, so adding something to the registry as &lt;code&gt;For&amp;lt;MyAwesomeView&amp;gt;().Use&amp;lt;MyAwesomeView&amp;gt;()&lt;/code&gt; won't work, you have to use &lt;code&gt;For(typeof(object))&lt;/code&gt; and make it a named instance, using the name of the type. &lt;/p&gt;

&lt;p&gt;And then just register the convention when you configure the container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Container.Configure(configure =&amp;gt;
{
    configure.Scan(scan =&amp;gt;
    {
        ...
        scan.Convention&amp;lt;ViewRegistrationConvention&amp;gt;();
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then from the region manager, you can &lt;code&gt;RequestNavigate("AwesomeRegion", new Uri(typeof(MyAwesomeView)))&lt;/code&gt;, or use the extension method in my previous post. &lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/10/20/a-useful-prism-extension-method/</id><title type="text">A useful PRISM extension method</title><summary type="html">&lt;p&gt;I'm doing some work with Microsoft &lt;a href="http://msdn.microsoft.com/en-us/library/gg406140.aspx"&gt;Prism&lt;/a&gt; at the moment, and once again I've gotten annoyed that &lt;code&gt;RequestNavigate&lt;/code&gt; doesn't have a generic overload.&lt;/p&gt;

&lt;p&gt;Naturally I had to write it, again:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;
public static class RegionManagerExtensions
{
    public void RequestNavigate&lt;TView&gt;(this IRegionManager regionManager, string regionName)
    {
        regionManager.RequestNavigate(regionName, new Uri(typeof(TView), UriKind.Relative).Name));
    }
}
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;new Uri(typeof(TView)...)&lt;/code&gt; works because of the view locator conventions I've implemented.&lt;/p&gt;
</summary><published>2014-10-19T23:00:00Z</published><updated>2014-10-19T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/10/20/a-useful-prism-extension-method/" /><content type="html">&lt;p&gt;I'm doing some work with Microsoft &lt;a href="http://msdn.microsoft.com/en-us/library/gg406140.aspx"&gt;Prism&lt;/a&gt; at the moment, and once again I've gotten annoyed that &lt;code&gt;RequestNavigate&lt;/code&gt; doesn't have a generic overload.&lt;/p&gt;

&lt;p&gt;Naturally I had to write it, again:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code&gt;
public static class RegionManagerExtensions
{
    public void RequestNavigate&lt;TView&gt;(this IRegionManager regionManager, string regionName)
    {
        regionManager.RequestNavigate(regionName, new Uri(typeof(TView), UriKind.Relative).Name));
    }
}
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;new Uri(typeof(TView)...)&lt;/code&gt; works because of the view locator conventions I've implemented.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/drafts/2014/06/05/reactiveui-hello-world/</id><title type="text">ReactiveUI - Hello, World!</title><summary type="html">&lt;blockquote&gt;
  &lt;p&gt;ReactiveUI is an MVVM framework. I'm going to mess around with it and see if I
  can make it do something useful, and maybe get shouted at for Doing It Wrong&amp;#8482;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A journey starts with a small step, and this journey will, I hope, take me, and you,
but mostly me I hope, toward a greater understanding of writing applications with ReactiveUI.&lt;/p&gt;

&lt;p&gt;I'm most interested in WPF applications, but I think at least some of what we're
going to get into applies to IOS/Android and WP8 - ReactiveUI is cross-platform
by nature, and that is one of the things that makes writing applications with it
fairly attractive.&lt;/p&gt;

&lt;h3&gt;First things first&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a new WPF application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Install-Package reactiveui -Pre&lt;/code&gt; (Currently 5.99.6)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What our app is going to do, is &lt;/p&gt;
</summary><published>2014-06-04T23:00:00Z</published><updated>2014-06-04T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/drafts/2014/06/05/reactiveui-hello-world/" /><content type="html">&lt;blockquote&gt;
  &lt;p&gt;ReactiveUI is an MVVM framework. I'm going to mess around with it and see if I
  can make it do something useful, and maybe get shouted at for Doing It Wrong&amp;#8482;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A journey starts with a small step, and this journey will, I hope, take me, and you,
but mostly me I hope, toward a greater understanding of writing applications with ReactiveUI.&lt;/p&gt;

&lt;p&gt;I'm most interested in WPF applications, but I think at least some of what we're
going to get into applies to IOS/Android and WP8 - ReactiveUI is cross-platform
by nature, and that is one of the things that makes writing applications with it
fairly attractive.&lt;/p&gt;

&lt;h3&gt;First things first&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a new WPF application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Install-Package reactiveui -Pre&lt;/code&gt; (Currently 5.99.6)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What our app is going to do, is &lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/05/30/how-i-moved-my-blog-to-sandra-now-part2/</id><title type="text">How I moved my blog to sandra snow, part two</title><summary type="html">&lt;p&gt;Once you have liberated your content from Wordpress, getting it generated by Snow is fairly trivial.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compile &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Snow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Copy &lt;a href="https://github.com/Sandra/Sandra.Snow/tree/master/SnowSite"&gt;SnowSite&lt;/a&gt; somewhere.&lt;/li&gt;
&lt;li&gt;Copy the fresh Snow files into a sub folder of the folder you created in #2. Mine is called &lt;code&gt;_compiler&lt;/code&gt; and contains &lt;code&gt;snow.exe&lt;/code&gt;, &lt;code&gt;Nancy.dll&lt;/code&gt;, &lt;code&gt;Nancy.ViewEngines.Razor.dll&lt;/code&gt; and &lt;code&gt;Nancy.Testing.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clean out the _posts folder, as it contains the markdown for &lt;a href="http://www.philiphaydon.com"&gt;philiphaydon.com&lt;/a&gt;, who is the creator of Snow.&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;snow.config&lt;/code&gt;. You'll want to change things to reflect your details, e.g. your name, email, blog title etc. The urlFormat is important. Mine is set to &lt;code&gt;yyyy/MM/dd/slug&lt;/code&gt;, which follows the same pattern as my old wordpres blog. This important because it means that the blog posts be generated with the same url, which means I don't have to dick about with 302 redirects or any of that shit.&lt;/li&gt;
&lt;li&gt;Compile your site. This is best achieved via a batch file which should live in the folder above the \Snow folder you created in #2. The batch file will look something like:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;echo off
cls
.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we tell snow where to find the &lt;code&gt;snow.config&lt;/code&gt; file, specify that we'd like snow to give us some debug output to the console window, and that we want it to fire up its built in web server so that we can preview our site.&lt;/p&gt;

&lt;p&gt;Name the batch file &lt;code&gt;compile.snow.bat&lt;/code&gt; so that Snow doesn't delete it when it compiles your site. When you now execute the batch file, Snow should compile your blog and fire it up in your default webbrowser, so you can check it out, and make sure it looks ok.&lt;/p&gt;

&lt;p&gt;At this point, you should be ready to deploy your site somewhere.&lt;/p&gt;
</summary><published>2014-05-29T23:00:00Z</published><updated>2014-05-29T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/05/30/how-i-moved-my-blog-to-sandra-now-part2/" /><content type="html">&lt;p&gt;Once you have liberated your content from Wordpress, getting it generated by Snow is fairly trivial.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compile &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Snow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Copy &lt;a href="https://github.com/Sandra/Sandra.Snow/tree/master/SnowSite"&gt;SnowSite&lt;/a&gt; somewhere.&lt;/li&gt;
&lt;li&gt;Copy the fresh Snow files into a sub folder of the folder you created in #2. Mine is called &lt;code&gt;_compiler&lt;/code&gt; and contains &lt;code&gt;snow.exe&lt;/code&gt;, &lt;code&gt;Nancy.dll&lt;/code&gt;, &lt;code&gt;Nancy.ViewEngines.Razor.dll&lt;/code&gt; and &lt;code&gt;Nancy.Testing.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Clean out the _posts folder, as it contains the markdown for &lt;a href="http://www.philiphaydon.com"&gt;philiphaydon.com&lt;/a&gt;, who is the creator of Snow.&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;snow.config&lt;/code&gt;. You'll want to change things to reflect your details, e.g. your name, email, blog title etc. The urlFormat is important. Mine is set to &lt;code&gt;yyyy/MM/dd/slug&lt;/code&gt;, which follows the same pattern as my old wordpres blog. This important because it means that the blog posts be generated with the same url, which means I don't have to dick about with 302 redirects or any of that shit.&lt;/li&gt;
&lt;li&gt;Compile your site. This is best achieved via a batch file which should live in the folder above the \Snow folder you created in #2. The batch file will look something like:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;echo off
cls
.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we tell snow where to find the &lt;code&gt;snow.config&lt;/code&gt; file, specify that we'd like snow to give us some debug output to the console window, and that we want it to fire up its built in web server so that we can preview our site.&lt;/p&gt;

&lt;p&gt;Name the batch file &lt;code&gt;compile.snow.bat&lt;/code&gt; so that Snow doesn't delete it when it compiles your site. When you now execute the batch file, Snow should compile your blog and fire it up in your default webbrowser, so you can check it out, and make sure it looks ok.&lt;/p&gt;

&lt;p&gt;At this point, you should be ready to deploy your site somewhere.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/drafts/2014/03/07/creating-a-custom-theme-for-sandra-snow/</id><title type="text">Create a custom theme for sandra snow</title><summary type="html">&lt;p&gt;&lt;/p&gt;
</summary><published>2014-03-07T00:00:00Z</published><updated>2014-03-07T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/drafts/2014/03/07/creating-a-custom-theme-for-sandra-snow/" /><content type="html">&lt;p&gt;&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/03/03/how-i-moved-my-blog-from-wordpress-to-snow/</id><title type="text">How I moved my blog from wordpress to snow, part one</title><summary type="html">&lt;p&gt;Wherein I show you how I moved my blog from Wordpress, to a statically generated html hosted on github. I will assume that you have a wordpress blog, hosted on either Wordpress.com or your own hosting. If you don't have a wordpress based blog, then that's ok, most of this will still apply.&lt;/p&gt;

&lt;p&gt;We can identify a pretty broad set of tasks straightaway:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export posts from wordpress into markdown.&lt;/li&gt;
&lt;li&gt;Configure Sandra.Snow to publish our markdown.&lt;/li&gt;
&lt;li&gt;Make it look nice.&lt;/li&gt;
&lt;li&gt;Setup github to publish our new site.&lt;/li&gt;
&lt;li&gt;Update our DNS settings.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Liberating content from Wordpress&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.temporalcohesion.co.uk/../../../../../images/wordpress-export.png" alt="Export wordpress content"&gt;&lt;/p&gt;

&lt;p&gt;Jekyll has some tooling that enables auto-exporting of your blog and its contents into markdown for you, but as it is still (relativly) early days for Sandra.Snow, there is no such tooling for us to leverage.&lt;/p&gt;

&lt;p&gt;Wordpress makes it fairly easy to export your blog posts, pages, comments and some other meta-information, packaging everything up into a single XML file, that depending on the number of blog post and other content you have, can be fairly large.&lt;/p&gt;

&lt;p&gt;When you click export, you'll be able to download the XML file containing your content. Now we just have to pull out what we want.&lt;/p&gt;

&lt;h2&gt;wp2md&lt;/h2&gt;

&lt;p&gt;I looked around for something that would do the conversion of my wordpress content into markdown, but I couldn't find one that I liked, or that worked exactly the way that I wanted it to. So &lt;a href="https://github.com/sgrassie/wp2md.net"&gt;I wrote my own&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The export file format isn't documented anywhere that I could find online, there were a few bits and pieces here and there on blogs and on some forums, but, honestly, it's just an xml file, it's not all that difficult. The only thing that may trip you up is the number of xml namespaces it uses, although if like me you've had a job maintaining software which manages complex xml, then it's no big deal.&lt;/p&gt;

&lt;p&gt;I found it has a root &lt;code&gt;&amp;lt;rss&amp;gt;&lt;/code&gt; element, followed by &lt;code&gt;&amp;lt;channel&amp;gt;&lt;/code&gt; and then &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; where an item is a post, comment or even a page. An item is then broken down into further child elements which include things like the title of the post (or page, or comment), the url, publication date, actual content of the post, and various other pieces of meta data about the post. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Definitely given up on my github-csharp-api project&amp;lt;/title&amp;gt;
&amp;lt;link&amp;gt;http://temporalcohesion.co.uk/2013/11/07/definitely-given-up-on-my-github-csharp-api-project/&amp;lt;/link&amp;gt;
&amp;lt;pubDate&amp;gt;Thu, 07 Nov 2013 21:08:19 +0000&amp;lt;/pubDate&amp;gt;
&amp;lt;dc:creator&amp;gt;&amp;lt;![CDATA[stuart]]&amp;gt;&amp;lt;/dc:creator&amp;gt;
&amp;lt;guid isPermaLink="false"&amp;gt;http://temporalcohesion.co.uk/?p=394&amp;lt;/guid&amp;gt;
&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;
&amp;lt;content:encoded&amp;gt;&amp;lt;![CDATA[Not that I'd spent much time working on it lately. The fine folks at github have released Ocktokit.net, a C# library for accessing the github api. It's an official api - it renders my crappy project useless, so I'm putting it down completely.

I will not work on it anymore.]]&amp;gt;&amp;lt;/content:encoded&amp;gt;
&amp;lt;excerpt:encoded&amp;gt;&amp;lt;![CDATA[]]&amp;gt;&amp;lt;/excerpt:encoded&amp;gt;
&amp;lt;wp:post_id&amp;gt;394&amp;lt;/wp:post_id&amp;gt;
&amp;lt;wp:post_date&amp;gt;2013-11-07 21:08:19&amp;lt;/wp:post_date&amp;gt;
&amp;lt;wp:post_date_gmt&amp;gt;2013-11-07 21:08:19&amp;lt;/wp:post_date_gmt&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I defined a POCO &lt;a href="https://github.com/sgrassie/wp2md.net/blob/master/wp2md/Item.cs"&gt;&lt;code&gt;Item.cs&lt;/code&gt;&lt;/a&gt; model class to hold everything interesting about a post, and then parsed the document to get all of the items.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Items = (from item in _document.Root.Element("channel").Elements("item")
  select new Item
  {
    Title = item.Element("title").Value,
    PublicationDate = ParseDateTime(item.Element("pubDate").Value),
    Author = item.Element(dc + "creator").Value,
    ....
  }).ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fairly standard Linq-to-Object parsing of the XML document. You can see the XML Namespace &lt;code&gt;dc&lt;/code&gt; being used, that is just a static namespace member defined as &lt;code&gt;private static XNamespace dc = "http://purl.org/dc/elements/1.1/";&lt;/code&gt; at the top of the class.&lt;/p&gt;

&lt;p&gt;Now that we have a whole bunch of &lt;code&gt;Items&lt;/code&gt;, we can move on to generating the markdown.&lt;/p&gt;

&lt;p&gt;Markdown is really fairly simple. Before I embarked on this process, I'd never realised how powerfully simple it is. Our &lt;code&gt;Item&lt;/code&gt; now contains the (mostly) encoded content of our post, so we don't have any worry about doing any escaped html removal. To my eyes, and someone correct me if I'm wrong, but it seems to me that Wordpress virtually converts our content into markdown when it generates the export. I could be wrong, but it's what it looks like to me.&lt;/p&gt;

&lt;p&gt;We can then use the Visitor pattern to control how we want our &lt;code&gt;Items&lt;/code&gt; to be processed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parser.Parse(document);
parser.VisitWith(new PostVisitor());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did not have very many pages on my wordpress blog, so I was not concerned with converting them. Similarly, I'd already converted my wordpress blog to use disqus comments, so I did not need to write a Visitor to handle converting the comments.&lt;/p&gt;

&lt;p&gt;As this post is already getting fairly long, I will leave a discussion of the Visitor pattern to another time, but you can see the &lt;code&gt;PostVisitor&lt;/code&gt; implementation in detail &lt;a href="https://github.com/sgrassie/wp2md.net/blob/master/wp2md/Visitor.cs"&gt;in the repo on Github.com&lt;/a&gt;.&lt;/p&gt;
</summary><published>2014-03-03T00:00:00Z</published><updated>2014-03-03T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/03/03/how-i-moved-my-blog-from-wordpress-to-snow/" /><content type="html">&lt;p&gt;Wherein I show you how I moved my blog from Wordpress, to a statically generated html hosted on github. I will assume that you have a wordpress blog, hosted on either Wordpress.com or your own hosting. If you don't have a wordpress based blog, then that's ok, most of this will still apply.&lt;/p&gt;

&lt;p&gt;We can identify a pretty broad set of tasks straightaway:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export posts from wordpress into markdown.&lt;/li&gt;
&lt;li&gt;Configure Sandra.Snow to publish our markdown.&lt;/li&gt;
&lt;li&gt;Make it look nice.&lt;/li&gt;
&lt;li&gt;Setup github to publish our new site.&lt;/li&gt;
&lt;li&gt;Update our DNS settings.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Liberating content from Wordpress&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.temporalcohesion.co.uk/../../../../../images/wordpress-export.png" alt="Export wordpress content"&gt;&lt;/p&gt;

&lt;p&gt;Jekyll has some tooling that enables auto-exporting of your blog and its contents into markdown for you, but as it is still (relativly) early days for Sandra.Snow, there is no such tooling for us to leverage.&lt;/p&gt;

&lt;p&gt;Wordpress makes it fairly easy to export your blog posts, pages, comments and some other meta-information, packaging everything up into a single XML file, that depending on the number of blog post and other content you have, can be fairly large.&lt;/p&gt;

&lt;p&gt;When you click export, you'll be able to download the XML file containing your content. Now we just have to pull out what we want.&lt;/p&gt;

&lt;h2&gt;wp2md&lt;/h2&gt;

&lt;p&gt;I looked around for something that would do the conversion of my wordpress content into markdown, but I couldn't find one that I liked, or that worked exactly the way that I wanted it to. So &lt;a href="https://github.com/sgrassie/wp2md.net"&gt;I wrote my own&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The export file format isn't documented anywhere that I could find online, there were a few bits and pieces here and there on blogs and on some forums, but, honestly, it's just an xml file, it's not all that difficult. The only thing that may trip you up is the number of xml namespaces it uses, although if like me you've had a job maintaining software which manages complex xml, then it's no big deal.&lt;/p&gt;

&lt;p&gt;I found it has a root &lt;code&gt;&amp;lt;rss&amp;gt;&lt;/code&gt; element, followed by &lt;code&gt;&amp;lt;channel&amp;gt;&lt;/code&gt; and then &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; where an item is a post, comment or even a page. An item is then broken down into further child elements which include things like the title of the post (or page, or comment), the url, publication date, actual content of the post, and various other pieces of meta data about the post. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Definitely given up on my github-csharp-api project&amp;lt;/title&amp;gt;
&amp;lt;link&amp;gt;http://temporalcohesion.co.uk/2013/11/07/definitely-given-up-on-my-github-csharp-api-project/&amp;lt;/link&amp;gt;
&amp;lt;pubDate&amp;gt;Thu, 07 Nov 2013 21:08:19 +0000&amp;lt;/pubDate&amp;gt;
&amp;lt;dc:creator&amp;gt;&amp;lt;![CDATA[stuart]]&amp;gt;&amp;lt;/dc:creator&amp;gt;
&amp;lt;guid isPermaLink="false"&amp;gt;http://temporalcohesion.co.uk/?p=394&amp;lt;/guid&amp;gt;
&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;
&amp;lt;content:encoded&amp;gt;&amp;lt;![CDATA[Not that I'd spent much time working on it lately. The fine folks at github have released Ocktokit.net, a C# library for accessing the github api. It's an official api - it renders my crappy project useless, so I'm putting it down completely.

I will not work on it anymore.]]&amp;gt;&amp;lt;/content:encoded&amp;gt;
&amp;lt;excerpt:encoded&amp;gt;&amp;lt;![CDATA[]]&amp;gt;&amp;lt;/excerpt:encoded&amp;gt;
&amp;lt;wp:post_id&amp;gt;394&amp;lt;/wp:post_id&amp;gt;
&amp;lt;wp:post_date&amp;gt;2013-11-07 21:08:19&amp;lt;/wp:post_date&amp;gt;
&amp;lt;wp:post_date_gmt&amp;gt;2013-11-07 21:08:19&amp;lt;/wp:post_date_gmt&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I defined a POCO &lt;a href="https://github.com/sgrassie/wp2md.net/blob/master/wp2md/Item.cs"&gt;&lt;code&gt;Item.cs&lt;/code&gt;&lt;/a&gt; model class to hold everything interesting about a post, and then parsed the document to get all of the items.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Items = (from item in _document.Root.Element("channel").Elements("item")
  select new Item
  {
    Title = item.Element("title").Value,
    PublicationDate = ParseDateTime(item.Element("pubDate").Value),
    Author = item.Element(dc + "creator").Value,
    ....
  }).ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fairly standard Linq-to-Object parsing of the XML document. You can see the XML Namespace &lt;code&gt;dc&lt;/code&gt; being used, that is just a static namespace member defined as &lt;code&gt;private static XNamespace dc = "http://purl.org/dc/elements/1.1/";&lt;/code&gt; at the top of the class.&lt;/p&gt;

&lt;p&gt;Now that we have a whole bunch of &lt;code&gt;Items&lt;/code&gt;, we can move on to generating the markdown.&lt;/p&gt;

&lt;p&gt;Markdown is really fairly simple. Before I embarked on this process, I'd never realised how powerfully simple it is. Our &lt;code&gt;Item&lt;/code&gt; now contains the (mostly) encoded content of our post, so we don't have any worry about doing any escaped html removal. To my eyes, and someone correct me if I'm wrong, but it seems to me that Wordpress virtually converts our content into markdown when it generates the export. I could be wrong, but it's what it looks like to me.&lt;/p&gt;

&lt;p&gt;We can then use the Visitor pattern to control how we want our &lt;code&gt;Items&lt;/code&gt; to be processed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parser.Parse(document);
parser.VisitWith(new PostVisitor());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did not have very many pages on my wordpress blog, so I was not concerned with converting them. Similarly, I'd already converted my wordpress blog to use disqus comments, so I did not need to write a Visitor to handle converting the comments.&lt;/p&gt;

&lt;p&gt;As this post is already getting fairly long, I will leave a discussion of the Visitor pattern to another time, but you can see the &lt;code&gt;PostVisitor&lt;/code&gt; implementation in detail &lt;a href="https://github.com/sgrassie/wp2md.net/blob/master/wp2md/Visitor.cs"&gt;in the repo on Github.com&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/02/19/extending-sandra-snow/</id><title type="text">Extending Sandra.Snow</title><summary type="html">&lt;p&gt;After switching my blog over to use &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt;, I noticed that in at least one feed aggregator that my blog shows up in, it wasn't displaying correct. The escaped html in the feed generator from the markdown by Snow wasn't getting rendered in the aggregator correctly. After a little digging it was apparant to me that the &lt;code&gt;RssResponse&lt;/code&gt; in Snow was not correctly setting it's content type.&lt;/p&gt;

&lt;p&gt;I could have left it there, or submitted a small patch to fix the issue (I still will), but I noticed that the feed it generates isn't a pure atom feed, so I basically copied the relevant classes (changing 'rss' to 'atom') in the class names, and did a little configuration, and swapped over the feed to use atom.&lt;/p&gt;

&lt;p&gt;Even though I know that the atom feed validates, this post is in part a test to see what happens...&lt;/p&gt;
</summary><published>2014-02-19T00:00:00Z</published><updated>2014-02-19T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/02/19/extending-sandra-snow/" /><content type="html">&lt;p&gt;After switching my blog over to use &lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt;, I noticed that in at least one feed aggregator that my blog shows up in, it wasn't displaying correct. The escaped html in the feed generator from the markdown by Snow wasn't getting rendered in the aggregator correctly. After a little digging it was apparant to me that the &lt;code&gt;RssResponse&lt;/code&gt; in Snow was not correctly setting it's content type.&lt;/p&gt;

&lt;p&gt;I could have left it there, or submitted a small patch to fix the issue (I still will), but I noticed that the feed it generates isn't a pure atom feed, so I basically copied the relevant classes (changing 'rss' to 'atom') in the class names, and did a little configuration, and swapped over the feed to use atom.&lt;/p&gt;

&lt;p&gt;Even though I know that the atom feed validates, this post is in part a test to see what happens...&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/02/15/updating-git-submodules/</id><title type="text">Updating git submodules</title><summary type="html">&lt;p&gt;I'm writing this up mostly for my own benefit so that I don't have to go searching for it again in future.&lt;/p&gt;

&lt;p&gt;When you have a git repository which has a few submodules (.e.g. a vim dotfiles repo), you may find that you'll notice one day that they all point to ancient commits in their parent repositories. Consequently, you want to update them, to get the new shiny things.&lt;/p&gt;

&lt;p&gt;To do so is fairly straightforward (from your parent repository):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule update --recursive --remote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells git that you want to update the submodules to the latest commit on the submodules remote tracking branch (&lt;code&gt;--remote&lt;/code&gt;) and to do it recursively (&lt;code&gt;--recursive&lt;/code&gt;) on all of the submodules (and their submodules if any).&lt;/p&gt;

&lt;p&gt;Then if you check the &lt;code&gt;git status&lt;/code&gt; you should see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
M:\vimfiles [master +0 ~9 -0]&gt; git status
# On branch master
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   bundle/ctrlp (new commits)
#       modified:   bundle/delimitmate (new commits)
#       modified:   bundle/nerdtree (new commits)
#       modified:   bundle/tagbar (new commits)
#       modified:   bundle/vim-jade (new commits)
#       modified:   bundle/vim-javascript.git (new commits)
#       modified:   bundle/vim-pathogen (new commits)
#       modified:   bundle/vim-powerline (new commits)
#       modified:   bundle/vim-ps1 (new commits)
#
no changes added to commit (use "git add" and/or "git commit -a")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may find this confusing, as you have just updated all the submodules to the latest commit. Why are are there new commits? If you do a &lt;code&gt;diff&lt;/code&gt; on one of them, you'll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
M:\vimfiles [master +0 ~9 -0]&gt; git diff bundle/ctrlp
diff --git a/bundle/ctrlp b/bundle/ctrlp
index be5842a..b5d3fe6 160000
--- a/bundle/ctrlp
+++ b/bundle/ctrlp
@@ -1 +1 @@
-Subproject commit be5842a376f16c16c5dc4cc1879d7168a074f7de
+Subproject commit b5d3fe66a58a13d2ff8b6391f4387608496a030f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which makes sense, because you have asked git to update the submodule(s) to the latest commit, so it is therefore unsuprising that your repo now knows that its submodules have changed. You need to tell your repository to actually use the latest commit of the submodules, and then commit everything:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git submodule update
git commit -am "Updated submodules to latest"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope that helps someone.&lt;/p&gt;
</summary><published>2014-02-15T00:00:00Z</published><updated>2014-02-15T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/02/15/updating-git-submodules/" /><content type="html">&lt;p&gt;I'm writing this up mostly for my own benefit so that I don't have to go searching for it again in future.&lt;/p&gt;

&lt;p&gt;When you have a git repository which has a few submodules (.e.g. a vim dotfiles repo), you may find that you'll notice one day that they all point to ancient commits in their parent repositories. Consequently, you want to update them, to get the new shiny things.&lt;/p&gt;

&lt;p&gt;To do so is fairly straightforward (from your parent repository):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule update --recursive --remote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells git that you want to update the submodules to the latest commit on the submodules remote tracking branch (&lt;code&gt;--remote&lt;/code&gt;) and to do it recursively (&lt;code&gt;--recursive&lt;/code&gt;) on all of the submodules (and their submodules if any).&lt;/p&gt;

&lt;p&gt;Then if you check the &lt;code&gt;git status&lt;/code&gt; you should see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
M:\vimfiles [master +0 ~9 -0]&gt; git status
# On branch master
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   bundle/ctrlp (new commits)
#       modified:   bundle/delimitmate (new commits)
#       modified:   bundle/nerdtree (new commits)
#       modified:   bundle/tagbar (new commits)
#       modified:   bundle/vim-jade (new commits)
#       modified:   bundle/vim-javascript.git (new commits)
#       modified:   bundle/vim-pathogen (new commits)
#       modified:   bundle/vim-powerline (new commits)
#       modified:   bundle/vim-ps1 (new commits)
#
no changes added to commit (use "git add" and/or "git commit -a")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may find this confusing, as you have just updated all the submodules to the latest commit. Why are are there new commits? If you do a &lt;code&gt;diff&lt;/code&gt; on one of them, you'll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
M:\vimfiles [master +0 ~9 -0]&gt; git diff bundle/ctrlp
diff --git a/bundle/ctrlp b/bundle/ctrlp
index be5842a..b5d3fe6 160000
--- a/bundle/ctrlp
+++ b/bundle/ctrlp
@@ -1 +1 @@
-Subproject commit be5842a376f16c16c5dc4cc1879d7168a074f7de
+Subproject commit b5d3fe66a58a13d2ff8b6391f4387608496a030f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which makes sense, because you have asked git to update the submodule(s) to the latest commit, so it is therefore unsuprising that your repo now knows that its submodules have changed. You need to tell your repository to actually use the latest commit of the submodules, and then commit everything:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git submodule update
git commit -am "Updated submodules to latest"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope that helps someone.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2014/02/08/moved-blog-to-snow-and-github/</id><title type="text">Moved blog to snow and github</title><summary type="html">&lt;h1&gt;No longed bound to wordpress&lt;/h1&gt;

&lt;p&gt;For most of the time I've been blogging, I've used Wordpress. It's very good software, but kind of requires
somewhere to host it. Either on your own custom hosting, or wordpress.com. For a long time, I paid for my own
hosting provider. But the times they are a changing, and I'm no longer prepared to pay for my own hosting.&lt;/p&gt;

&lt;h2&gt;Enter snow&lt;/h2&gt;

&lt;p&gt;Github provide a way of hosting a website, for free, it's called Github Pages. Using a tool called Jekyll, it is
possible to take a series of Markdown files and generate a static html website from them. The only drawback to Jekyll
is that that it's written in Ruby, it can be a pain to configure on Windows, and I'm primarily a windows kind of guy. &lt;/p&gt;

&lt;p&gt;It's also true that the vast majority of guides/tutorials out there for running a blog with Jekyll assume that you'll
be doing it on either a Mac or a Linux machine. I work entirely on Windows, and there is no way I'm going to try to
configure Ruby on all the machines I use (or might use).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt; is written in C#, and uses &lt;a href="https://github.com/nancyFx/Nancy"&gt;Nancyfx&lt;/a&gt; to process the markdown into static html, exactly like Jekyll. I'm
not sure about the name myself, but there you go.&lt;/p&gt;

&lt;p&gt;Over the next few posts I'll go over how I switched my blog from a hosted Wordpress to a staticly generated site using Snow.&lt;/p&gt;
</summary><published>2014-02-08T00:00:00Z</published><updated>2014-02-08T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2014/02/08/moved-blog-to-snow-and-github/" /><content type="html">&lt;h1&gt;No longed bound to wordpress&lt;/h1&gt;

&lt;p&gt;For most of the time I've been blogging, I've used Wordpress. It's very good software, but kind of requires
somewhere to host it. Either on your own custom hosting, or wordpress.com. For a long time, I paid for my own
hosting provider. But the times they are a changing, and I'm no longer prepared to pay for my own hosting.&lt;/p&gt;

&lt;h2&gt;Enter snow&lt;/h2&gt;

&lt;p&gt;Github provide a way of hosting a website, for free, it's called Github Pages. Using a tool called Jekyll, it is
possible to take a series of Markdown files and generate a static html website from them. The only drawback to Jekyll
is that that it's written in Ruby, it can be a pain to configure on Windows, and I'm primarily a windows kind of guy. &lt;/p&gt;

&lt;p&gt;It's also true that the vast majority of guides/tutorials out there for running a blog with Jekyll assume that you'll
be doing it on either a Mac or a Linux machine. I work entirely on Windows, and there is no way I'm going to try to
configure Ruby on all the machines I use (or might use).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Sandra.Snow&lt;/a&gt; is written in C#, and uses &lt;a href="https://github.com/nancyFx/Nancy"&gt;Nancyfx&lt;/a&gt; to process the markdown into static html, exactly like Jekyll. I'm
not sure about the name myself, but there you go.&lt;/p&gt;

&lt;p&gt;Over the next few posts I'll go over how I switched my blog from a hosted Wordpress to a staticly generated site using Snow.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/11/17/learning-reactiveui-for-fun-and-profit-hello-world/</id><title type="text">Learning ReactiveUI for fun and profit: Hello, World!</title><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to start learning how to use ReactiveUI to develop a WPF desktop application, and I have experience with building MVVM applications with Prism and Caliburn.Micro, so the challenge for me is learning RxUi's opinions and how to do stuff in an asynchronous fashion. I'm going to assume that anyone reading this has some understanding of WPF, XAML, MVVM and some familiarity with C#.&lt;/p&gt;

&lt;h1&gt;Baby Steps&lt;/h1&gt;

&lt;p&gt;Our goal here is simple: Create a basic WPF application, configure ReactiveUI and display a view with a label on it which says "Hello, World!". Not very original, but it should enable us to get a very basic grasp of the library.&lt;/p&gt;

&lt;p&gt;Ok?&lt;/p&gt;

&lt;p&gt;Start a new WPF application, and add ReactiveUI to it via NuGet. Make sure to add ReactiveUI-Xaml to it, as that will allow us to exciting things with WPF.&lt;/p&gt;
</summary><published>2013-11-17T00:00:00Z</published><updated>2013-11-17T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/11/17/learning-reactiveui-for-fun-and-profit-hello-world/" /><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I want to start learning how to use ReactiveUI to develop a WPF desktop application, and I have experience with building MVVM applications with Prism and Caliburn.Micro, so the challenge for me is learning RxUi's opinions and how to do stuff in an asynchronous fashion. I'm going to assume that anyone reading this has some understanding of WPF, XAML, MVVM and some familiarity with C#.&lt;/p&gt;

&lt;h1&gt;Baby Steps&lt;/h1&gt;

&lt;p&gt;Our goal here is simple: Create a basic WPF application, configure ReactiveUI and display a view with a label on it which says "Hello, World!". Not very original, but it should enable us to get a very basic grasp of the library.&lt;/p&gt;

&lt;p&gt;Ok?&lt;/p&gt;

&lt;p&gt;Start a new WPF application, and add ReactiveUI to it via NuGet. Make sure to add ReactiveUI-Xaml to it, as that will allow us to exciting things with WPF.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/11/16/learning-reactiveui-for-fun-and-profit/</id><title type="text">Learning ReactiveUI for fun and profit</title><summary type="html">&lt;p&gt;&lt;a title="ReactiveUI" href="http://www.reactiveui.net/" target="_blank"&gt;ReactiveUI&lt;/a&gt; (RxUI) is a C# library which combines the MVVM architectural pattern for UI development, and the &lt;a title="Reactive Extensions" href="http://rx.codeplex.com/" target="_blank"&gt;Reactive Extensions&lt;/a&gt; for asynchronous and event-based programming.&lt;/p&gt;

&lt;p&gt;I've done a &lt;a title="Custom Structuremap Dependency Resolver for ReactiveUI 5" href="http://temporalcohesion.co.uk/2013/07/04/custom-structuremap-dependency-resolver-for-reactiveui-5/" target="_blank"&gt;little bit messing around in the past&lt;/a&gt; with RxUI, but I've not really put together a full blown app that actually does something, so I've decided to learn how to use it to (for the time being) build a WPF desktop app. I might expand on what I build. We shall see.&lt;/p&gt;

&lt;p&gt;&lt;a title="Paul Betts" href="https://twitter.com/paulcbetts" target="_blank"&gt;Paul Betts&lt;/a&gt;, the amazing coding ninja and author of ReactiveUI, will probably be the first to admit that the documentation for ReactiveUI hasn't historically been all that it could be. There are some great example applications already out there, and if you ask a question on Twitter or the ReativeUI mailing list, you will get an answer. There also doesn't seem to be very many people blogging about how to use RxUI.&lt;/p&gt;

&lt;p&gt;So I thought I'd give it a try myself.&lt;/p&gt;

&lt;p&gt;I'm going to try and blog my way through my learning experience, on a step-by-step basis. I'm going to make mistakes, some of my code will be awful, my WPF UI design is guaranteed to make you vomit, and I might not even use RxUI in the way that you are supposed to. But hopefully any mistakes I make will go towards the learning aspect of this endeavour.&lt;/p&gt;
</summary><published>2013-11-16T00:00:00Z</published><updated>2013-11-16T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/11/16/learning-reactiveui-for-fun-and-profit/" /><content type="html">&lt;p&gt;&lt;a title="ReactiveUI" href="http://www.reactiveui.net/" target="_blank"&gt;ReactiveUI&lt;/a&gt; (RxUI) is a C# library which combines the MVVM architectural pattern for UI development, and the &lt;a title="Reactive Extensions" href="http://rx.codeplex.com/" target="_blank"&gt;Reactive Extensions&lt;/a&gt; for asynchronous and event-based programming.&lt;/p&gt;

&lt;p&gt;I've done a &lt;a title="Custom Structuremap Dependency Resolver for ReactiveUI 5" href="http://temporalcohesion.co.uk/2013/07/04/custom-structuremap-dependency-resolver-for-reactiveui-5/" target="_blank"&gt;little bit messing around in the past&lt;/a&gt; with RxUI, but I've not really put together a full blown app that actually does something, so I've decided to learn how to use it to (for the time being) build a WPF desktop app. I might expand on what I build. We shall see.&lt;/p&gt;

&lt;p&gt;&lt;a title="Paul Betts" href="https://twitter.com/paulcbetts" target="_blank"&gt;Paul Betts&lt;/a&gt;, the amazing coding ninja and author of ReactiveUI, will probably be the first to admit that the documentation for ReactiveUI hasn't historically been all that it could be. There are some great example applications already out there, and if you ask a question on Twitter or the ReativeUI mailing list, you will get an answer. There also doesn't seem to be very many people blogging about how to use RxUI.&lt;/p&gt;

&lt;p&gt;So I thought I'd give it a try myself.&lt;/p&gt;

&lt;p&gt;I'm going to try and blog my way through my learning experience, on a step-by-step basis. I'm going to make mistakes, some of my code will be awful, my WPF UI design is guaranteed to make you vomit, and I might not even use RxUI in the way that you are supposed to. But hopefully any mistakes I make will go towards the learning aspect of this endeavour.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/11/07/definitely-given-up-on-my-github-csharp-api-project/</id><title type="text">Definitely given up on my github-csharp-api project</title><summary type="html">&lt;p&gt;Not that I'd spent much time working on it lately. The fine folks at github have released Ocktokit.net, a C# library for accessing the github api. It's an official api - it renders my crappy project useless, so I'm putting it down completely.&lt;/p&gt;

&lt;p&gt;I will not work on it anymore.&lt;/p&gt;
</summary><published>2013-11-07T00:00:00Z</published><updated>2013-11-07T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/11/07/definitely-given-up-on-my-github-csharp-api-project/" /><content type="html">&lt;p&gt;Not that I'd spent much time working on it lately. The fine folks at github have released Ocktokit.net, a C# library for accessing the github api. It's an official api - it renders my crappy project useless, so I'm putting it down completely.&lt;/p&gt;

&lt;p&gt;I will not work on it anymore.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/07/04/custom-structuremap-dependency-resolver-for-reactiveui-5/</id><title type="text">Custom Structuremap Dependency Resolver for ReactiveUI 5</title><summary type="html">&lt;p&gt;&lt;a title="ReactiveUI" href="http://reactiveui.net" target="_blank"&gt;ReactiveUI&lt;/a&gt; 5 has just been released (although I've been playing with the -pre-release alpha for a while), and one of the shiny new things it brings is a simplified Service Location model. This is fine in the most part, for most applications. But, when you have some complicated dependencies between objects (ignoring the fact you might be heading towards a constructor over-injection anti-pattern), you may feel you need to use a full IoC container, like Structuremap, to do the heavy work.&lt;/p&gt;

&lt;p&gt;All we need to do first is implement {csharp}IMutableDependencyResolver{/csharp}, and replace the default implementation in ReactiveUi with our new one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    public class StructureMapDependencyResolver : IMutableDependencyResolver
    {
        public StructureMapDependencyResolver()
        {
            ObjectFactory.Initialize(init =&amp;gt; init.Scan(scan =&amp;gt;
                          {
                              scan.TheCallingAssembly();
                              scan.LookForRegistries();
                              scan.WithDefaultConventions();
                          }));

        }

        public void Dispose()
        {
        }

        public object GetService(Type serviceType, string contract = null)
        {
            return string.IsNullOrEmpty(contract)
                       ? ObjectFactory.GetInstance(serviceType)
                       : ObjectFactory.GetNamedInstance(serviceType, contract);
        }

        public IEnumerable&amp;lt;object&amp;gt; GetServices(Type serviceType, string contract = null)
        {
            return ObjectFactory.GetAllInstances(serviceType).Cast&amp;lt;object&amp;gt;();
        }

        public void Register(Func&amp;lt;object&amp;gt; factory, Type serviceType, string contract = null)
        {
            ObjectFactory.Configure(x =&amp;gt; x.For(serviceType).Use(factory()));
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, make ReactiveUI use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var resolver = new StructureMapDependencyResolver();
RxApp.InitializeCustomResolver((o, type) =&amp;gt; resolver.Register(() =&amp;gt; o, type));
RxApp.DependencyResolver = resolver;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second line there is very important: ReactiveUi uses the DependecyResolver internally, so if you use your own, you need to initialise it with the default ReactiveUi types, or else The Bad Things� will happen.&lt;/p&gt;
</summary><published>2013-07-03T23:00:00Z</published><updated>2013-07-03T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/07/04/custom-structuremap-dependency-resolver-for-reactiveui-5/" /><content type="html">&lt;p&gt;&lt;a title="ReactiveUI" href="http://reactiveui.net" target="_blank"&gt;ReactiveUI&lt;/a&gt; 5 has just been released (although I've been playing with the -pre-release alpha for a while), and one of the shiny new things it brings is a simplified Service Location model. This is fine in the most part, for most applications. But, when you have some complicated dependencies between objects (ignoring the fact you might be heading towards a constructor over-injection anti-pattern), you may feel you need to use a full IoC container, like Structuremap, to do the heavy work.&lt;/p&gt;

&lt;p&gt;All we need to do first is implement {csharp}IMutableDependencyResolver{/csharp}, and replace the default implementation in ReactiveUi with our new one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    public class StructureMapDependencyResolver : IMutableDependencyResolver
    {
        public StructureMapDependencyResolver()
        {
            ObjectFactory.Initialize(init =&amp;gt; init.Scan(scan =&amp;gt;
                          {
                              scan.TheCallingAssembly();
                              scan.LookForRegistries();
                              scan.WithDefaultConventions();
                          }));

        }

        public void Dispose()
        {
        }

        public object GetService(Type serviceType, string contract = null)
        {
            return string.IsNullOrEmpty(contract)
                       ? ObjectFactory.GetInstance(serviceType)
                       : ObjectFactory.GetNamedInstance(serviceType, contract);
        }

        public IEnumerable&amp;lt;object&amp;gt; GetServices(Type serviceType, string contract = null)
        {
            return ObjectFactory.GetAllInstances(serviceType).Cast&amp;lt;object&amp;gt;();
        }

        public void Register(Func&amp;lt;object&amp;gt; factory, Type serviceType, string contract = null)
        {
            ObjectFactory.Configure(x =&amp;gt; x.For(serviceType).Use(factory()));
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, make ReactiveUI use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var resolver = new StructureMapDependencyResolver();
RxApp.InitializeCustomResolver((o, type) =&amp;gt; resolver.Register(() =&amp;gt; o, type));
RxApp.DependencyResolver = resolver;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second line there is very important: ReactiveUi uses the DependecyResolver internally, so if you use your own, you need to initialise it with the default ReactiveUi types, or else The Bad Things� will happen.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/06/21/temp/</id><title type="text">temp</title><summary type="html">&lt;p&gt;this is a test while I move hosting&lt;/p&gt;
</summary><published>2013-06-20T23:00:00Z</published><updated>2013-06-20T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/06/21/temp/" /><content type="html">&lt;p&gt;this is a test while I move hosting&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2013/06/13/your-favourite-language-sucks/</id><title type="text">Your favourite language sucks</title><summary type="html">&lt;blockquote&gt;&lt;a title="C# WTF" href="http://neildanson.wordpress.com/2013/06/12/c-wtf/" target="_blank"&gt;So next time you find yourself in a C# ivory tower, looking down on other less fortunate languages, just remember that someone, somewhere is looking down on you and C#, laughing at the simple mistakes that could be easily avoided if only you�d used their language.&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I don't think these words are just limited to just C#&lt;/p&gt;
</summary><published>2013-06-12T23:00:00Z</published><updated>2013-06-12T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2013/06/13/your-favourite-language-sucks/" /><content type="html">&lt;blockquote&gt;&lt;a title="C# WTF" href="http://neildanson.wordpress.com/2013/06/12/c-wtf/" target="_blank"&gt;So next time you find yourself in a C# ivory tower, looking down on other less fortunate languages, just remember that someone, somewhere is looking down on you and C#, laughing at the simple mistakes that could be easily avoided if only you�d used their language.&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I don't think these words are just limited to just C#&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2012/11/03/virtualbox-development-environment/</id><title type="text">VirtualBox Development Environment</title><summary type="html">&lt;p&gt;In the past when doing web development, I would usually use something like &lt;a title="WAMP Server" href="http://www.wampserver.com" target="_blank"&gt;WAMP&lt;/a&gt; to get me a development environment to work locally. However these days with the proliferation of web development technologies, there are just too many tools to have running on your machine. I work in Windows, and having PHP, Ruby, Django, Node, Grails and whatever else all on my system path starts getting a little unwieldy.&lt;/p&gt;

&lt;p&gt;Enter virtualisation to the rescue. With VirtualBox and a Linux distro you can build yourself a self contained development environment with all your favourite tools. With a little work, you can customise it just how you like, including getting Git running.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</summary><published>2012-11-03T00:00:00Z</published><updated>2012-11-03T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2012/11/03/virtualbox-development-environment/" /><content type="html">&lt;p&gt;In the past when doing web development, I would usually use something like &lt;a title="WAMP Server" href="http://www.wampserver.com" target="_blank"&gt;WAMP&lt;/a&gt; to get me a development environment to work locally. However these days with the proliferation of web development technologies, there are just too many tools to have running on your machine. I work in Windows, and having PHP, Ruby, Django, Node, Grails and whatever else all on my system path starts getting a little unwieldy.&lt;/p&gt;

&lt;p&gt;Enter virtualisation to the rescue. With VirtualBox and a Linux distro you can build yourself a self contained development environment with all your favourite tools. With a little work, you can customise it just how you like, including getting Git running.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2012/10/29/notes-on-vim/</id><title type="text">Notes on Vim</title><summary type="html">&lt;p&gt;Usually the default text editor I installed after re-installing Windows was Notepad++, however, I have recently become a &lt;a title="VIM.org" href="http://www.vim.org/" target="_blank"&gt;Vim&lt;/a&gt; convert.&lt;/p&gt;

&lt;p&gt;I'm sure everyone has heard of Vim, but for those who don't know:&lt;/p&gt;

&lt;blockquote&gt;Vim is a highly configurable text editor built to enable efficient text editing. It is an improved version of the vi editor distributed with most UNIX systems.&lt;/blockquote&gt;

&lt;p&gt;I started to use Vim primarily as an affect of using Git as my preferred VCS, as msysgit ships with a version of vim and is configured to use as the default editor when you &lt;em&gt;git commit&lt;/em&gt;, or do various other things. The more I used it the more I started to like it, so I installed it.&lt;/p&gt;

&lt;p&gt;By default, Vim is a very productive editor. It does have a learning curve, but I don't think it is a steep one. You should be able to get up to speed and become productive fairly quickly. Basic navigation and inserting/removing text is quite simple to get to grips with.&lt;/p&gt;

&lt;p&gt;Once you have some basic mastery, if you are like me you will quickly want to learn how to customise Vim in order to make it even more useful.&lt;/p&gt;
</summary><published>2012-10-29T00:00:00Z</published><updated>2012-10-29T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2012/10/29/notes-on-vim/" /><content type="html">&lt;p&gt;Usually the default text editor I installed after re-installing Windows was Notepad++, however, I have recently become a &lt;a title="VIM.org" href="http://www.vim.org/" target="_blank"&gt;Vim&lt;/a&gt; convert.&lt;/p&gt;

&lt;p&gt;I'm sure everyone has heard of Vim, but for those who don't know:&lt;/p&gt;

&lt;blockquote&gt;Vim is a highly configurable text editor built to enable efficient text editing. It is an improved version of the vi editor distributed with most UNIX systems.&lt;/blockquote&gt;

&lt;p&gt;I started to use Vim primarily as an affect of using Git as my preferred VCS, as msysgit ships with a version of vim and is configured to use as the default editor when you &lt;em&gt;git commit&lt;/em&gt;, or do various other things. The more I used it the more I started to like it, so I installed it.&lt;/p&gt;

&lt;p&gt;By default, Vim is a very productive editor. It does have a learning curve, but I don't think it is a steep one. You should be able to get up to speed and become productive fairly quickly. Basic navigation and inserting/removing text is quite simple to get to grips with.&lt;/p&gt;

&lt;p&gt;Once you have some basic mastery, if you are like me you will quickly want to learn how to customise Vim in order to make it even more useful.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2012/08/27/why-do-i-procrastinate/</id><title type="text">Why do I procrastinate?</title><summary type="html">&lt;blockquote&gt;Never put off until tomorrow what you can do the day after tomorrow. - Mark Twain&lt;/blockquote&gt;

&lt;p&gt;Procrastination is defined as: &lt;em&gt;�The action of delaying or postponing something.�&lt;/em&gt;� It is something with which I am unfortunately very familiar with. I have suffered from it, or been guilty of it, for as long as I can remember.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Facebook, twitter, read a book, IM a friend, see what films are on the movie channels, do housework, go for a walk, play a video game, re-check email, call my fianc�e, write some code, mindlessly read RSS feeds for the latest up-to-the-second news about the latest iPhone rumours even though I no longer own an iPhone. In short, do anything but that which I have set out to do, which is write a blog post about procrastination.&lt;/p&gt;

&lt;p&gt;Case in point on how much I procrastinate about certain things: This blog post. It's been almost a year since I last edited it and saved it as a draft.&lt;/p&gt;

&lt;p&gt;[caption id="attachment_326" align="aligncenter" width="452"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2012/08/lastedited.png"&gt;&lt;img class="size-full wp-image-326" title="lastedited" src="http://temporalcohesion.co.uk/wp-content/uploads/2012/08/lastedited.png" alt="Last Edited" width="452" height="53" /&gt;&lt;/a&gt; I am lazy[/caption]&lt;/p&gt;

&lt;p&gt;I�m not going to even attempt to write about curing procrastination because I obviously haven't found something which works for me. There are also a myriad of websites and books available on this subject, and it is painfully obvious that I am not the one to be giving advice on how to beat it. I will instead attempt to explore why it is that I do it.&lt;/p&gt;

&lt;p&gt;So why do I procrastinate? An easy question to ask, a harder one to answer. Avoiding thinking about the answer to this question by looking through hits on Google leads me to this blog post at Lifehack.org, on &lt;a href="http://www.lifehack.org/articles/productivity/overcome-procrastination-once-and-for-all.html"&gt;overcoming productivity&lt;/a&gt;. It contains a number of basic reasons why people procrastinate, and I can identify with all of them, although some more than others. That it is a basic list implies that there are more complex reasons why people procrastinate.&lt;/p&gt;

&lt;p&gt;After reflecting on this question for some time, I think that I can confidently say that when I embark on a new project, the initial excitement and enthusiasm for it carry me through, but once that wears off, my interest in it starts to wane. In the case of a coding project, the problem domain is what interests me, the technical challenge of designing and implementing a solution to the problem; once that problem is solved, the interest wanes, and the finer details fail to get polished.&lt;/p&gt;

&lt;p&gt;This is in itself fairly interesting, because as a programmer, I do tend to be a little OCD over certain things. Obviously this doesn�t extend to finishing projects. Take for example the Github API library I�ve been �working� on for far too long. Obsessing over tiny implementation details of the best way to handle authentication and access to methods on the API which require authorization has been my primary method of procrastination on this particular project. Now that I�ve pretty much resolved that particular issue, the detail of actually fleshing out all the methods for the API �seems like a boring chore.&lt;/p&gt;

&lt;p&gt;This also extends to blogging, clearly evidenced by this blog itself with the almost year long hiatus between updates. Then there is another blog, on a wholly unrelated subject, which I started about 4 years ago and haven�t updated in three-and-a-half. I�ll get the blogging bug, write a few posts, get bored with it, and stop.&lt;/p&gt;

&lt;p&gt;I really do need to put a stop to this, as it is becoming a big problem for me, as well as making me look like an idiot. Maybe this whole cathartic post might help me in some small way.&lt;/p&gt;
</summary><published>2012-08-26T23:00:00Z</published><updated>2012-08-26T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2012/08/27/why-do-i-procrastinate/" /><content type="html">&lt;blockquote&gt;Never put off until tomorrow what you can do the day after tomorrow. - Mark Twain&lt;/blockquote&gt;

&lt;p&gt;Procrastination is defined as: &lt;em&gt;�The action of delaying or postponing something.�&lt;/em&gt;� It is something with which I am unfortunately very familiar with. I have suffered from it, or been guilty of it, for as long as I can remember.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Facebook, twitter, read a book, IM a friend, see what films are on the movie channels, do housework, go for a walk, play a video game, re-check email, call my fianc�e, write some code, mindlessly read RSS feeds for the latest up-to-the-second news about the latest iPhone rumours even though I no longer own an iPhone. In short, do anything but that which I have set out to do, which is write a blog post about procrastination.&lt;/p&gt;

&lt;p&gt;Case in point on how much I procrastinate about certain things: This blog post. It's been almost a year since I last edited it and saved it as a draft.&lt;/p&gt;

&lt;p&gt;[caption id="attachment_326" align="aligncenter" width="452"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2012/08/lastedited.png"&gt;&lt;img class="size-full wp-image-326" title="lastedited" src="http://temporalcohesion.co.uk/wp-content/uploads/2012/08/lastedited.png" alt="Last Edited" width="452" height="53" /&gt;&lt;/a&gt; I am lazy[/caption]&lt;/p&gt;

&lt;p&gt;I�m not going to even attempt to write about curing procrastination because I obviously haven't found something which works for me. There are also a myriad of websites and books available on this subject, and it is painfully obvious that I am not the one to be giving advice on how to beat it. I will instead attempt to explore why it is that I do it.&lt;/p&gt;

&lt;p&gt;So why do I procrastinate? An easy question to ask, a harder one to answer. Avoiding thinking about the answer to this question by looking through hits on Google leads me to this blog post at Lifehack.org, on &lt;a href="http://www.lifehack.org/articles/productivity/overcome-procrastination-once-and-for-all.html"&gt;overcoming productivity&lt;/a&gt;. It contains a number of basic reasons why people procrastinate, and I can identify with all of them, although some more than others. That it is a basic list implies that there are more complex reasons why people procrastinate.&lt;/p&gt;

&lt;p&gt;After reflecting on this question for some time, I think that I can confidently say that when I embark on a new project, the initial excitement and enthusiasm for it carry me through, but once that wears off, my interest in it starts to wane. In the case of a coding project, the problem domain is what interests me, the technical challenge of designing and implementing a solution to the problem; once that problem is solved, the interest wanes, and the finer details fail to get polished.&lt;/p&gt;

&lt;p&gt;This is in itself fairly interesting, because as a programmer, I do tend to be a little OCD over certain things. Obviously this doesn�t extend to finishing projects. Take for example the Github API library I�ve been �working� on for far too long. Obsessing over tiny implementation details of the best way to handle authentication and access to methods on the API which require authorization has been my primary method of procrastination on this particular project. Now that I�ve pretty much resolved that particular issue, the detail of actually fleshing out all the methods for the API �seems like a boring chore.&lt;/p&gt;

&lt;p&gt;This also extends to blogging, clearly evidenced by this blog itself with the almost year long hiatus between updates. Then there is another blog, on a wholly unrelated subject, which I started about 4 years ago and haven�t updated in three-and-a-half. I�ll get the blogging bug, write a few posts, get bored with it, and stop.&lt;/p&gt;

&lt;p&gt;I really do need to put a stop to this, as it is becoming a big problem for me, as well as making me look like an idiot. Maybe this whole cathartic post might help me in some small way.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2011/12/12/probably-giving-up-my-csharp-github-api/</id><title type="text">Probably giving up my CSharp Github API</title><summary type="html">&lt;p&gt;&lt;p&gt;I�ve been thinking that I�m going to retire my &lt;a href="https://github.com/sgrassie/csharp-github-api" target="_blank"&gt;CSharp Github API&lt;/a&gt;. The ugly truth is that I�ve barely worked on it, literally in months. I did a little bit recently, and I had one or two good ideas about certain things, but, I do have to be honest with myself. I am not not admitting defeat, I know that I am capable enough to finish it. &lt;/p&gt;  &lt;p&gt;I�m simply bored with it.&lt;/p&gt;  &lt;p&gt;Also, someone has &lt;a href="https://github.com/erikzaadi/GithubSharp" target="_blank"&gt;already beaten me to it&lt;/a&gt;, and is writing something that is actually far superior to what I�d managed to push out. In my defence, I haven�t done very much anyway, so anything that is fairly substantial is going to look better by default.&lt;/p&gt;  &lt;p&gt;So, I�m going to knock it on the head. I�ll leave the code, such as it is, up on Github.&lt;/p&gt;&lt;/p&gt;
</summary><published>2011-12-12T00:00:00Z</published><updated>2011-12-12T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2011/12/12/probably-giving-up-my-csharp-github-api/" /><content type="html">&lt;p&gt;&lt;p&gt;I�ve been thinking that I�m going to retire my &lt;a href="https://github.com/sgrassie/csharp-github-api" target="_blank"&gt;CSharp Github API&lt;/a&gt;. The ugly truth is that I�ve barely worked on it, literally in months. I did a little bit recently, and I had one or two good ideas about certain things, but, I do have to be honest with myself. I am not not admitting defeat, I know that I am capable enough to finish it. &lt;/p&gt;  &lt;p&gt;I�m simply bored with it.&lt;/p&gt;  &lt;p&gt;Also, someone has &lt;a href="https://github.com/erikzaadi/GithubSharp" target="_blank"&gt;already beaten me to it&lt;/a&gt;, and is writing something that is actually far superior to what I�d managed to push out. In my defence, I haven�t done very much anyway, so anything that is fairly substantial is going to look better by default.&lt;/p&gt;  &lt;p&gt;So, I�m going to knock it on the head. I�ll leave the code, such as it is, up on Github.&lt;/p&gt;&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2011/11/14/stupid-design-decisions-with-the-github-api-wrapper/</id><title type="text">Stupid design decisions with the Github API wrapper</title><summary type="html">&lt;p&gt;Whilst writing some blog posts about the authentication which I've been implementing, I've come to the realization, almost as an after thought, that even though I've still not got a lot of the main Github API implemented, the way I've envisioned the API working, from a user point of view, is sort of a bit shit.&lt;/p&gt;

&lt;pre class="brush:applescript"&gt;var userApi = new UserApi();
var user = userApi.GetUser("example");&lt;/pre&gt;

&lt;p&gt;Pretty straightforward, right? What about the as yet unwritten GistApi?&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var gistApi = new GistApi();
var gist = gistApi.GetGist(...);&lt;/pre&gt;

&lt;p&gt;Again, pretty straightforward. But I see a pattern forming. What am I going to do when it comes to the RepositoryApi?&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var reposApi = new RepositoryApi();
var repo = reposApi.GetRepository(...);&lt;/pre&gt;

&lt;p&gt;Well, that is starting to look pretty fucking stupid. I've caught myself doing it with other methods as well. I simply cannot believe I've let myself be so stupid. At least there is not that much implemented where I'll have to refactor loads of shit.&lt;/p&gt;
</summary><published>2011-11-14T00:00:00Z</published><updated>2011-11-14T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2011/11/14/stupid-design-decisions-with-the-github-api-wrapper/" /><content type="html">&lt;p&gt;Whilst writing some blog posts about the authentication which I've been implementing, I've come to the realization, almost as an after thought, that even though I've still not got a lot of the main Github API implemented, the way I've envisioned the API working, from a user point of view, is sort of a bit shit.&lt;/p&gt;

&lt;pre class="brush:applescript"&gt;var userApi = new UserApi();
var user = userApi.GetUser("example");&lt;/pre&gt;

&lt;p&gt;Pretty straightforward, right? What about the as yet unwritten GistApi?&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var gistApi = new GistApi();
var gist = gistApi.GetGist(...);&lt;/pre&gt;

&lt;p&gt;Again, pretty straightforward. But I see a pattern forming. What am I going to do when it comes to the RepositoryApi?&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var reposApi = new RepositoryApi();
var repo = reposApi.GetRepository(...);&lt;/pre&gt;

&lt;p&gt;Well, that is starting to look pretty fucking stupid. I've caught myself doing it with other methods as well. I simply cannot believe I've let myself be so stupid. At least there is not that much implemented where I'll have to refactor loads of shit.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2011/11/07/adding-authentication-on-the-fly-to-a-restsharp-client-request/</id><title type="text">Adding authentication on the fly to a RestSharp client request</title><summary type="html">&lt;h1&gt;The Basics&lt;/h1&gt;

&lt;p&gt;The typical way that you'd make a request with RestSharp:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Create a RestRequest&lt;/li&gt;
    &lt;li&gt;Create a RestClient&lt;/li&gt;
    &lt;li&gt;Execute the request with the client&lt;/li&gt;
    &lt;li&gt;Do something with the response.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's at the point that you get the client object that you may wish to add authentication. For example with a REST API such as Githubs, certain methods behave differently if the request is authenticated or not, so being able to magically turn on authentication is desirable.&lt;/p&gt;

&lt;p&gt;To authenticate a request with RestSharp, it is a simple case of creating a RestRequest, RestClient and an IAuthenticator instance for the authenticating mechanism you want to use. For example:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var client = new RestClient
             {
                 BaseUrl ="https://api.github.com",
                 Authenticator = new HttpBasicAuthenticator(username, password)
             };&lt;/pre&gt;

&lt;p&gt;This is pretty straightforward and standard RestSharp usage. You may have a class to encapsulate this functionality, with a method which returns the RestClient instance, probably in a base class in order to inherit this common functionality in other classes.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;public abstract class BaseApi
{
    RestClient GetRestClient()
    {
        ...
    }
}&lt;/pre&gt;

&lt;h1&gt;Options&lt;/h1&gt;

&lt;p&gt;There are several methods which we can use to add authentication dynamically to the RestClient instance, ranging from the trivial to the more involved.&lt;/p&gt;

&lt;p&gt;The trivial solution is to add the IAuthenticator as a parameter to the method, which is then assigned to the RestClient when it is created. Easy. Also fairly easy is just make it abstract or virtual and override it in an inheriting class, although this breaks SRP.&lt;/p&gt;

&lt;p&gt;Alternatively, we can implement the Decorator pattern, and introduce the authentication in a class which is solely responsible for handing it. I'm not going to go into this in too much detail, there is a wealth of information on implementing this pattern already available on the web. Using a Decorator is valid in a lot of situations, particularly when re-factoring someone else's mess, as you can adhere to the same interface and not risk breaking some important business function. In other cases, it is better to intercept.&lt;/p&gt;

&lt;h1&gt;Interception&lt;/h1&gt;

&lt;p&gt;A pattern which lends itself to this is called Proxy, and if you spend any time with Google and search terms like "c# proxy pattern" you'll quickly end up finding a lot of information about implementing it. You'll also find interesting stuff about Castle.DynamicProxy, and you may quickly realise this is an excellent way of adding the ability to dynamically intercept a method to add additional functionality on the fly. I've implemented an interceptor in the Github API library, with the core magic being:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;public void Intercept(IInvocation invocation)
{
    invocation.Proceed(); // let the RestClient be instantiated as normal.
    var restClient = (RestClient)invocation.ReturnValue;
    restClient.Authenticator = _authenticator; // add the authenticator
    invocation.ReturnValue = restClient;
 }&lt;/pre&gt;

&lt;p&gt;I then wrap the interception up in a static class, which is a technique I &lt;a href="http://geekswithblogs.net/BlackRabbitCoder/archive/2010/05/06/c-why-decorate-when-you-can-intercept.aspx"&gt;saw on another website&lt;/a&gt;, which I then wrap in a extension method which with a little bit of generics hangs off API classes in a fluent manner.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var api = new UserApi(GitHubUrl).WithAuthentication(authenticator);&lt;/pre&gt;

&lt;p&gt;I feel like it is the best way to do this sort of thing, and I will certainly starting using more of it, where necessary, in all my projects.&lt;/p&gt;
</summary><published>2011-11-07T00:00:00Z</published><updated>2011-11-07T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2011/11/07/adding-authentication-on-the-fly-to-a-restsharp-client-request/" /><content type="html">&lt;h1&gt;The Basics&lt;/h1&gt;

&lt;p&gt;The typical way that you'd make a request with RestSharp:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Create a RestRequest&lt;/li&gt;
    &lt;li&gt;Create a RestClient&lt;/li&gt;
    &lt;li&gt;Execute the request with the client&lt;/li&gt;
    &lt;li&gt;Do something with the response.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's at the point that you get the client object that you may wish to add authentication. For example with a REST API such as Githubs, certain methods behave differently if the request is authenticated or not, so being able to magically turn on authentication is desirable.&lt;/p&gt;

&lt;p&gt;To authenticate a request with RestSharp, it is a simple case of creating a RestRequest, RestClient and an IAuthenticator instance for the authenticating mechanism you want to use. For example:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var client = new RestClient
             {
                 BaseUrl ="https://api.github.com",
                 Authenticator = new HttpBasicAuthenticator(username, password)
             };&lt;/pre&gt;

&lt;p&gt;This is pretty straightforward and standard RestSharp usage. You may have a class to encapsulate this functionality, with a method which returns the RestClient instance, probably in a base class in order to inherit this common functionality in other classes.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;public abstract class BaseApi
{
    RestClient GetRestClient()
    {
        ...
    }
}&lt;/pre&gt;

&lt;h1&gt;Options&lt;/h1&gt;

&lt;p&gt;There are several methods which we can use to add authentication dynamically to the RestClient instance, ranging from the trivial to the more involved.&lt;/p&gt;

&lt;p&gt;The trivial solution is to add the IAuthenticator as a parameter to the method, which is then assigned to the RestClient when it is created. Easy. Also fairly easy is just make it abstract or virtual and override it in an inheriting class, although this breaks SRP.&lt;/p&gt;

&lt;p&gt;Alternatively, we can implement the Decorator pattern, and introduce the authentication in a class which is solely responsible for handing it. I'm not going to go into this in too much detail, there is a wealth of information on implementing this pattern already available on the web. Using a Decorator is valid in a lot of situations, particularly when re-factoring someone else's mess, as you can adhere to the same interface and not risk breaking some important business function. In other cases, it is better to intercept.&lt;/p&gt;

&lt;h1&gt;Interception&lt;/h1&gt;

&lt;p&gt;A pattern which lends itself to this is called Proxy, and if you spend any time with Google and search terms like "c# proxy pattern" you'll quickly end up finding a lot of information about implementing it. You'll also find interesting stuff about Castle.DynamicProxy, and you may quickly realise this is an excellent way of adding the ability to dynamically intercept a method to add additional functionality on the fly. I've implemented an interceptor in the Github API library, with the core magic being:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;public void Intercept(IInvocation invocation)
{
    invocation.Proceed(); // let the RestClient be instantiated as normal.
    var restClient = (RestClient)invocation.ReturnValue;
    restClient.Authenticator = _authenticator; // add the authenticator
    invocation.ReturnValue = restClient;
 }&lt;/pre&gt;

&lt;p&gt;I then wrap the interception up in a static class, which is a technique I &lt;a href="http://geekswithblogs.net/BlackRabbitCoder/archive/2010/05/06/c-why-decorate-when-you-can-intercept.aspx"&gt;saw on another website&lt;/a&gt;, which I then wrap in a extension method which with a little bit of generics hangs off API classes in a fluent manner.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var api = new UserApi(GitHubUrl).WithAuthentication(authenticator);&lt;/pre&gt;

&lt;p&gt;I feel like it is the best way to do this sort of thing, and I will certainly starting using more of it, where necessary, in all my projects.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2011/10/31/github-api-handling-authentication/</id><title type="text">Github API: Handling authentication</title><summary type="html">&lt;p&gt;With v3 of the Github REST API, calling a certain methods when unauthenticated will return a limited set of information, and when authenticated will return extra information. One of the things I wanted to do was to make it easy, in a fluent manner, to add authentication to a request. For example:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var a = new UserApi();
var user = a.WithAuthentication(authenticationObject).GetUser("example");
var b = new UserApi().WithAuthentication(authenticationObject);
user = b.GetUser("example");&lt;/pre&gt;

&lt;p&gt;Thus making it possible to instantiate an API object without having to authenticate, then when authorization for an action is required, the authentication can be provided. When that actually happens is, I think , something that is an implementation detail best left to future consumers of the library. Assuming I get it finished.&lt;/p&gt;

&lt;p&gt;I got bogged down over the course of several months in trying to wrap my head around a clean way of implementing this. Initially I had a good inheritance from an Api base class to the UserApi class - this is sensible, the base Api class does after all contain methods which are going to be common to different classes, such as GistsApi, RepositoriesApi etc.&lt;/p&gt;

&lt;p&gt;Then things got a little screwy.&lt;/p&gt;

&lt;p&gt;At that point I had the following implemented:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var github = new Github(authenticator);
var user = gitHub.User.GetUser("example");
user.Authenticated.AddEmail("example@example.com");&lt;/pre&gt;

&lt;p&gt;Which doesn't seem all that bad. The User property on the Github object was an instance of UserApi. When the example User is fetched, the UserApi object was added an internal instance on the User object. Then the Authenticated property on the User object returned a new AuthenticatedUser, which acted as a wrapper to the internal UserApi instance where the actual AddEmail was hidden as internal.&lt;/p&gt;

&lt;p&gt;Needless to say, I knew something was wrong with that, and I spent far too long in coming up with a more elegant solution.&lt;/p&gt;

&lt;p&gt;In my second stab at things, I tried to implement Decorator to solve this problem, that is, decorate the UserApi with the additional functionality to add the authentication. The trouble is that the way I wanted to implement the pattern wouldn't have lent itself exceedingly well to having specific functionality for the different parts of the api.&lt;/p&gt;

&lt;p&gt;Then I thought to myself, wouldn't it be great if I could intercept the method in the base class which gets the RestClient and add the authentication to it on the fly. A little Googling taught me that this is idealised as the Proxy pattern, from which it was but a short leap to the &lt;a title="The Castle Project" href="http://www.google.co.uk/url?sa=t&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CCUQFjAA&amp;amp;url=http%3A%2F%2Fwww.castleproject.org%2F&amp;amp;rct=j&amp;amp;q=castle%20project&amp;amp;ei=5hqHTu3bCKnH0QXsgPXvDw&amp;amp;usg=AFQjCNEUSLcxGcsnLhC_LQOSuUFdNZLizw&amp;amp;cad=rja" target="_blank"&gt;Castle project &lt;/a&gt;and &lt;a title="Castle DynamicProxy" href="http://www.castleproject.org/dynamicproxy/index.html" target="_blank"&gt;DynamicProxy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</summary><published>2011-10-31T00:00:00Z</published><updated>2011-10-31T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2011/10/31/github-api-handling-authentication/" /><content type="html">&lt;p&gt;With v3 of the Github REST API, calling a certain methods when unauthenticated will return a limited set of information, and when authenticated will return extra information. One of the things I wanted to do was to make it easy, in a fluent manner, to add authentication to a request. For example:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var a = new UserApi();
var user = a.WithAuthentication(authenticationObject).GetUser("example");
var b = new UserApi().WithAuthentication(authenticationObject);
user = b.GetUser("example");&lt;/pre&gt;

&lt;p&gt;Thus making it possible to instantiate an API object without having to authenticate, then when authorization for an action is required, the authentication can be provided. When that actually happens is, I think , something that is an implementation detail best left to future consumers of the library. Assuming I get it finished.&lt;/p&gt;

&lt;p&gt;I got bogged down over the course of several months in trying to wrap my head around a clean way of implementing this. Initially I had a good inheritance from an Api base class to the UserApi class - this is sensible, the base Api class does after all contain methods which are going to be common to different classes, such as GistsApi, RepositoriesApi etc.&lt;/p&gt;

&lt;p&gt;Then things got a little screwy.&lt;/p&gt;

&lt;p&gt;At that point I had the following implemented:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;var github = new Github(authenticator);
var user = gitHub.User.GetUser("example");
user.Authenticated.AddEmail("example@example.com");&lt;/pre&gt;

&lt;p&gt;Which doesn't seem all that bad. The User property on the Github object was an instance of UserApi. When the example User is fetched, the UserApi object was added an internal instance on the User object. Then the Authenticated property on the User object returned a new AuthenticatedUser, which acted as a wrapper to the internal UserApi instance where the actual AddEmail was hidden as internal.&lt;/p&gt;

&lt;p&gt;Needless to say, I knew something was wrong with that, and I spent far too long in coming up with a more elegant solution.&lt;/p&gt;

&lt;p&gt;In my second stab at things, I tried to implement Decorator to solve this problem, that is, decorate the UserApi with the additional functionality to add the authentication. The trouble is that the way I wanted to implement the pattern wouldn't have lent itself exceedingly well to having specific functionality for the different parts of the api.&lt;/p&gt;

&lt;p&gt;Then I thought to myself, wouldn't it be great if I could intercept the method in the base class which gets the RestClient and add the authentication to it on the fly. A little Googling taught me that this is idealised as the Proxy pattern, from which it was but a short leap to the &lt;a title="The Castle Project" href="http://www.google.co.uk/url?sa=t&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CCUQFjAA&amp;amp;url=http%3A%2F%2Fwww.castleproject.org%2F&amp;amp;rct=j&amp;amp;q=castle%20project&amp;amp;ei=5hqHTu3bCKnH0QXsgPXvDw&amp;amp;usg=AFQjCNEUSLcxGcsnLhC_LQOSuUFdNZLizw&amp;amp;cad=rja" target="_blank"&gt;Castle project &lt;/a&gt;and &lt;a title="Castle DynamicProxy" href="http://www.castleproject.org/dynamicproxy/index.html" target="_blank"&gt;DynamicProxy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2011/09/26/is-this-thing-on/</id><title type="text">Is this thing on?</title><summary type="html">&lt;p&gt;Despite many months of not posting anything on this blog (OK, nearly a year) I am returning with another post about my on/off project to write a C# library to access the Github REST API. Much like my blogging schedule, which can arguably be said to be none-existent, my pet-project�s suffer from the same cruel lack of... habit.&lt;/p&gt;

&lt;p&gt;To recap this particular project, you may like to browse some of the earlier posts on it, wherein I grandly proclaim my intent to write a �Github API in C#�. Which I should really have finished by now. As you will have no doubt realised, I do suffer from a certain amount of laziness. That is a subject for another blog post. To my shame, I can tell you that the amount of Github�s REST API which I�m covering is minimal, limited to a subset of the available User related commands.&lt;/p&gt;

&lt;p&gt;Moving swiftly along, with no trace of irony.&lt;/p&gt;

&lt;p&gt;In the months since the start of this project, Github has release v3 of their REST API, which contains many updated and/or new methods to access the whole plethora of the functionality available on Github. Indeed, they have even gone as far as to release a desktop client for Mac�s, and for all I know are working on a Windows version, which would then render this effort of mine (because that�s what I�ve always intended) redundant.&lt;/p&gt;

&lt;p&gt;So, despite not blogging about it, and despite going months between commits, I have been working on the library. The RestSharp git sub-module is gone (I mean, who likes sub-modules anyway?) in favour of the NuGet package. The authentication has been reworked slightly (still no OAuth yet) and the API is a little more fluenty.&lt;/p&gt;

&lt;p&gt;Of course, it still doesn�t actually let you do very much, I mean even after a year, you still can�t perform all of the actions available to a user. This is terrible, and speaks volumes about me, as a person. Procrastination is my enemy.&lt;/p&gt;
</summary><published>2011-09-25T23:00:00Z</published><updated>2011-09-25T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2011/09/26/is-this-thing-on/" /><content type="html">&lt;p&gt;Despite many months of not posting anything on this blog (OK, nearly a year) I am returning with another post about my on/off project to write a C# library to access the Github REST API. Much like my blogging schedule, which can arguably be said to be none-existent, my pet-project�s suffer from the same cruel lack of... habit.&lt;/p&gt;

&lt;p&gt;To recap this particular project, you may like to browse some of the earlier posts on it, wherein I grandly proclaim my intent to write a �Github API in C#�. Which I should really have finished by now. As you will have no doubt realised, I do suffer from a certain amount of laziness. That is a subject for another blog post. To my shame, I can tell you that the amount of Github�s REST API which I�m covering is minimal, limited to a subset of the available User related commands.&lt;/p&gt;

&lt;p&gt;Moving swiftly along, with no trace of irony.&lt;/p&gt;

&lt;p&gt;In the months since the start of this project, Github has release v3 of their REST API, which contains many updated and/or new methods to access the whole plethora of the functionality available on Github. Indeed, they have even gone as far as to release a desktop client for Mac�s, and for all I know are working on a Windows version, which would then render this effort of mine (because that�s what I�ve always intended) redundant.&lt;/p&gt;

&lt;p&gt;So, despite not blogging about it, and despite going months between commits, I have been working on the library. The RestSharp git sub-module is gone (I mean, who likes sub-modules anyway?) in favour of the NuGet package. The authentication has been reworked slightly (still no OAuth yet) and the API is a little more fluenty.&lt;/p&gt;

&lt;p&gt;Of course, it still doesn�t actually let you do very much, I mean even after a year, you still can�t perform all of the actions available to a user. This is terrible, and speaks volumes about me, as a person. Procrastination is my enemy.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/11/15/getting-paid-to-do-something-you-love-doing-is-awesome/</id><title type="text">Getting paid to do something you love doing is awesome!</title><summary type="html">&lt;p&gt;A lot of people who work, don't like their job. It's a fact. If you were at a party and you asked people if they like the job they get paid to do, the response would be largely negative. That you are reading this, on this blog, indicates that you are probably a programmer. Then, on the assumption that you are in some capacity employed as a programmer, I can say to you that you are a lucky person.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;It is simple, really: A large percentage of the programmers I have met,� have worked with or follow on Twitter absolutely love to write code, whether it is for a website, a desktop application of some kind or they are just monkeying around with something. They love it! I love doing it. A number of my friends love doing it. And the best thing?&lt;/p&gt;

&lt;p&gt;We get paid to do it!&lt;/p&gt;

&lt;p&gt;Don't get me wrong here, I know plenty of people who turn up at 9am and go home at 5pm and wouldn't even consider writing anything for themselves or doing any open source work. For them, it's like a factory job, albeit a (generally) much better paid one. Jeff Atwood (love him or loathe him) has a great post about these sorts of programmers titled &lt;a title="There are Two Types of Programmers - codinghorror.com" href="http://www.codinghorror.com/blog/2007/11/the-two-types-of-programmers.html" target="_blank"&gt;"There are Two Types of Programmers"&lt;/a&gt;. Even though these programmers might not code in their spare time, I'd still say that 99% still like their job.&lt;/p&gt;

&lt;p&gt;I'll place myself firmly in that 20% block of programmers though. I wouldn't say I was a rock star programmer, I'm certainly not bad, but I do always want to constantly improve myself and my ability. As the old saying, "Practice makes perfect". I definitely love my job. Maybe I could do without some of the meetings and the office politics which comes from working in a large company, but still, I love what I do.&lt;/p&gt;

&lt;p&gt;I get paid to do what I love doing; I consider myself lucky.&lt;/p&gt;
</summary><published>2010-11-15T00:00:00Z</published><updated>2010-11-15T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/11/15/getting-paid-to-do-something-you-love-doing-is-awesome/" /><content type="html">&lt;p&gt;A lot of people who work, don't like their job. It's a fact. If you were at a party and you asked people if they like the job they get paid to do, the response would be largely negative. That you are reading this, on this blog, indicates that you are probably a programmer. Then, on the assumption that you are in some capacity employed as a programmer, I can say to you that you are a lucky person.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;It is simple, really: A large percentage of the programmers I have met,� have worked with or follow on Twitter absolutely love to write code, whether it is for a website, a desktop application of some kind or they are just monkeying around with something. They love it! I love doing it. A number of my friends love doing it. And the best thing?&lt;/p&gt;

&lt;p&gt;We get paid to do it!&lt;/p&gt;

&lt;p&gt;Don't get me wrong here, I know plenty of people who turn up at 9am and go home at 5pm and wouldn't even consider writing anything for themselves or doing any open source work. For them, it's like a factory job, albeit a (generally) much better paid one. Jeff Atwood (love him or loathe him) has a great post about these sorts of programmers titled &lt;a title="There are Two Types of Programmers - codinghorror.com" href="http://www.codinghorror.com/blog/2007/11/the-two-types-of-programmers.html" target="_blank"&gt;"There are Two Types of Programmers"&lt;/a&gt;. Even though these programmers might not code in their spare time, I'd still say that 99% still like their job.&lt;/p&gt;

&lt;p&gt;I'll place myself firmly in that 20% block of programmers though. I wouldn't say I was a rock star programmer, I'm certainly not bad, but I do always want to constantly improve myself and my ability. As the old saying, "Practice makes perfect". I definitely love my job. Maybe I could do without some of the meetings and the office politics which comes from working in a large company, but still, I love what I do.&lt;/p&gt;

&lt;p&gt;I get paid to do what I love doing; I consider myself lucky.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/11/08/damn-you-empty-catch-block/</id><title type="text">Damn you empty catch block</title><summary type="html">&lt;p&gt;In the code I help maintain in my day job, I see a lot of the following code:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
try
{
/* code */
}
catch(Exception)
{
}
&lt;/pre&gt;

&lt;p&gt;I see it in several different languages almost daily. It really frustrates me that my colleagues and predecessors did this. I stamp it out ruthlessly.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blogs.msdn.com/b/clrteam/archive/2009/02/19/why-catch-exception-empty-catch-is-bad.aspx"&gt;Here is a great post&lt;/a&gt; on why empty catch blocks are bad. Here is a &lt;a href="http://stackoverflow.com/questions/183589/c-windows-forms-best-practice-exception-handling" target="_blank"&gt;great question and series of answers&lt;/a&gt; on StackOverflow about best practices for exception handling.&lt;/p&gt;
</summary><published>2010-11-08T00:00:00Z</published><updated>2010-11-08T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/11/08/damn-you-empty-catch-block/" /><content type="html">&lt;p&gt;In the code I help maintain in my day job, I see a lot of the following code:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
try
{
/* code */
}
catch(Exception)
{
}
&lt;/pre&gt;

&lt;p&gt;I see it in several different languages almost daily. It really frustrates me that my colleagues and predecessors did this. I stamp it out ruthlessly.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blogs.msdn.com/b/clrteam/archive/2009/02/19/why-catch-exception-empty-catch-is-bad.aspx"&gt;Here is a great post&lt;/a&gt; on why empty catch blocks are bad. Here is a &lt;a href="http://stackoverflow.com/questions/183589/c-windows-forms-best-practice-exception-handling" target="_blank"&gt;great question and series of answers&lt;/a&gt; on StackOverflow about best practices for exception handling.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/11/01/github-c-api-handling-the-response-with-restsharp/</id><title type="text">Github C# API: Handling the response with RestSharp</title><summary type="html">&lt;p&gt;Once we make a request to Github.com with &lt;a title="RestSharp.org" href="http://restsharp.org/" target="_blank"&gt;RestSharp&lt;/a&gt;, we get a response, and RestSharp gives us a &lt;a title="RestResponse class in RestSharp on github.com" href="http://github.com/johnsheehan/RestSharp/blob/master/RestSharp/RestResponse.cs" target="_blank"&gt;RestResponse&lt;/a&gt; object, with which we can do something with the content. The content will be in the format that we specified when we made the request, either JSON, XML or YAML.&lt;/p&gt;

&lt;p&gt;Oh crap, complicated string parsing...&lt;/p&gt;

&lt;p&gt;RestSharp to the rescue! We don't have to worry about parsing the response content, because RestSharp can do it for us.&lt;/p&gt;

&lt;p&gt;What we need to do, is model the response content into a POCO (Plain Old Clr Object):&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;public class User
{
    public virtual int Id { get; set; }
    public virtual string Login { get; set; }
    public virtual string Name { get; set;}

    ...
}&lt;/pre&gt;

&lt;p&gt;Note that in this &lt;a title="User class in the csharp-github-api project" href="http://github.com/sgrassie/csharp-github-api/blob/master/csharp-github-api/Models/User.cs" target="_blank"&gt;User&lt;/a&gt; class, I've made the properties virtual, this is not necessary for RestSharp to function correctly, it's more habit on my part from working with NHibernate; however it does mean you can reuse the same models with NHibernate (if you wanted to do something like store the response in a database, for example).&lt;/p&gt;

&lt;p&gt;Then we need to modify our client such that when we execute the request, we instruct RestSharp to construct an instance of the User object. Create the client in the usual way and also create the request in the usual way. The magic is in how the client executes the request:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;var request = new RestRequest
                  {
                      Resource = string.Format("/user/show/{0}", username),
                      RootElement = "user"
                  };

var response = client.Execute&amp;lt;User&amp;gt;(request);

var user = response.Data;&lt;/pre&gt;

&lt;p&gt;As you can see, the Execute method has a generic overload. Internally, RestSharp detects that because we have used this overload, we want to deserialise the response content into an object of the given type, and it performs the deserialisation and constructs an instance of the object. The way that it does this is by looking at the Content-Type header in the response, and it uses the correct deserialiser depending upon the Content-Type. You can see more detail about this on &lt;a href="http://github.com/johnsheehan/RestSharp/blob/master/RestSharp/RestClient.cs" target="_blank"&gt;RestSharp's Github project pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is really easy to work with the response from your REST request with RestSharp, you can access the raw string content of the response, or deserialise it into a POCO - it's up to you.&lt;/p&gt;
</summary><published>2010-11-01T00:00:00Z</published><updated>2010-11-01T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/11/01/github-c-api-handling-the-response-with-restsharp/" /><content type="html">&lt;p&gt;Once we make a request to Github.com with &lt;a title="RestSharp.org" href="http://restsharp.org/" target="_blank"&gt;RestSharp&lt;/a&gt;, we get a response, and RestSharp gives us a &lt;a title="RestResponse class in RestSharp on github.com" href="http://github.com/johnsheehan/RestSharp/blob/master/RestSharp/RestResponse.cs" target="_blank"&gt;RestResponse&lt;/a&gt; object, with which we can do something with the content. The content will be in the format that we specified when we made the request, either JSON, XML or YAML.&lt;/p&gt;

&lt;p&gt;Oh crap, complicated string parsing...&lt;/p&gt;

&lt;p&gt;RestSharp to the rescue! We don't have to worry about parsing the response content, because RestSharp can do it for us.&lt;/p&gt;

&lt;p&gt;What we need to do, is model the response content into a POCO (Plain Old Clr Object):&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;public class User
{
    public virtual int Id { get; set; }
    public virtual string Login { get; set; }
    public virtual string Name { get; set;}

    ...
}&lt;/pre&gt;

&lt;p&gt;Note that in this &lt;a title="User class in the csharp-github-api project" href="http://github.com/sgrassie/csharp-github-api/blob/master/csharp-github-api/Models/User.cs" target="_blank"&gt;User&lt;/a&gt; class, I've made the properties virtual, this is not necessary for RestSharp to function correctly, it's more habit on my part from working with NHibernate; however it does mean you can reuse the same models with NHibernate (if you wanted to do something like store the response in a database, for example).&lt;/p&gt;

&lt;p&gt;Then we need to modify our client such that when we execute the request, we instruct RestSharp to construct an instance of the User object. Create the client in the usual way and also create the request in the usual way. The magic is in how the client executes the request:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;var request = new RestRequest
                  {
                      Resource = string.Format("/user/show/{0}", username),
                      RootElement = "user"
                  };

var response = client.Execute&amp;lt;User&amp;gt;(request);

var user = response.Data;&lt;/pre&gt;

&lt;p&gt;As you can see, the Execute method has a generic overload. Internally, RestSharp detects that because we have used this overload, we want to deserialise the response content into an object of the given type, and it performs the deserialisation and constructs an instance of the object. The way that it does this is by looking at the Content-Type header in the response, and it uses the correct deserialiser depending upon the Content-Type. You can see more detail about this on &lt;a href="http://github.com/johnsheehan/RestSharp/blob/master/RestSharp/RestClient.cs" target="_blank"&gt;RestSharp's Github project pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is really easy to work with the response from your REST request with RestSharp, you can access the raw string content of the response, or deserialise it into a POCO - it's up to you.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/10/25/lets-write-an-api-library-for-github/</id><title type="text">Let's write an API library for Github</title><summary type="html">&lt;p&gt;Let's write a C# API library for &lt;a title="Github.com" href="http://www.github.com"&gt;github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Github has a &lt;a title="Representational State Transfer on Wikipedia" href="http://en.wikipedia.org/wiki/Representational_State_Transfer"&gt;REST&lt;/a&gt; base API, the details of which are available at develop.github.com. Before continuing, I should point out that there is an &lt;a title="GitHubSharp on github.com" href="http://github.com/erikzaadi/GithubSharp"&gt;existing C# library already available&lt;/a&gt;, if you want to use that.&lt;/p&gt;

&lt;p&gt;We'll leverage John Sheehan's excellent &lt;a title="johnsheehan's RestSharp on github.com" href="http://github.com/johnsheehan/RestSharp" target="_blank"&gt;RestSharp&lt;/a&gt; library to do most of the heavy lifting.&lt;/p&gt;

&lt;p&gt;Before we can really do anything, the first task at hand is to learn how to work with RestSharp, and how we can make a request and receive a response. Fortunately, RestSharp makes it really easy, and there are excellent resources on the project's wiki page which explain how to do things. Let's see a quick example:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;[Test]
public void MakeBasicRequestToTwitterWithRestSharp()
{
    var client = new RestClient("http://api.twitter.com");
    client.UserAgent = "TemporalCohesion.TwitterApi";

    var request = new RestRequest();
    request.Resource = "statuses/public_timeline.json";

    var response = client.Execute(request);

    if (response.StatusCode == HttpStatusCode.OK)
    {
        String content = response.Content;

        Assert.That(content, Is.Not.Null);
    }
    else
    {
        Assert.Fail(response.StatusDescription);
    }
}&lt;/pre&gt;

&lt;p&gt;Here we are making an authenticated request to Twitter, asking for the public timeline in JSON format, but, the same code can easily be applied to github.com. We'll see more of that later. First we create the client object, and then create the request object - telling it what resource to actually request, and then we execute the request using the client, and then do something with the response. Pretty straightforward, huh?&lt;/p&gt;

&lt;p&gt;There is quite a lot that we can do with the Github API at this point, although you'll quickly see that to do anything really interesting (i.e. modifying your github account, or creating/forking repo's) requires you to be authenticated. Fortunately for us, Github uses HTTP Basic Authentication, and, RestSharp has a HttpBasicAuthenticator class, and if you put the two together, you can make an authenticated request to Github like this:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;var client = new RestClient
                 {
                     BaseUrl = "https://github.com/api/v2/json",
                     Authenticator = new HttpBasicAuthenticator("test", "test")
                 };&lt;/pre&gt;

&lt;p&gt;After we set the authenticator, RestSharp takes care of making sure that the headers of the requests we make to Github's API contain the necessary authentication which identifies us to Github. You'll note that the BaseUrl here is set to https://github.com/..., so that we can take advantage of SSL. You can can access public data via normal http://, but if we are going to do anything that requires authentication, it will be best if we choose to use https://&lt;/p&gt;

&lt;p&gt;Github also provide us with an API key. This is a unique key which identifies us to Github, and give our requests a little bit more security. We can't set this key with RestSharp, as we need to modify the way the authorization header is generated when we make a request. What we can do though, is to implement our own &lt;a title="RestSharp's IAuthenticator class" href="http://github.com/johnsheehan/RestSharp/blob/master/RestSharp/Authenticators/IAuthenticator.cs" target="_blank"&gt;IAuthenticator&lt;/a&gt; to do handle it for us. You can see &lt;a title="GitHubAuthenticator in the csharp-github-api" href="http://github.com/sgrassie/csharp-github-api/blob/master/csharp-github-api/GitHubAuthenticator.cs" target="_blank"&gt;my implementation&lt;/a&gt; up on Github. It's fairly straightforward - I still wanted to allow basic username:password authentication, as well as username/token: authentication for Github.com. Let's create a unit test to check everything is working OK.&lt;/p&gt;

&lt;p&gt;How do we know if we have made an authenticated request successfully? If you make a request to Github for a user, and you are authenticated as that user, then as well as the standard user response, there is some additional information included in the responses that only you, as the authenticated user, can see. And we can check for this information in the response:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;[Test]
public void MakeAuthenticatedRequest()
{
    var restRequest = new RestRequest
            {
                Resource = "/user/show/sgrassie"
            };

    var client = new RestClient
                     {
                         BaseUrl = "http://github.com/api/v2/json",
                         Authenticator = new GitHubAuthenticator(_secretsHandler.Username, _secretsHandler.Password, true)
                     };

    var response = client.Execute(restRequest);

    Assert.That(response.Content, Is.StringContaining("total_private_repo_count"));
}&lt;/pre&gt;

&lt;p&gt;The unit test is pretty straightforward, I make a request object which will get my user account, I authenticate the request and then execute it. Then I can simply check that the response content contains "total&lt;em&gt;private&lt;/em&gt;repo_count" - this would only be returned if the request was an authenticated request.&lt;/p&gt;

&lt;p&gt;One thing you might notice in the test is that in the GitHubAuthenticator constructor, I get my username and password/api token from the &lt;em&gt;_secretsHandler&lt;/em&gt; object, an instance of a class I've written which will load my username, password and api key from an XML file. This is so that I don't have to put my Github.com password and API key into the project's Github repo, because that would be bad.&lt;/p&gt;
</summary><published>2010-10-24T23:00:00Z</published><updated>2010-10-24T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/10/25/lets-write-an-api-library-for-github/" /><content type="html">&lt;p&gt;Let's write a C# API library for &lt;a title="Github.com" href="http://www.github.com"&gt;github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Github has a &lt;a title="Representational State Transfer on Wikipedia" href="http://en.wikipedia.org/wiki/Representational_State_Transfer"&gt;REST&lt;/a&gt; base API, the details of which are available at develop.github.com. Before continuing, I should point out that there is an &lt;a title="GitHubSharp on github.com" href="http://github.com/erikzaadi/GithubSharp"&gt;existing C# library already available&lt;/a&gt;, if you want to use that.&lt;/p&gt;

&lt;p&gt;We'll leverage John Sheehan's excellent &lt;a title="johnsheehan's RestSharp on github.com" href="http://github.com/johnsheehan/RestSharp" target="_blank"&gt;RestSharp&lt;/a&gt; library to do most of the heavy lifting.&lt;/p&gt;

&lt;p&gt;Before we can really do anything, the first task at hand is to learn how to work with RestSharp, and how we can make a request and receive a response. Fortunately, RestSharp makes it really easy, and there are excellent resources on the project's wiki page which explain how to do things. Let's see a quick example:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;[Test]
public void MakeBasicRequestToTwitterWithRestSharp()
{
    var client = new RestClient("http://api.twitter.com");
    client.UserAgent = "TemporalCohesion.TwitterApi";

    var request = new RestRequest();
    request.Resource = "statuses/public_timeline.json";

    var response = client.Execute(request);

    if (response.StatusCode == HttpStatusCode.OK)
    {
        String content = response.Content;

        Assert.That(content, Is.Not.Null);
    }
    else
    {
        Assert.Fail(response.StatusDescription);
    }
}&lt;/pre&gt;

&lt;p&gt;Here we are making an authenticated request to Twitter, asking for the public timeline in JSON format, but, the same code can easily be applied to github.com. We'll see more of that later. First we create the client object, and then create the request object - telling it what resource to actually request, and then we execute the request using the client, and then do something with the response. Pretty straightforward, huh?&lt;/p&gt;

&lt;p&gt;There is quite a lot that we can do with the Github API at this point, although you'll quickly see that to do anything really interesting (i.e. modifying your github account, or creating/forking repo's) requires you to be authenticated. Fortunately for us, Github uses HTTP Basic Authentication, and, RestSharp has a HttpBasicAuthenticator class, and if you put the two together, you can make an authenticated request to Github like this:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;var client = new RestClient
                 {
                     BaseUrl = "https://github.com/api/v2/json",
                     Authenticator = new HttpBasicAuthenticator("test", "test")
                 };&lt;/pre&gt;

&lt;p&gt;After we set the authenticator, RestSharp takes care of making sure that the headers of the requests we make to Github's API contain the necessary authentication which identifies us to Github. You'll note that the BaseUrl here is set to https://github.com/..., so that we can take advantage of SSL. You can can access public data via normal http://, but if we are going to do anything that requires authentication, it will be best if we choose to use https://&lt;/p&gt;

&lt;p&gt;Github also provide us with an API key. This is a unique key which identifies us to Github, and give our requests a little bit more security. We can't set this key with RestSharp, as we need to modify the way the authorization header is generated when we make a request. What we can do though, is to implement our own &lt;a title="RestSharp's IAuthenticator class" href="http://github.com/johnsheehan/RestSharp/blob/master/RestSharp/Authenticators/IAuthenticator.cs" target="_blank"&gt;IAuthenticator&lt;/a&gt; to do handle it for us. You can see &lt;a title="GitHubAuthenticator in the csharp-github-api" href="http://github.com/sgrassie/csharp-github-api/blob/master/csharp-github-api/GitHubAuthenticator.cs" target="_blank"&gt;my implementation&lt;/a&gt; up on Github. It's fairly straightforward - I still wanted to allow basic username:password authentication, as well as username/token: authentication for Github.com. Let's create a unit test to check everything is working OK.&lt;/p&gt;

&lt;p&gt;How do we know if we have made an authenticated request successfully? If you make a request to Github for a user, and you are authenticated as that user, then as well as the standard user response, there is some additional information included in the responses that only you, as the authenticated user, can see. And we can check for this information in the response:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;[Test]
public void MakeAuthenticatedRequest()
{
    var restRequest = new RestRequest
            {
                Resource = "/user/show/sgrassie"
            };

    var client = new RestClient
                     {
                         BaseUrl = "http://github.com/api/v2/json",
                         Authenticator = new GitHubAuthenticator(_secretsHandler.Username, _secretsHandler.Password, true)
                     };

    var response = client.Execute(restRequest);

    Assert.That(response.Content, Is.StringContaining("total_private_repo_count"));
}&lt;/pre&gt;

&lt;p&gt;The unit test is pretty straightforward, I make a request object which will get my user account, I authenticate the request and then execute it. Then I can simply check that the response content contains "total&lt;em&gt;private&lt;/em&gt;repo_count" - this would only be returned if the request was an authenticated request.&lt;/p&gt;

&lt;p&gt;One thing you might notice in the test is that in the GitHubAuthenticator constructor, I get my username and password/api token from the &lt;em&gt;_secretsHandler&lt;/em&gt; object, an instance of a class I've written which will load my username, password and api key from an XML file. This is so that I don't have to put my Github.com password and API key into the project's Github repo, because that would be bad.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/07/21/unit-testing-events/</id><title type="text">Unit Testing Events</title><summary type="html">&lt;p&gt;Recently I have had to unit test some events in an application I work on. I came up with a workable solution, but I didn�t really like the way it was working, and it just looked ugly. So I did a little digging on Google, and &lt;a href="http://stackoverflow.com/questions/248989/unit-testing-that-an-event-is-raised-in-c"&gt;found this helpful question on StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is my take it. I�m putting it here so I can find easily find it again. Basically it�s the same, but I�m using a lambda to create my anonymous delegate:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;[Test]
public void UnitTestNodeChanged()
{
 var receivedEvents = new List&amp;lt;XmlNodeChangedEventArgs&amp;gt;();
 var document = new XmlDocument();

 document.NodeChanged += ((sender, e) =&amp;gt; receivedEvents.Add(e));
 document.Load("C:file.xml");

 Assert.That(receivedEvents.Count, Is.EqualTo(1));
}&lt;/pre&gt;

&lt;p&gt;Nice and short, and to the point. We can test the fact that the event was raised (or not); how many times the event was raised; and, we can test the event arguments.&lt;/p&gt;

&lt;p&gt;I like it. Some people may not, but it suits my purposes.&lt;/p&gt;
</summary><published>2010-07-20T23:00:00Z</published><updated>2010-07-20T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/07/21/unit-testing-events/" /><content type="html">&lt;p&gt;Recently I have had to unit test some events in an application I work on. I came up with a workable solution, but I didn�t really like the way it was working, and it just looked ugly. So I did a little digging on Google, and &lt;a href="http://stackoverflow.com/questions/248989/unit-testing-that-an-event-is-raised-in-c"&gt;found this helpful question on StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is my take it. I�m putting it here so I can find easily find it again. Basically it�s the same, but I�m using a lambda to create my anonymous delegate:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;[Test]
public void UnitTestNodeChanged()
{
 var receivedEvents = new List&amp;lt;XmlNodeChangedEventArgs&amp;gt;();
 var document = new XmlDocument();

 document.NodeChanged += ((sender, e) =&amp;gt; receivedEvents.Add(e));
 document.Load("C:file.xml");

 Assert.That(receivedEvents.Count, Is.EqualTo(1));
}&lt;/pre&gt;

&lt;p&gt;Nice and short, and to the point. We can test the fact that the event was raised (or not); how many times the event was raised; and, we can test the event arguments.&lt;/p&gt;

&lt;p&gt;I like it. Some people may not, but it suits my purposes.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/03/31/well-i-certainly-didnt-know-that-word-could-do-this/</id><title type="text">Well I certainly didn�t know that Word could do this</title><summary type="html">&lt;p&gt;&lt;p&gt;Whilst I was watching football I had this amazing idea that I was going to write a plugin for Word that would let you write blog posts and publish them onto your blog. I literally had no idea that Word would have this baked in by default.
&lt;/p&gt;&lt;p&gt;Obviously I've had to test this out immediately.
&lt;/p&gt;&lt;/p&gt;
</summary><published>2010-03-30T23:00:00Z</published><updated>2010-03-30T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/03/31/well-i-certainly-didnt-know-that-word-could-do-this/" /><content type="html">&lt;p&gt;&lt;p&gt;Whilst I was watching football I had this amazing idea that I was going to write a plugin for Word that would let you write blog posts and publish them onto your blog. I literally had no idea that Word would have this baked in by default.
&lt;/p&gt;&lt;p&gt;Obviously I've had to test this out immediately.
&lt;/p&gt;&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/03/23/revisting-the-project-euler-problem-runner/</id><title type="text">Revisting the Project Euler problem runner</title><summary type="html">&lt;p&gt;I'm sure that you must have heard about &lt;a title="Project Euler website" href="http://projecteuler.net/" target="_blank"&gt;Project Euler&lt;/a&gt;, which "is a series of challenging mathematical/computer programming problems that  will require more than just mathematical insights to solve". I have blogged about tackling the Project Euler problems &lt;a href="http://temporalcohesion.co.uk/2008/08/22/building-the-project-euler-framework-part-1/"&gt;before&lt;/a&gt;, and at the time, I developed a simple program to try to automate running the problems.&lt;/p&gt;

&lt;p&gt;That was about 18 months ago, I've learned a lot since then and I think that it is high time to take a look back at the code and see if I can spot if there is any room for improvement.&lt;/p&gt;

&lt;h2&gt;The current project&lt;/h2&gt;

&lt;p&gt;[caption id="attachment_191" align="alignleft" width="240" caption="Current structure"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2010/03/eulerprojectold.png"&gt;&lt;img class="size-medium wp-image-191 " title="eulerprojectold" src="http://temporalcohesion.co.uk/wp-content/uploads/2010/03/eulerprojectold-300x241.png" alt="The current structure of the project" width="240" height="193" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;Let's have a look at how I structured the project when I set it up. The first thing that you will notice, is that I messed up the package names. It should be "uk.co", and not "co.uk", according to the &lt;a title="Java Language specification on sun.com" href="http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7" target="_blank"&gt;Java language specification&lt;/a&gt;. A minor point, and not really a big deal, we can easily sort it out.&lt;/p&gt;

&lt;p&gt;Something else I did, was lump everything together into the same project and package - the runner program, the utils (e.g. helper classes that you write as you progress through problems), resources and the problems themselves.&lt;/p&gt;

&lt;p&gt;I don't think that this was necessarily a bad idea at the time, I don't think that it is inherintly a bad idea now, it's logical for everything to share the same package. Or should I say, it &lt;em&gt;was &lt;/em&gt;logical for everything to share the same package.&lt;/p&gt;

&lt;p&gt;I am going to put the code for the problem runner onto Github, but I don't want to share the answers to the problems. To answer your question, I think that it goes against the point of Project Euler, that of having a set of problems that the inquisitive person can solve with some math and programming. I have also found that the problems also help in getting comfortable with the syntax of a new programming language - after all the solutions to the problems remain the same, however the implementation is subtley different depending on the language being used.&lt;/p&gt;

&lt;h2&gt;Re-Design&lt;/h2&gt;

&lt;p&gt;Examining the current code and design, we can immediately identify some changes which we are going to make� I'm going to seperate the uk.co.temporalcohesion.euler package into three packages, which are more distinct from each other, but still keep them all in the same project. Why? Well, it is obvious that there are three tasks which we have to manage:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Running problems.&lt;/li&gt;
    &lt;li&gt;Provide an API to run the problems.&lt;/li&gt;
    &lt;li&gt;Store the problems somewhere&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To shed some light on my thinking here, lets examine these in more detail. This will also identify areas of possible improvement in the design.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I want someway of consistenly running a problem (or group of problems) to test the solution(s) to (a) Project Euler problem(s). This is basically our console runner application, which doesn't have to know exactly how this happens, it recieves input, and returns output - how that output is generated is irrelevant to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want an easy to use API which I can leverage to easily implement the solution to a Project Euler problem, so that I don't have to worry about re-writing all the input/output code over and over again. I also want to be able to share this API, without sharing the answers to the problems themselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I need to have somewhere I can put the answers to the problems, and associated helper classes (Prime number generators, etc) which I can easly backup, and easily run the problems from.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are sounding a bit like user stories, and I suppose they are. They can be formalised as so:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style="text-align: left;"&gt;As a Problem Solver, I want to run the solution, or group of solutions, to a Project Euler problem.&lt;/p&gt;
&lt;p style="text-align: left;"&gt;As a problem solver, I want to concentrate implementing the solution to a euler problem, not on implementing input/output for the problem.&lt;/p&gt;
&lt;p style="text-align: left;"&gt;As a problem solver, I want a place to develop and store the problems, from which I can run the problems to test the solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p style="text-align: left;"&gt;Fairly concise and simple requirements, which we will revisit later. We still have to examine the code in a little more detail so that we can identify exactly what it is we are going to refactor.&lt;/p&gt;

&lt;h2 style="text-align: left;"&gt;Code review&lt;/h2&gt;

&lt;p&gt;The main class to examine is Euler, in Euler.java.� The first to say without even looking at the code, is that the name is fairly awful. Then when we examine the code in more detail, we can see the name is even worse. The class has the main entry point for the program, as well as all the code to actually run the problems. This class is doing everything, there is definately no Seperation of Concerns. It is responsible for accepting user input, loading and running the problems and displaying the output. Wow.&lt;/p&gt;

&lt;p&gt;The class is designed around the &lt;a title="Command Patter on Wikipedia" href="http://en.wikipedia.org/wiki/Command_pattern" target="_blank"&gt;Command Pattern&lt;/a&gt;, and it has worked quite well. Looking at it now, a further two patterns could be used, namely &lt;a title="Strategy patter on Wikipedia" href="http://en.wikipedia.org/wiki/Strategy_pattern" target="_blank"&gt;Strategy &lt;/a&gt;and &lt;a title="Template method pattern on Wikipedia" href="http://en.wikipedia.org/wiki/Template_method_pattern" target="_blank"&gt;Template method&lt;/a&gt;.I'm still in two minds about refactoring the design pattern in use, but that discussion can be put off for the time being, as I have other things to concern me.&lt;/p&gt;

&lt;p&gt;There are 144 SLoC, not a massive amount, but when you consider the above and what the class should be doing, then it is clearly a bit weighty. There are 7 functions in total, not counting the constructor, not a massive count, but as the SLoC count indicates, some of those functions are a bit long. The worst offender is the following method.&lt;/p&gt;

&lt;pre class="lang:java decode:1 " &gt;

private void loadClasses() {
 InputStream fis = null;

 Properties p = new Properties();

 try {
 fis = ClassLoader
 .getSystemResourceAsStream(&amp;amp;quot;co/uk/temporalcohesion/euler/resources/problems.properties&amp;amp;quot;);
 p.load(fis);

 Enumeration&amp;amp;lt;?&amp;amp;gt; e = p.propertyNames();
 while (e.hasMoreElements()) {
 String key = (String) e.nextElement();
 String value = (String) p.getProperty(key);

 Object o = Class.forName(value).newInstance();
 if( ( o != null) &amp;amp;amp;&amp;amp;amp; (o instanceof Problem)){
 Problem problem = (Problem)o;
 problems.put(Integer.parseInt(key), problem);
 }
 }
 }

 catch (FileNotFoundException e) {
 e.printStackTrace();
 } catch (IOException e) {
 e.printStackTrace();
 } catch (ClassNotFoundException e) {
 e.printStackTrace();
 } catch (InstantiationException e) {
 e.printStackTrace();
 } catch (IllegalAccessException e) {
 e.printStackTrace();
 } catch (ClassCastException e) {

 }
 finally {
 try {
 fis.close();
 } catch (IOException e) {
 e.printStackTrace();
 }
 }
 }

&lt;/pre&gt;

&lt;p&gt;Wow, that's a lot of code for something which is relatively straightforward. It's not exactly easy to read, and it violoates the Single Responsibility Principle: by loading in and enumerating over a properties file, instantiating new instances of problem classes, and handling all the exceptions which can be thrown. There will definately be some room for improvement there.&lt;/p&gt;

&lt;p&gt;Getting back to the main &lt;em&gt;Euler &lt;/em&gt;class as a whole, there is an even worse problem...&lt;/p&gt;

&lt;p&gt;There are no unit tests!&lt;/p&gt;

&lt;p&gt;This is a disastrous situation, because it means I cannot refactor the class with any confidence. The me of 18 months ago has a lot to answer for. I've got a bit of work to do. Check back next time to see how I've progressed things.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;
</summary><published>2010-03-23T00:00:00Z</published><updated>2010-03-23T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/03/23/revisting-the-project-euler-problem-runner/" /><content type="html">&lt;p&gt;I'm sure that you must have heard about &lt;a title="Project Euler website" href="http://projecteuler.net/" target="_blank"&gt;Project Euler&lt;/a&gt;, which "is a series of challenging mathematical/computer programming problems that  will require more than just mathematical insights to solve". I have blogged about tackling the Project Euler problems &lt;a href="http://temporalcohesion.co.uk/2008/08/22/building-the-project-euler-framework-part-1/"&gt;before&lt;/a&gt;, and at the time, I developed a simple program to try to automate running the problems.&lt;/p&gt;

&lt;p&gt;That was about 18 months ago, I've learned a lot since then and I think that it is high time to take a look back at the code and see if I can spot if there is any room for improvement.&lt;/p&gt;

&lt;h2&gt;The current project&lt;/h2&gt;

&lt;p&gt;[caption id="attachment_191" align="alignleft" width="240" caption="Current structure"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2010/03/eulerprojectold.png"&gt;&lt;img class="size-medium wp-image-191 " title="eulerprojectold" src="http://temporalcohesion.co.uk/wp-content/uploads/2010/03/eulerprojectold-300x241.png" alt="The current structure of the project" width="240" height="193" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;Let's have a look at how I structured the project when I set it up. The first thing that you will notice, is that I messed up the package names. It should be "uk.co", and not "co.uk", according to the &lt;a title="Java Language specification on sun.com" href="http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7" target="_blank"&gt;Java language specification&lt;/a&gt;. A minor point, and not really a big deal, we can easily sort it out.&lt;/p&gt;

&lt;p&gt;Something else I did, was lump everything together into the same project and package - the runner program, the utils (e.g. helper classes that you write as you progress through problems), resources and the problems themselves.&lt;/p&gt;

&lt;p&gt;I don't think that this was necessarily a bad idea at the time, I don't think that it is inherintly a bad idea now, it's logical for everything to share the same package. Or should I say, it &lt;em&gt;was &lt;/em&gt;logical for everything to share the same package.&lt;/p&gt;

&lt;p&gt;I am going to put the code for the problem runner onto Github, but I don't want to share the answers to the problems. To answer your question, I think that it goes against the point of Project Euler, that of having a set of problems that the inquisitive person can solve with some math and programming. I have also found that the problems also help in getting comfortable with the syntax of a new programming language - after all the solutions to the problems remain the same, however the implementation is subtley different depending on the language being used.&lt;/p&gt;

&lt;h2&gt;Re-Design&lt;/h2&gt;

&lt;p&gt;Examining the current code and design, we can immediately identify some changes which we are going to make� I'm going to seperate the uk.co.temporalcohesion.euler package into three packages, which are more distinct from each other, but still keep them all in the same project. Why? Well, it is obvious that there are three tasks which we have to manage:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Running problems.&lt;/li&gt;
    &lt;li&gt;Provide an API to run the problems.&lt;/li&gt;
    &lt;li&gt;Store the problems somewhere&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To shed some light on my thinking here, lets examine these in more detail. This will also identify areas of possible improvement in the design.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I want someway of consistenly running a problem (or group of problems) to test the solution(s) to (a) Project Euler problem(s). This is basically our console runner application, which doesn't have to know exactly how this happens, it recieves input, and returns output - how that output is generated is irrelevant to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want an easy to use API which I can leverage to easily implement the solution to a Project Euler problem, so that I don't have to worry about re-writing all the input/output code over and over again. I also want to be able to share this API, without sharing the answers to the problems themselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I need to have somewhere I can put the answers to the problems, and associated helper classes (Prime number generators, etc) which I can easly backup, and easily run the problems from.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are sounding a bit like user stories, and I suppose they are. They can be formalised as so:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style="text-align: left;"&gt;As a Problem Solver, I want to run the solution, or group of solutions, to a Project Euler problem.&lt;/p&gt;
&lt;p style="text-align: left;"&gt;As a problem solver, I want to concentrate implementing the solution to a euler problem, not on implementing input/output for the problem.&lt;/p&gt;
&lt;p style="text-align: left;"&gt;As a problem solver, I want a place to develop and store the problems, from which I can run the problems to test the solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p style="text-align: left;"&gt;Fairly concise and simple requirements, which we will revisit later. We still have to examine the code in a little more detail so that we can identify exactly what it is we are going to refactor.&lt;/p&gt;

&lt;h2 style="text-align: left;"&gt;Code review&lt;/h2&gt;

&lt;p&gt;The main class to examine is Euler, in Euler.java.� The first to say without even looking at the code, is that the name is fairly awful. Then when we examine the code in more detail, we can see the name is even worse. The class has the main entry point for the program, as well as all the code to actually run the problems. This class is doing everything, there is definately no Seperation of Concerns. It is responsible for accepting user input, loading and running the problems and displaying the output. Wow.&lt;/p&gt;

&lt;p&gt;The class is designed around the &lt;a title="Command Patter on Wikipedia" href="http://en.wikipedia.org/wiki/Command_pattern" target="_blank"&gt;Command Pattern&lt;/a&gt;, and it has worked quite well. Looking at it now, a further two patterns could be used, namely &lt;a title="Strategy patter on Wikipedia" href="http://en.wikipedia.org/wiki/Strategy_pattern" target="_blank"&gt;Strategy &lt;/a&gt;and &lt;a title="Template method pattern on Wikipedia" href="http://en.wikipedia.org/wiki/Template_method_pattern" target="_blank"&gt;Template method&lt;/a&gt;.I'm still in two minds about refactoring the design pattern in use, but that discussion can be put off for the time being, as I have other things to concern me.&lt;/p&gt;

&lt;p&gt;There are 144 SLoC, not a massive amount, but when you consider the above and what the class should be doing, then it is clearly a bit weighty. There are 7 functions in total, not counting the constructor, not a massive count, but as the SLoC count indicates, some of those functions are a bit long. The worst offender is the following method.&lt;/p&gt;

&lt;pre class="lang:java decode:1 " &gt;

private void loadClasses() {
 InputStream fis = null;

 Properties p = new Properties();

 try {
 fis = ClassLoader
 .getSystemResourceAsStream(&amp;amp;quot;co/uk/temporalcohesion/euler/resources/problems.properties&amp;amp;quot;);
 p.load(fis);

 Enumeration&amp;amp;lt;?&amp;amp;gt; e = p.propertyNames();
 while (e.hasMoreElements()) {
 String key = (String) e.nextElement();
 String value = (String) p.getProperty(key);

 Object o = Class.forName(value).newInstance();
 if( ( o != null) &amp;amp;amp;&amp;amp;amp; (o instanceof Problem)){
 Problem problem = (Problem)o;
 problems.put(Integer.parseInt(key), problem);
 }
 }
 }

 catch (FileNotFoundException e) {
 e.printStackTrace();
 } catch (IOException e) {
 e.printStackTrace();
 } catch (ClassNotFoundException e) {
 e.printStackTrace();
 } catch (InstantiationException e) {
 e.printStackTrace();
 } catch (IllegalAccessException e) {
 e.printStackTrace();
 } catch (ClassCastException e) {

 }
 finally {
 try {
 fis.close();
 } catch (IOException e) {
 e.printStackTrace();
 }
 }
 }

&lt;/pre&gt;

&lt;p&gt;Wow, that's a lot of code for something which is relatively straightforward. It's not exactly easy to read, and it violoates the Single Responsibility Principle: by loading in and enumerating over a properties file, instantiating new instances of problem classes, and handling all the exceptions which can be thrown. There will definately be some room for improvement there.&lt;/p&gt;

&lt;p&gt;Getting back to the main &lt;em&gt;Euler &lt;/em&gt;class as a whole, there is an even worse problem...&lt;/p&gt;

&lt;p&gt;There are no unit tests!&lt;/p&gt;

&lt;p&gt;This is a disastrous situation, because it means I cannot refactor the class with any confidence. The me of 18 months ago has a lot to answer for. I've got a bit of work to do. Check back next time to see how I've progressed things.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/</id><title type="text">Even more on the generic plugin manager</title><summary type="html">&lt;p&gt;I've &lt;a title="Writing a generic plugin manager in C# @ Temporal Cohesion" href="http://temporalcohesion.co.uk/2009/05/25/writing-a-generic-plugin-manager-in-c/" target="_self"&gt;written &lt;/a&gt;&lt;a title="More on the generic plugin manager" href="http://temporalcohesion.co.uk/2009/11/02/more-on-the-generic-plugin-manager/" target="_self"&gt;previously&lt;/a&gt; about writing your own generic plugin manager/framework.&lt;/p&gt;

&lt;p&gt;I believe that this is a worthwhile exercise for the beginning programmer, because it firstly teaches you a lot about reflection, and secondly teaches you the advantages that proper use of interfaces can bring to your code. Thirdly it can also teach you to think about how your API might be used by someone else when they write a plugin for your program. In short I think it's a great exercise.&lt;/p&gt;

&lt;p&gt;While writing and using my own plugin framework has been a great learning experience for me, I've found that I have outgrown it's usefulness to me. What made me see this was when I started to think about and begin implementing a way for me to use the framework as a &lt;a title="Dependency Injection on Wikipedia" href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank"&gt;IoC/Dependency Injection&lt;/a&gt; tool. This led me off on some Googling and I found &lt;a title="Funq DI container on Codeplex" href="http://funq.codeplex.com/" target="_blank"&gt;Funq&lt;/a&gt;, and the the &lt;a href="http://www.clariusconsulting.net/blogs/kzu/archive/2009/02/02/116399.aspx" target="_blank"&gt;associated screencasts by Cazzulino&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This got me to thinking about &lt;a title="Don't Repeat Yourself on Wikipedia" href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank"&gt;DRY&lt;/a&gt;. Don't Repeat Yourself can just as easily mean Don't Repeat Work Other People Have Already Done (If You Don't Have To), but DRWOPHADIYDHT doesn't sound/look nice as an acronym. Perhaps a better way to express that sentiment is "lazyDRY", or "The re-use of prexisting libraries and code can save you a lot of time, and which effort you can put into your application at a higher level."&lt;/p&gt;

&lt;p&gt;Or in other words, it is foolish to ignore the work that other people have done, unless you have a compelling reason to do so. If you really want to write your own IoC/DI container, then great, knock yourself out. No one is going to stop you.&lt;/p&gt;

&lt;p&gt;I'm lazy though. Nanos gigantium humeris insidentes.&lt;/p&gt;

&lt;p&gt;Depending on the blogs in your feed reader, or who you follow on Twitter, or just in general googling, you will probably come across references to the same group of IoC/DI containers. Chiefly:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a title="StructureMap on Github" href="http://structuremap.github.com/structuremap/index.html" target="_blank"&gt;StructureMap&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title="Castle Windsor" href="http://www.castleproject.org/" target="_blank"&gt;Castle Windsor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title="AutoFac on Google code" href="http://code.google.com/p/autofac/" target="_blank"&gt;AutoFac&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title="Ninject" href="http://ninject.org/" target="_blank"&gt;Ninject&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.codeplex.com/MEF/" target="_blank"&gt;MEF&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://msdn.com/unity"&gt;Unity&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.springframework.net/"&gt;Spring.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are others, but it would seem hardly anyone uses them. Of those above, I have so far only used StructureMap and Ninject, and have really liked using both of them. I will try out the others at some point, but so far I've liked what I've seen in StructureMap and Ninject, I honestly don't think that any of the others will have anything better to offer me. Besides which, StructureMap has a built in method of using it as a plugin framework. Win.&lt;/p&gt;

&lt;h2&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;What can I draw from all this? I don't think that I wasted any of my time or effort in writing my own plugin framework. It was a worthwhile exercise which taught me a lot of things, and I urge you to do the same.&lt;/p&gt;
</summary><published>2010-03-17T00:00:00Z</published><updated>2010-03-17T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/" /><content type="html">&lt;p&gt;I've &lt;a title="Writing a generic plugin manager in C# @ Temporal Cohesion" href="http://temporalcohesion.co.uk/2009/05/25/writing-a-generic-plugin-manager-in-c/" target="_self"&gt;written &lt;/a&gt;&lt;a title="More on the generic plugin manager" href="http://temporalcohesion.co.uk/2009/11/02/more-on-the-generic-plugin-manager/" target="_self"&gt;previously&lt;/a&gt; about writing your own generic plugin manager/framework.&lt;/p&gt;

&lt;p&gt;I believe that this is a worthwhile exercise for the beginning programmer, because it firstly teaches you a lot about reflection, and secondly teaches you the advantages that proper use of interfaces can bring to your code. Thirdly it can also teach you to think about how your API might be used by someone else when they write a plugin for your program. In short I think it's a great exercise.&lt;/p&gt;

&lt;p&gt;While writing and using my own plugin framework has been a great learning experience for me, I've found that I have outgrown it's usefulness to me. What made me see this was when I started to think about and begin implementing a way for me to use the framework as a &lt;a title="Dependency Injection on Wikipedia" href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank"&gt;IoC/Dependency Injection&lt;/a&gt; tool. This led me off on some Googling and I found &lt;a title="Funq DI container on Codeplex" href="http://funq.codeplex.com/" target="_blank"&gt;Funq&lt;/a&gt;, and the the &lt;a href="http://www.clariusconsulting.net/blogs/kzu/archive/2009/02/02/116399.aspx" target="_blank"&gt;associated screencasts by Cazzulino&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This got me to thinking about &lt;a title="Don't Repeat Yourself on Wikipedia" href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank"&gt;DRY&lt;/a&gt;. Don't Repeat Yourself can just as easily mean Don't Repeat Work Other People Have Already Done (If You Don't Have To), but DRWOPHADIYDHT doesn't sound/look nice as an acronym. Perhaps a better way to express that sentiment is "lazyDRY", or "The re-use of prexisting libraries and code can save you a lot of time, and which effort you can put into your application at a higher level."&lt;/p&gt;

&lt;p&gt;Or in other words, it is foolish to ignore the work that other people have done, unless you have a compelling reason to do so. If you really want to write your own IoC/DI container, then great, knock yourself out. No one is going to stop you.&lt;/p&gt;

&lt;p&gt;I'm lazy though. Nanos gigantium humeris insidentes.&lt;/p&gt;

&lt;p&gt;Depending on the blogs in your feed reader, or who you follow on Twitter, or just in general googling, you will probably come across references to the same group of IoC/DI containers. Chiefly:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a title="StructureMap on Github" href="http://structuremap.github.com/structuremap/index.html" target="_blank"&gt;StructureMap&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title="Castle Windsor" href="http://www.castleproject.org/" target="_blank"&gt;Castle Windsor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title="AutoFac on Google code" href="http://code.google.com/p/autofac/" target="_blank"&gt;AutoFac&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title="Ninject" href="http://ninject.org/" target="_blank"&gt;Ninject&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.codeplex.com/MEF/" target="_blank"&gt;MEF&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://msdn.com/unity"&gt;Unity&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.springframework.net/"&gt;Spring.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are others, but it would seem hardly anyone uses them. Of those above, I have so far only used StructureMap and Ninject, and have really liked using both of them. I will try out the others at some point, but so far I've liked what I've seen in StructureMap and Ninject, I honestly don't think that any of the others will have anything better to offer me. Besides which, StructureMap has a built in method of using it as a plugin framework. Win.&lt;/p&gt;

&lt;h2&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;What can I draw from all this? I don't think that I wasted any of my time or effort in writing my own plugin framework. It was a worthwhile exercise which taught me a lot of things, and I urge you to do the same.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/03/07/you-dont-have-to-kneel-at-the-altar-of-the-cult-of-apple/</id><title type="text">You don't have to kneel at the altar of the cult of Apple</title><summary type="html">&lt;h1&gt;Unless you've been living under a rock&lt;/h1&gt;

&lt;p&gt;You will have seen, heard and read the buzz about the Apple &lt;a title="ipad on Apple.com" href="http://www.apple.com/ipad/" target="_blank"&gt;iPad&lt;/a&gt;. What it is, what it does and why you should buy it. This post is not about all that - it's covered in excruciating detail elsewhere on your favourite tech site. Ever since the iPad was just a rumour, and since it was officially announced, we have been arguing about it at work. Whose going to buy one? Who is an idiot for wanting to buy one? Who is an idiot for not wanting to buy one?&lt;/p&gt;

&lt;blockquote&gt;Note: I should mention that I do happen to own an iPhone (via an O2 two year(!) contract), and I think it is probably the best mobile phone I've ever owned, however, I will take some convincing to enter into another two year contract again. But I digress. I have a couple of old iPods, nothing else: I am not a &lt;a title="Fanboy on wikipedia" href="http://en.wikipedia.org/wiki/Fan_%28person%29" target="_blank"&gt;fanboy&lt;/a&gt;.&lt;/blockquote&gt;

&lt;p&gt;The niche that the iPad and devices like it fill is undoubtedly there, or else these products would not be developed. The key thing here is "...and devices like it...". There isn't just the iPad to consider.� This is the fantastic thing about our society: we have a huge freedom of choice in our purchasing decisions. We are free to evaluate, consider and weigh all the pros and cons of a particular product before we make the commitment to purchase.&lt;/p&gt;

&lt;h1&gt;Unless you are an Apple fanboy&lt;/h1&gt;

&lt;p&gt;In which case, you have already sub-concisiously made the decision to purchase anything with an Apple logo on. Are you an Apple fan boy? You have a Mac of some discription. You bought (and probably still have) a first-gen iPod. You bought an iTouch the day it was release. You were the first in your office to get an iPhone. You were the first to upgrade to an iPhone 3G. You were the first to upgrade to an iPhone 3GS. You hammer F5 on your favourite liveblog of an Apple event. You wouldn't even consider buying a laptop from Asus, Acer or Dell (or whoever) which as powerful and costs half the price of something which has a fucking Apple logo on it.&lt;/p&gt;

&lt;p&gt;Fanboy. Acolyte. Get out. You have already made your choice. You cannot win an arguement with someone who fanatically believes they are right.&lt;/p&gt;

&lt;h1&gt;Open minded? Continue from here&lt;/h1&gt;

&lt;p&gt;For those who are prepared to broaden our horizons, there is a bewildering array of choice just around the corner. Rather than rehash other people's hard work from around the interweb, and because I'm lazy, I refer you to this article on About.com: &lt;a href="http://portables.about.com/od/otherdevices/tp/Slate_tablet_roundup.htm" target="_blank"&gt;http://portables.about.com/od/otherdevices/tp/Slate&lt;em&gt;tablet&lt;/em&gt;roundup.htm&lt;/a&gt;, which offers a succinct highlight of varous slate tablet computers. &lt;a href="http://www.engadget.com/2010/03/05/microsofts-courier-digital-journal-exclusive-pictures-and-de/" target="_blank"&gt;Engadget also has some details&lt;/a&gt; of Microsofts offering, the 'Courier', which looks promising.&lt;/p&gt;

&lt;h1&gt;In Conclusion&lt;/h1&gt;

&lt;p&gt;You do not have to kneel at the alter of the cult of Apple. You have a choice. Use it wisely.&lt;/p&gt;
</summary><published>2010-03-07T00:00:00Z</published><updated>2010-03-07T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/03/07/you-dont-have-to-kneel-at-the-altar-of-the-cult-of-apple/" /><content type="html">&lt;h1&gt;Unless you've been living under a rock&lt;/h1&gt;

&lt;p&gt;You will have seen, heard and read the buzz about the Apple &lt;a title="ipad on Apple.com" href="http://www.apple.com/ipad/" target="_blank"&gt;iPad&lt;/a&gt;. What it is, what it does and why you should buy it. This post is not about all that - it's covered in excruciating detail elsewhere on your favourite tech site. Ever since the iPad was just a rumour, and since it was officially announced, we have been arguing about it at work. Whose going to buy one? Who is an idiot for wanting to buy one? Who is an idiot for not wanting to buy one?&lt;/p&gt;

&lt;blockquote&gt;Note: I should mention that I do happen to own an iPhone (via an O2 two year(!) contract), and I think it is probably the best mobile phone I've ever owned, however, I will take some convincing to enter into another two year contract again. But I digress. I have a couple of old iPods, nothing else: I am not a &lt;a title="Fanboy on wikipedia" href="http://en.wikipedia.org/wiki/Fan_%28person%29" target="_blank"&gt;fanboy&lt;/a&gt;.&lt;/blockquote&gt;

&lt;p&gt;The niche that the iPad and devices like it fill is undoubtedly there, or else these products would not be developed. The key thing here is "...and devices like it...". There isn't just the iPad to consider.� This is the fantastic thing about our society: we have a huge freedom of choice in our purchasing decisions. We are free to evaluate, consider and weigh all the pros and cons of a particular product before we make the commitment to purchase.&lt;/p&gt;

&lt;h1&gt;Unless you are an Apple fanboy&lt;/h1&gt;

&lt;p&gt;In which case, you have already sub-concisiously made the decision to purchase anything with an Apple logo on. Are you an Apple fan boy? You have a Mac of some discription. You bought (and probably still have) a first-gen iPod. You bought an iTouch the day it was release. You were the first in your office to get an iPhone. You were the first to upgrade to an iPhone 3G. You were the first to upgrade to an iPhone 3GS. You hammer F5 on your favourite liveblog of an Apple event. You wouldn't even consider buying a laptop from Asus, Acer or Dell (or whoever) which as powerful and costs half the price of something which has a fucking Apple logo on it.&lt;/p&gt;

&lt;p&gt;Fanboy. Acolyte. Get out. You have already made your choice. You cannot win an arguement with someone who fanatically believes they are right.&lt;/p&gt;

&lt;h1&gt;Open minded? Continue from here&lt;/h1&gt;

&lt;p&gt;For those who are prepared to broaden our horizons, there is a bewildering array of choice just around the corner. Rather than rehash other people's hard work from around the interweb, and because I'm lazy, I refer you to this article on About.com: &lt;a href="http://portables.about.com/od/otherdevices/tp/Slate_tablet_roundup.htm" target="_blank"&gt;http://portables.about.com/od/otherdevices/tp/Slate&lt;em&gt;tablet&lt;/em&gt;roundup.htm&lt;/a&gt;, which offers a succinct highlight of varous slate tablet computers. &lt;a href="http://www.engadget.com/2010/03/05/microsofts-courier-digital-journal-exclusive-pictures-and-de/" target="_blank"&gt;Engadget also has some details&lt;/a&gt; of Microsofts offering, the 'Courier', which looks promising.&lt;/p&gt;

&lt;h1&gt;In Conclusion&lt;/h1&gt;

&lt;p&gt;You do not have to kneel at the alter of the cult of Apple. You have a choice. Use it wisely.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/03/04/git-plus-dropbox/</id><title type="text">Git plus dropbox</title><summary type="html">&lt;p&gt;&lt;a title="Link to earlier blog post." href="http://temporalcohesion.co.uk/2008/08/29/source-control-using-dropbox/" target="_self"&gt;Some time ago&lt;/a&gt;, I wrote about using &lt;a title="Link to dropbox.com" href="https://www.dropbox.com/" target="_blank"&gt;Dropbox &lt;/a&gt;as a version control system. I now realise how naive� and short-sighted that thought was. At the time, it was my belief that a dropbox account could be suitable for maintaining version history, and after a fashion, it can be, because using the web client to view your files, you can see previous versions of� the files in your dropbox.&lt;/p&gt;

&lt;p&gt;However, there are problems with this approach. Consider that you've changed several files, but then you realise that the changes you have made are not good enough, or just don't work. With svn, or vss (&lt;em&gt;vomit&lt;/em&gt;), you can undo-checkout to get the previous version back, with dropbox you can roll back to the previous version - one file at a time. There is no branching, no merging, no tagging. Nothing like a traditional SCM tool should have.&lt;/p&gt;

&lt;p&gt;Dropbox is after all, essentially just a folder that is backed up "to the cloud". If we use the right tool, we can take advantage of this properly.&lt;/p&gt;

&lt;h1&gt;Enter Git&lt;/h1&gt;

&lt;p&gt;What is &lt;a title="Git SCM" href="http://git-scm.com/" target="_blank"&gt;Git&lt;/a&gt;? Well, surely you must have at least heard of Git by now? If not, I refer you to the &lt;a title="Wikipedia article about git" href="http://en.wikipedia.org/wiki/Git_(software)" target="_blank"&gt;wikipedia page&lt;/a&gt; about Git. Ok? You're back?&lt;/p&gt;

&lt;p&gt;The key aspect of Git which we can take advantage of is essentially the very nature of Git itself. Every Git clone is a full-repository, containing the full commit  history and full revision tracking capability for the project, and it does not rely on network access nor a central server.&lt;/p&gt;

&lt;p&gt;Basically, the idea is that you initialise an empty, bare repository inside your dropbox folder, and then somewhere else on your filesystem, perhaps a development folder where you store all your projects, you clone the repo from dropbox, and do all your work on that clone. Then when you call 'git push origin master', your changes are pushed into the dropbox repo, ready to be synced up on other computers you use.&lt;/p&gt;

&lt;blockquote&gt;Note: This is not a substitue for having a proper hosted Git repository, such as a project on Github, or somewhere else. However, it useful if you are working on something you aren't ready to put into the public domain, or you haven't yet decided to purchase an account on a private repository provider.&lt;/blockquote&gt;

&lt;h1&gt;Setup&lt;/h1&gt;

&lt;p&gt;Setting it up is fairly simple, but, I am going to assume that you have Dropbox and a dropbox account, Git and (if you are on Windows) GitExtensions, correctly installed already.&lt;/p&gt;

&lt;blockquote&gt;Note: I have only tested this on Windows 7, but I wouldn't expect it to not work on any other system. As always YMMV.&lt;/blockquote&gt;

&lt;p&gt;First, create a folder in your dropbox folder to house your projects, e.g. C:UsersStuartDocumentsMy Dropboxprojects or just store it in the root of your Dropbox, it's upto you. Don't forget to include quotes around any path that has a space in, or else it won't work.&lt;/p&gt;

&lt;p&gt;[sourcecode language="bash"]&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropbox/projects
$ mkdir example&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropbox/projects
$ cd example&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropboxprojects/example
$ mkdir .git&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropbox/projects/example
$ cd .git/&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropbox/projects/example/example.git
$ git init --bare
Initialized empty Git repository in c:/Users/Stuart/Documents/My Dropbox/projects/example
/example.git/&lt;/p&gt;

&lt;p&gt;[/sourcecode]&lt;/p&gt;

&lt;p&gt;Then, in your development folder clone that repo.&lt;/p&gt;

&lt;p&gt;[sourcecode language="bash"]
Stuart@LAPTOP /c/development/examples
$ git clone -v &amp;quot;C:/Users/Stuart/Documents/My Dropbox/projects/example/.git&amp;quot;
Initialized empty Git repository in c:/development/examples/example/.git/&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP /c/development/examples
$ cd example/&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP /c/development/examples/example (master)
$ touch example.txt&lt;/p&gt;

&lt;p&gt;Stuart@STUART-LAPTOP /c/development/examples/example (master)
$ git add example.txt&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP /c/development/examples/example (master)
$ git commit -m &amp;quot;Added example file to initial commit&amp;quot;
[master e9ac78d] Added example file to initial commit
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 example.txt&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP /c/development/examples/example (master)
$ git push origin master
Counting objects: 3, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 253 bytes, done.
Total 2 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (2/2), done.
To C:/Users/Stuart/Documents/My Dropbox/projects/example/.git
 1e38d4e..e9ac78d� master -&amp;gt; master
[/sourcecode]&lt;/p&gt;

&lt;p&gt;Dropbox will sync the files into the cloud. On your other computer, the git repo will sync, then you can clone it, and find that you have all your history for your project as you would expect.&lt;/p&gt;
</summary><published>2010-03-04T00:00:00Z</published><updated>2010-03-04T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/03/04/git-plus-dropbox/" /><content type="html">&lt;p&gt;&lt;a title="Link to earlier blog post." href="http://temporalcohesion.co.uk/2008/08/29/source-control-using-dropbox/" target="_self"&gt;Some time ago&lt;/a&gt;, I wrote about using &lt;a title="Link to dropbox.com" href="https://www.dropbox.com/" target="_blank"&gt;Dropbox &lt;/a&gt;as a version control system. I now realise how naive� and short-sighted that thought was. At the time, it was my belief that a dropbox account could be suitable for maintaining version history, and after a fashion, it can be, because using the web client to view your files, you can see previous versions of� the files in your dropbox.&lt;/p&gt;

&lt;p&gt;However, there are problems with this approach. Consider that you've changed several files, but then you realise that the changes you have made are not good enough, or just don't work. With svn, or vss (&lt;em&gt;vomit&lt;/em&gt;), you can undo-checkout to get the previous version back, with dropbox you can roll back to the previous version - one file at a time. There is no branching, no merging, no tagging. Nothing like a traditional SCM tool should have.&lt;/p&gt;

&lt;p&gt;Dropbox is after all, essentially just a folder that is backed up "to the cloud". If we use the right tool, we can take advantage of this properly.&lt;/p&gt;

&lt;h1&gt;Enter Git&lt;/h1&gt;

&lt;p&gt;What is &lt;a title="Git SCM" href="http://git-scm.com/" target="_blank"&gt;Git&lt;/a&gt;? Well, surely you must have at least heard of Git by now? If not, I refer you to the &lt;a title="Wikipedia article about git" href="http://en.wikipedia.org/wiki/Git_(software)" target="_blank"&gt;wikipedia page&lt;/a&gt; about Git. Ok? You're back?&lt;/p&gt;

&lt;p&gt;The key aspect of Git which we can take advantage of is essentially the very nature of Git itself. Every Git clone is a full-repository, containing the full commit  history and full revision tracking capability for the project, and it does not rely on network access nor a central server.&lt;/p&gt;

&lt;p&gt;Basically, the idea is that you initialise an empty, bare repository inside your dropbox folder, and then somewhere else on your filesystem, perhaps a development folder where you store all your projects, you clone the repo from dropbox, and do all your work on that clone. Then when you call 'git push origin master', your changes are pushed into the dropbox repo, ready to be synced up on other computers you use.&lt;/p&gt;

&lt;blockquote&gt;Note: This is not a substitue for having a proper hosted Git repository, such as a project on Github, or somewhere else. However, it useful if you are working on something you aren't ready to put into the public domain, or you haven't yet decided to purchase an account on a private repository provider.&lt;/blockquote&gt;

&lt;h1&gt;Setup&lt;/h1&gt;

&lt;p&gt;Setting it up is fairly simple, but, I am going to assume that you have Dropbox and a dropbox account, Git and (if you are on Windows) GitExtensions, correctly installed already.&lt;/p&gt;

&lt;blockquote&gt;Note: I have only tested this on Windows 7, but I wouldn't expect it to not work on any other system. As always YMMV.&lt;/blockquote&gt;

&lt;p&gt;First, create a folder in your dropbox folder to house your projects, e.g. C:UsersStuartDocumentsMy Dropboxprojects or just store it in the root of your Dropbox, it's upto you. Don't forget to include quotes around any path that has a space in, or else it won't work.&lt;/p&gt;

&lt;p&gt;[sourcecode language="bash"]&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropbox/projects
$ mkdir example&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropbox/projects
$ cd example&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropboxprojects/example
$ mkdir .git&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropbox/projects/example
$ cd .git/&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP ~/Documents/My Dropbox/projects/example/example.git
$ git init --bare
Initialized empty Git repository in c:/Users/Stuart/Documents/My Dropbox/projects/example
/example.git/&lt;/p&gt;

&lt;p&gt;[/sourcecode]&lt;/p&gt;

&lt;p&gt;Then, in your development folder clone that repo.&lt;/p&gt;

&lt;p&gt;[sourcecode language="bash"]
Stuart@LAPTOP /c/development/examples
$ git clone -v &amp;quot;C:/Users/Stuart/Documents/My Dropbox/projects/example/.git&amp;quot;
Initialized empty Git repository in c:/development/examples/example/.git/&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP /c/development/examples
$ cd example/&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP /c/development/examples/example (master)
$ touch example.txt&lt;/p&gt;

&lt;p&gt;Stuart@STUART-LAPTOP /c/development/examples/example (master)
$ git add example.txt&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP /c/development/examples/example (master)
$ git commit -m &amp;quot;Added example file to initial commit&amp;quot;
[master e9ac78d] Added example file to initial commit
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 example.txt&lt;/p&gt;

&lt;p&gt;Stuart@LAPTOP /c/development/examples/example (master)
$ git push origin master
Counting objects: 3, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 253 bytes, done.
Total 2 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (2/2), done.
To C:/Users/Stuart/Documents/My Dropbox/projects/example/.git
 1e38d4e..e9ac78d� master -&amp;gt; master
[/sourcecode]&lt;/p&gt;

&lt;p&gt;Dropbox will sync the files into the cloud. On your other computer, the git repo will sync, then you can clone it, and find that you have all your history for your project as you would expect.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2010/02/17/i-won-a-free-typemock-t-shirt-via-twitter/</id><title type="text">I won a free Typemock t-shirt via Twitter!</title><summary type="html">&lt;p&gt;Recently I &lt;a title="twitter.com/RoyOsherove" href="http://twitter.com/RoyOsherove/status/8633903086" target="_blank"&gt;re-tweeted something&lt;/a&gt; from Roy Osherove, and as a consequence, I received a nice t-shirt today all the way from Israel! As a bonus, also visible is my copy of &lt;a title="The Art of Unit Testing on Amazon.co.uk" href="http://www.amazon.co.uk/gp/product/1933988274?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=1933988274"&gt;The Art of Unit Testing&lt;/a&gt;, by Mr  Osherove.&lt;/p&gt;

&lt;p style="text-align: center;"&gt;

[caption id="attachment_151" align="aligncenter" width="300" caption="The t-shirt I won, and my copyof The Art of Unit Testing"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2010/02/tshirt_book.jpg"&gt;&lt;img class="size-medium wp-image-151 " title="tshirt_book" src="http://temporalcohesion.co.uk/wp-content/uploads/2010/02/tshirt_book-300x225.jpg" alt="&amp;quot;Legalize Unit Testing&amp;quot; t-shirt" width="300" height="225" /&gt;&lt;/a&gt;[/caption]

&lt;/p&gt;
</summary><published>2010-02-17T00:00:00Z</published><updated>2010-02-17T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2010/02/17/i-won-a-free-typemock-t-shirt-via-twitter/" /><content type="html">&lt;p&gt;Recently I &lt;a title="twitter.com/RoyOsherove" href="http://twitter.com/RoyOsherove/status/8633903086" target="_blank"&gt;re-tweeted something&lt;/a&gt; from Roy Osherove, and as a consequence, I received a nice t-shirt today all the way from Israel! As a bonus, also visible is my copy of &lt;a title="The Art of Unit Testing on Amazon.co.uk" href="http://www.amazon.co.uk/gp/product/1933988274?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=1933988274"&gt;The Art of Unit Testing&lt;/a&gt;, by Mr  Osherove.&lt;/p&gt;

&lt;p style="text-align: center;"&gt;

[caption id="attachment_151" align="aligncenter" width="300" caption="The t-shirt I won, and my copyof The Art of Unit Testing"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2010/02/tshirt_book.jpg"&gt;&lt;img class="size-medium wp-image-151 " title="tshirt_book" src="http://temporalcohesion.co.uk/wp-content/uploads/2010/02/tshirt_book-300x225.jpg" alt="&amp;quot;Legalize Unit Testing&amp;quot; t-shirt" width="300" height="225" /&gt;&lt;/a&gt;[/caption]

&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2009/11/02/more-on-the-generic-plugin-manager/</id><title type="text">More on the generic plugin manager</title><summary type="html">&lt;h4&gt;Update:&lt;/h4&gt;

&lt;p&gt;I've written some more about what I've learned whilst working on my plugin manager here: &lt;a href="http://temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/" target="_self"&gt;http://temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few months ago &lt;a title="Writing a generic plugin manager" href="http://temporalcohesion.co.uk/2009/05/25/writing-a-generic-plugin-manager-in-c/" target="_self"&gt;I wrote about&lt;/a&gt; writing a generic plugin loader/manager in C#, where I offered links to several articles and referenced a rather excellent book about C# which I had used to base my plugin loader on. I hadn't really given it much thought since then, but according to Google Analytic's, it's one of the most hit posts on my blog. Recently I had a request to release the source code.&lt;/p&gt;

&lt;p&gt;Now when I first wrote that post, I was hesitant to include any code, and I still am - not because I think there is something new and unique with what I've done - but, rather that what I have written is not terribly difficult to write. I do not mean to sound snobbish or arrogant at all, I'm just telling you how it is, all I've done is to do a bit of reflection on assemblies in a folder, and load instances of certain interfaces.&lt;/p&gt;

&lt;p&gt;Anyway...&lt;/p&gt;

&lt;p&gt;The scenario is that you want to provide a way for for 3rd parties to be able to add additional functionality to your application at run time. We need to provide a common way for 3rd parties to be able to register their new functionality into our application, in order that the user can take advantage of the exciting new feature being added to the application.&lt;/p&gt;

&lt;p&gt;Straight away, you should be thinking to yourself: Interface!&lt;/p&gt;

&lt;pre class="lang:csharp decode:1 " &gt;

public interface IPlugin
 {
 /// &amp;amp;lt;summary&amp;amp;gt;
 /// Does what ever It is.
 /// &amp;amp;lt;/summary&amp;amp;gt;
 void Do(Action it);
 }

&lt;/pre&gt;

&lt;p&gt;Anyone who now wants to create a plugin for our application must implement our IPlugin interface, as it defines the contract to which our application is bound to, in order to recognise and load plugins. Thus any assembly, that has a class which implements IPlugin is considered by our application to be a plugin which is capable of offering additional functionality.&lt;/p&gt;

&lt;p&gt;We can now attempt to load our plugins. We need to have a class which can scan a folder for assemblies, scan those assemblies for types which implement IPlugin, and then create instances of them which our application can use. Loading the assemblies is easy:&lt;/p&gt;

&lt;pre class="lang:csharp decode:1 " &gt;
public class PluginLoader&amp;amp;lt;T&amp;amp;gt;
{
 private IList&amp;amp;lt;T&amp;amp;gt; pluginsList = new List&amp;amp;lt;T&amp;amp;gt;();
 ...
}

...

public virtual IList&amp;amp;lt;T&amp;amp;gt; LoadPlugins()
 {
 foreach (string file in Directory.GetFiles(this.pluginFolderPath, &amp;amp;quot;*.dll&amp;amp;quot;, SearchOption.AllDirectories))
 {
 Assembly assembly = Assembly.LoadFile(file);
 this.LoadObjects(assembly);
 }

 return this.pluginsList;
 }
&lt;/pre&gt;

&lt;p&gt;We create a generic class, so we can use it with any type of plugin, and not just ones which implement IPlugin, then it's just simple directory recursion to load all the files in the specified folder which have a file extension of .dll. The real magic happens in the LoadObjects() method.&lt;/p&gt;

&lt;pre class="lang:csharp decode:1 " &gt;
var types = from t in assembly.GetTypes()
 where t.IsClass &amp;amp;amp;&amp;amp;amp;
 (t.GetInterface(typeof(T).Name) != null)
 select t;

 foreach (Type t in types)
 {
 T plugin = (T)assembly.CreateInstance(t.FullName, true);
 this.pluginsList.Add(plugin);
 }
&lt;/pre&gt;

&lt;p&gt;Using LINQ, we extract all the types from the assembly which are classes, which implement the interface which is a typeof(T) - T being the type we specified when we instantiated the class. You could just as easily here specify the type should inherit from some other type, and you could also check to see if a class has some assembly level attribute.&lt;/p&gt;

&lt;p&gt;Why would you want to do that? Well, we can use an assembly level attribute to decorate the plugin class with meta-data about the plugin, such as the author, a short description, the name of the plugin, and it's version.&lt;/p&gt;

&lt;pre class="lang:csharp decode:1 " &gt;
public virtual KeyValuePair&amp;amp;lt;string, List&amp;amp;lt;KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;&amp;amp;gt;&amp;amp;gt; GetPluginInformation(Type type)
 {
 var attributeInfo = from pa in type.GetCustomAttributes(false)
 where (pa.GetType() == typeof(PluginAttribute))
 select pa;

 foreach (PluginAttribute p in attributeInfo)
 {
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Author&amp;amp;quot;, p.Author));
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Description&amp;amp;quot;, p.Description));
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Name&amp;amp;quot;, p.Name));
 name = p.Name;
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Type&amp;amp;quot;, p.Type.ToString()));
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Version&amp;amp;quot;, p.Version));
 }

 this.attributeInformation = new KeyValuePair&amp;amp;lt;string, List&amp;amp;lt;KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;(name, data);

 return this.attributeInformation;
 }
&lt;/pre&gt;

&lt;p&gt;Or you could create a struct to use as a DTO for the plugin meta-data, it's up to you.&lt;/p&gt;

&lt;p&gt;I've removed all the comments and exception handling from the code I've posted purely just to save space, you'd really want to include that - especially the exception handling. But that's really all there is to it, you might want to have a property to access the actual plugin list, or return it from a LoadPlugins method, it's up to you.&lt;/p&gt;

&lt;p&gt;You'll notice I've made the methods virtual, you may want to use this class as a base class in another class. For instance I've got an additional class which inherits from my plugin loader class which does specific tasks for a particular type of plugin, and another which does different tasks for a different type of plugin.&lt;/p&gt;
</summary><published>2009-11-02T00:00:00Z</published><updated>2009-11-02T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2009/11/02/more-on-the-generic-plugin-manager/" /><content type="html">&lt;h4&gt;Update:&lt;/h4&gt;

&lt;p&gt;I've written some more about what I've learned whilst working on my plugin manager here: &lt;a href="http://temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/" target="_self"&gt;http://temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few months ago &lt;a title="Writing a generic plugin manager" href="http://temporalcohesion.co.uk/2009/05/25/writing-a-generic-plugin-manager-in-c/" target="_self"&gt;I wrote about&lt;/a&gt; writing a generic plugin loader/manager in C#, where I offered links to several articles and referenced a rather excellent book about C# which I had used to base my plugin loader on. I hadn't really given it much thought since then, but according to Google Analytic's, it's one of the most hit posts on my blog. Recently I had a request to release the source code.&lt;/p&gt;

&lt;p&gt;Now when I first wrote that post, I was hesitant to include any code, and I still am - not because I think there is something new and unique with what I've done - but, rather that what I have written is not terribly difficult to write. I do not mean to sound snobbish or arrogant at all, I'm just telling you how it is, all I've done is to do a bit of reflection on assemblies in a folder, and load instances of certain interfaces.&lt;/p&gt;

&lt;p&gt;Anyway...&lt;/p&gt;

&lt;p&gt;The scenario is that you want to provide a way for for 3rd parties to be able to add additional functionality to your application at run time. We need to provide a common way for 3rd parties to be able to register their new functionality into our application, in order that the user can take advantage of the exciting new feature being added to the application.&lt;/p&gt;

&lt;p&gt;Straight away, you should be thinking to yourself: Interface!&lt;/p&gt;

&lt;pre class="lang:csharp decode:1 " &gt;

public interface IPlugin
 {
 /// &amp;amp;lt;summary&amp;amp;gt;
 /// Does what ever It is.
 /// &amp;amp;lt;/summary&amp;amp;gt;
 void Do(Action it);
 }

&lt;/pre&gt;

&lt;p&gt;Anyone who now wants to create a plugin for our application must implement our IPlugin interface, as it defines the contract to which our application is bound to, in order to recognise and load plugins. Thus any assembly, that has a class which implements IPlugin is considered by our application to be a plugin which is capable of offering additional functionality.&lt;/p&gt;

&lt;p&gt;We can now attempt to load our plugins. We need to have a class which can scan a folder for assemblies, scan those assemblies for types which implement IPlugin, and then create instances of them which our application can use. Loading the assemblies is easy:&lt;/p&gt;

&lt;pre class="lang:csharp decode:1 " &gt;
public class PluginLoader&amp;amp;lt;T&amp;amp;gt;
{
 private IList&amp;amp;lt;T&amp;amp;gt; pluginsList = new List&amp;amp;lt;T&amp;amp;gt;();
 ...
}

...

public virtual IList&amp;amp;lt;T&amp;amp;gt; LoadPlugins()
 {
 foreach (string file in Directory.GetFiles(this.pluginFolderPath, &amp;amp;quot;*.dll&amp;amp;quot;, SearchOption.AllDirectories))
 {
 Assembly assembly = Assembly.LoadFile(file);
 this.LoadObjects(assembly);
 }

 return this.pluginsList;
 }
&lt;/pre&gt;

&lt;p&gt;We create a generic class, so we can use it with any type of plugin, and not just ones which implement IPlugin, then it's just simple directory recursion to load all the files in the specified folder which have a file extension of .dll. The real magic happens in the LoadObjects() method.&lt;/p&gt;

&lt;pre class="lang:csharp decode:1 " &gt;
var types = from t in assembly.GetTypes()
 where t.IsClass &amp;amp;amp;&amp;amp;amp;
 (t.GetInterface(typeof(T).Name) != null)
 select t;

 foreach (Type t in types)
 {
 T plugin = (T)assembly.CreateInstance(t.FullName, true);
 this.pluginsList.Add(plugin);
 }
&lt;/pre&gt;

&lt;p&gt;Using LINQ, we extract all the types from the assembly which are classes, which implement the interface which is a typeof(T) - T being the type we specified when we instantiated the class. You could just as easily here specify the type should inherit from some other type, and you could also check to see if a class has some assembly level attribute.&lt;/p&gt;

&lt;p&gt;Why would you want to do that? Well, we can use an assembly level attribute to decorate the plugin class with meta-data about the plugin, such as the author, a short description, the name of the plugin, and it's version.&lt;/p&gt;

&lt;pre class="lang:csharp decode:1 " &gt;
public virtual KeyValuePair&amp;amp;lt;string, List&amp;amp;lt;KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;&amp;amp;gt;&amp;amp;gt; GetPluginInformation(Type type)
 {
 var attributeInfo = from pa in type.GetCustomAttributes(false)
 where (pa.GetType() == typeof(PluginAttribute))
 select pa;

 foreach (PluginAttribute p in attributeInfo)
 {
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Author&amp;amp;quot;, p.Author));
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Description&amp;amp;quot;, p.Description));
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Name&amp;amp;quot;, p.Name));
 name = p.Name;
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Type&amp;amp;quot;, p.Type.ToString()));
 data.Add(new KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;(&amp;amp;quot;Version&amp;amp;quot;, p.Version));
 }

 this.attributeInformation = new KeyValuePair&amp;amp;lt;string, List&amp;amp;lt;KeyValuePair&amp;amp;lt;string, string&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;(name, data);

 return this.attributeInformation;
 }
&lt;/pre&gt;

&lt;p&gt;Or you could create a struct to use as a DTO for the plugin meta-data, it's up to you.&lt;/p&gt;

&lt;p&gt;I've removed all the comments and exception handling from the code I've posted purely just to save space, you'd really want to include that - especially the exception handling. But that's really all there is to it, you might want to have a property to access the actual plugin list, or return it from a LoadPlugins method, it's up to you.&lt;/p&gt;

&lt;p&gt;You'll notice I've made the methods virtual, you may want to use this class as a base class in another class. For instance I've got an additional class which inherits from my plugin loader class which does specific tasks for a particular type of plugin, and another which does different tasks for a different type of plugin.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2009/10/26/a-psake-build-script-example/</id><title type="text">A psake build script example</title><summary type="html">&lt;p&gt;I have recently started using psake to do some build automation at work, and I've found that there is not a great deal of information about how to write a build script using psake available on the internet. It isn't all that amazingly difficult if truth be told, however there are a couple of 'gotchas', and I would like to share what I have learned in the hopes that it benefits someone.&lt;/p&gt;

&lt;p&gt;If you have not heard of it, &lt;a title="psake project on Google Code" href="http://code.google.com/p/psake/" target="_blank"&gt;psake&lt;/a&gt; is a"...build automation tool written in PowerShell", started by &lt;a title="James Kovacs' blog" href="http://codebetter.com/blogs/james.kovacs/default.aspx" target="_blank"&gt;James Kovacs&lt;/a&gt;. With it, you can write build scripts, with which you can automate the build and deployment of your .NET project. Recently the version &lt;a title="psake 2.00 release annoucement" href="http://codebetter.com/blogs/james.kovacs/archive/2009/10/14/releasing-psake-v1-00-amp-psake-v2-00.aspx"&gt;1.00 and 2.0&lt;strong&gt; &lt;/strong&gt;0 version were released&lt;/a&gt;. Why two versions? Well, the 1.00 version is primarily for PowerShell 1.0, but psake 1.00 is being "retired". This article assumes the reader is using psake 2.01 and PowerShell 2.0.&lt;/p&gt;

&lt;p&gt;A quick note here, I should point out the primary example I based my first build script on is &lt;a title="Ayende Rahien Rhino Mocks build script" href="http://ayende.com/Blog/archive/2009/08/30/on-psake.aspx" target="_blank"&gt;Ayende Rahien's build script for Rhino Mocks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Our first psake build script&lt;/h2&gt;

&lt;p&gt;First, I have to make two assumptions:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;I have to assume that you have PowerShell installed, if you are running Vista/Windows 7 then it's installed by default, if you are on XP, then it is a manual install.&lt;/li&gt;
    &lt;li&gt;You have installed the psake module into Powershell - see the release announcement linked to above for details on how to do this.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[caption id="attachment_120" align="alignleft" width="137" caption="Example solution"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_example_solution.png"&gt;&lt;img class="size-full wp-image-120    " title="psake_example_solution" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_example_solution.png" alt="Example solution" width="137" height="161" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;With those assumptions out of the way, we are going to write a build script to automate the building of a simple C# solution, containing a Windows Forms application, and two class library assemblies.&lt;/p&gt;

&lt;p&gt;Hopefully this should be simple enough to easily follow along with what is happening in the build script, but complex enough that you can see how sophisticated your build scripts can be.&lt;/p&gt;

&lt;p&gt;You can see that I have already taken the liberty of adding an extra file to the solution, "build.ps1", this is our build script, with which we can command psake to do great things for us.&lt;/p&gt;

&lt;p&gt;With our solution setup, we can now write our first build script:&lt;/p&gt;

&lt;pre class="lang:powershell decode:1 " &gt;
properties {
 $base_dir = Resolve-Path .
 $sln_file = &amp;amp;quot;$base_dirWindowsFormsApplication.sln&amp;amp;quot;
}

Task default -depends Compile

Task Compile {
 msbuild &amp;amp;quot;$sln_file&amp;amp;quot;
}
&lt;/pre&gt;

&lt;p&gt;Open a command prompt into the directory containing the .sln file, which is where your build.ps1 script
should be, and run this command: invoke-psake .build.ps1 -taskList Compile&lt;/p&gt;

&lt;p&gt;[caption id="attachment_123" align="aligncenter" width="300" caption="psake Compile task output"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_Compile.png"&gt;&lt;img class="size-medium wp-image-123" title="psake_Compile" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_Compile-300x296.png" alt="psake Compile task output" width="300" height="296" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;You should receive some output to the console window like the above.What the script does is to work out where on the file system the script is running, and gets the path to that folder, and builds the path to the specified solution file, and runs msbuild, passing the full path to the solution file as a parameter.&lt;/p&gt;

&lt;p&gt;The script as it is has some drawbacks though. In it's current form, msbuild will only build the default configuration of the solution. What if we want to build a Debug version, or a Release version, or some other configuration we've created? Additionally, it doesn't let us specify a directory to put the built binaries, they just get put in the default locations as specified in the projects contained in the solution - what if we want to put them in a custom location?&lt;/p&gt;

&lt;p&gt;If we modify our build script slightly, we can introduce this functionality. Firstly, we need to specify some additional properties:&lt;/p&gt;

&lt;pre class="lang:powershell decode:1 " &gt;
properties {
 $base_dir = Resolve-Path .
 $build_dir = &amp;amp;quot;$base_dirbuild&amp;amp;quot;
 $sln_file = &amp;amp;quot;$base_dirWindowsFormsApplication.sln&amp;amp;quot;
 $debug_dir = &amp;amp;quot;$build_dirDebug\&amp;amp;quot;
 $release_dir = &amp;amp;quot;$build_dirRelease\&amp;amp;quot;;
}
&lt;/pre&gt;

&lt;p&gt;Notice the double backslash, msbuild requires a trailing slash when paths are specified, and it seems to require the additional backslash as well, or else it doesn't work. With those additional properties in place, we can introduce two new tasks to our build script:&lt;/p&gt;

&lt;pre class="lang:powershell decode:1 " &gt;
Task Clean {
 remove-item -force -recurse $debug_dir -ErrorAction SilentlyContinue
 remove-item -force -recurse $release_dir -ErrorAction SilentlyContinue
}

Task Init -depends Clean {
 new-item $debug_dir -itemType directory
 new-item $release_dir -itemType directory
}
&lt;/pre&gt;

&lt;p&gt;Powershell's easy to read syntax should make it easy to follow with what is happening now. In the Clean task, we forcefully and recursively remove any files and the folder from the specified path, and if there are any errors then they are not displayed. Now that we know that those folders are going to be cleaned and created, we can create two further tasks, where we can create Debug and Release versions of our solution:&lt;/p&gt;

&lt;pre class="lang:powershell decode:1 " &gt;
Task Debug -depends Init {
 msbuild $sln_file &amp;amp;quot;/nologo&amp;amp;quot; &amp;amp;quot;/t:Rebuild&amp;amp;quot; &amp;amp;quot;/p:Configuration=Debug&amp;amp;quot; &amp;amp;quot;/p:OutDir=&amp;amp;quot;&amp;amp;quot;$debug_dir&amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
}

Task Release -depends Init {
 msbuild $sln_file &amp;amp;quot;/nologo&amp;amp;quot; &amp;amp;quot;/t:Rebuild&amp;amp;quot; &amp;amp;quot;/p:Configuration=Release&amp;amp;quot; &amp;amp;quot;/p:OutDir=&amp;amp;quot;&amp;amp;quot;$release_dir&amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
&lt;/pre&gt;

&lt;p&gt;Again, the syntax here is relatively straightforward to follow along with, we execute msbuild, passing it the solution file to build, specify not to show the logo (suppressing the output of "copyright microsoft msbuild etc), tell it to execute the rebuild target and to build the Debug configuration, copying the output to the specified debug directory. Notice that that there are no spaces in the paramters that we pass to msbuild. For example, if we passed the parameters like this: "/p:Configuration=Release /p:OutDir=""$release_dir""", then it would fail and we would get a msbuild parse error saying it was invalid.&lt;/p&gt;

&lt;p&gt;[caption id="attachment_129" align="alignleft" width="196" caption="Build script output for Debug task"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_example_debug.png"&gt;&lt;img class="size-medium wp-image-129" title="psake_example_debug" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_example_debug-196x300.png" alt="Build script output for Debug task" width="196" height="300" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In a relatively short amount of code, less than 30 lines, we have accomplished quite a lot. We can now issue the command: invoke-psake .build.ps1 -taskList Debug, and psake will automatically clean the output folders, do a full rebuild of the Debug configuration and copy the output to a custom location on our filesystem. What's more, the build script we have written is small, compact, easy to read, easy to maintain and easy to build/extend upon in the future.&lt;/p&gt;

&lt;p&gt;As this is getting a bit long already, I'm going to cut things short here, however, there are some additional things that you can do as part of the build script that are very nice, such as automatically versioning the assembly before you do the full build. If you take a look at &lt;a title="Ayende Rahien Rhino Mocks build script" href="http://ayende.com/Blog/archive/2009/08/30/on-psake.aspx" target="_blank"&gt;Ayende Rahien's example&lt;/a&gt; from Rhino Mocks, that is covered there.&lt;/p&gt;

&lt;p&gt;Also in the new version of psake, there are pre and post conditions and actions that you can add onto your tasks, although I haven't had the opportunity to use them yet. I'll try to cover those in a future blog post though.&lt;/p&gt;
</summary><published>2009-10-26T00:00:00Z</published><updated>2009-10-26T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2009/10/26/a-psake-build-script-example/" /><content type="html">&lt;p&gt;I have recently started using psake to do some build automation at work, and I've found that there is not a great deal of information about how to write a build script using psake available on the internet. It isn't all that amazingly difficult if truth be told, however there are a couple of 'gotchas', and I would like to share what I have learned in the hopes that it benefits someone.&lt;/p&gt;

&lt;p&gt;If you have not heard of it, &lt;a title="psake project on Google Code" href="http://code.google.com/p/psake/" target="_blank"&gt;psake&lt;/a&gt; is a"...build automation tool written in PowerShell", started by &lt;a title="James Kovacs' blog" href="http://codebetter.com/blogs/james.kovacs/default.aspx" target="_blank"&gt;James Kovacs&lt;/a&gt;. With it, you can write build scripts, with which you can automate the build and deployment of your .NET project. Recently the version &lt;a title="psake 2.00 release annoucement" href="http://codebetter.com/blogs/james.kovacs/archive/2009/10/14/releasing-psake-v1-00-amp-psake-v2-00.aspx"&gt;1.00 and 2.0&lt;strong&gt; &lt;/strong&gt;0 version were released&lt;/a&gt;. Why two versions? Well, the 1.00 version is primarily for PowerShell 1.0, but psake 1.00 is being "retired". This article assumes the reader is using psake 2.01 and PowerShell 2.0.&lt;/p&gt;

&lt;p&gt;A quick note here, I should point out the primary example I based my first build script on is &lt;a title="Ayende Rahien Rhino Mocks build script" href="http://ayende.com/Blog/archive/2009/08/30/on-psake.aspx" target="_blank"&gt;Ayende Rahien's build script for Rhino Mocks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Our first psake build script&lt;/h2&gt;

&lt;p&gt;First, I have to make two assumptions:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;I have to assume that you have PowerShell installed, if you are running Vista/Windows 7 then it's installed by default, if you are on XP, then it is a manual install.&lt;/li&gt;
    &lt;li&gt;You have installed the psake module into Powershell - see the release announcement linked to above for details on how to do this.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[caption id="attachment_120" align="alignleft" width="137" caption="Example solution"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_example_solution.png"&gt;&lt;img class="size-full wp-image-120    " title="psake_example_solution" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_example_solution.png" alt="Example solution" width="137" height="161" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;With those assumptions out of the way, we are going to write a build script to automate the building of a simple C# solution, containing a Windows Forms application, and two class library assemblies.&lt;/p&gt;

&lt;p&gt;Hopefully this should be simple enough to easily follow along with what is happening in the build script, but complex enough that you can see how sophisticated your build scripts can be.&lt;/p&gt;

&lt;p&gt;You can see that I have already taken the liberty of adding an extra file to the solution, "build.ps1", this is our build script, with which we can command psake to do great things for us.&lt;/p&gt;

&lt;p&gt;With our solution setup, we can now write our first build script:&lt;/p&gt;

&lt;pre class="lang:powershell decode:1 " &gt;
properties {
 $base_dir = Resolve-Path .
 $sln_file = &amp;amp;quot;$base_dirWindowsFormsApplication.sln&amp;amp;quot;
}

Task default -depends Compile

Task Compile {
 msbuild &amp;amp;quot;$sln_file&amp;amp;quot;
}
&lt;/pre&gt;

&lt;p&gt;Open a command prompt into the directory containing the .sln file, which is where your build.ps1 script
should be, and run this command: invoke-psake .build.ps1 -taskList Compile&lt;/p&gt;

&lt;p&gt;[caption id="attachment_123" align="aligncenter" width="300" caption="psake Compile task output"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_Compile.png"&gt;&lt;img class="size-medium wp-image-123" title="psake_Compile" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_Compile-300x296.png" alt="psake Compile task output" width="300" height="296" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;You should receive some output to the console window like the above.What the script does is to work out where on the file system the script is running, and gets the path to that folder, and builds the path to the specified solution file, and runs msbuild, passing the full path to the solution file as a parameter.&lt;/p&gt;

&lt;p&gt;The script as it is has some drawbacks though. In it's current form, msbuild will only build the default configuration of the solution. What if we want to build a Debug version, or a Release version, or some other configuration we've created? Additionally, it doesn't let us specify a directory to put the built binaries, they just get put in the default locations as specified in the projects contained in the solution - what if we want to put them in a custom location?&lt;/p&gt;

&lt;p&gt;If we modify our build script slightly, we can introduce this functionality. Firstly, we need to specify some additional properties:&lt;/p&gt;

&lt;pre class="lang:powershell decode:1 " &gt;
properties {
 $base_dir = Resolve-Path .
 $build_dir = &amp;amp;quot;$base_dirbuild&amp;amp;quot;
 $sln_file = &amp;amp;quot;$base_dirWindowsFormsApplication.sln&amp;amp;quot;
 $debug_dir = &amp;amp;quot;$build_dirDebug\&amp;amp;quot;
 $release_dir = &amp;amp;quot;$build_dirRelease\&amp;amp;quot;;
}
&lt;/pre&gt;

&lt;p&gt;Notice the double backslash, msbuild requires a trailing slash when paths are specified, and it seems to require the additional backslash as well, or else it doesn't work. With those additional properties in place, we can introduce two new tasks to our build script:&lt;/p&gt;

&lt;pre class="lang:powershell decode:1 " &gt;
Task Clean {
 remove-item -force -recurse $debug_dir -ErrorAction SilentlyContinue
 remove-item -force -recurse $release_dir -ErrorAction SilentlyContinue
}

Task Init -depends Clean {
 new-item $debug_dir -itemType directory
 new-item $release_dir -itemType directory
}
&lt;/pre&gt;

&lt;p&gt;Powershell's easy to read syntax should make it easy to follow with what is happening now. In the Clean task, we forcefully and recursively remove any files and the folder from the specified path, and if there are any errors then they are not displayed. Now that we know that those folders are going to be cleaned and created, we can create two further tasks, where we can create Debug and Release versions of our solution:&lt;/p&gt;

&lt;pre class="lang:powershell decode:1 " &gt;
Task Debug -depends Init {
 msbuild $sln_file &amp;amp;quot;/nologo&amp;amp;quot; &amp;amp;quot;/t:Rebuild&amp;amp;quot; &amp;amp;quot;/p:Configuration=Debug&amp;amp;quot; &amp;amp;quot;/p:OutDir=&amp;amp;quot;&amp;amp;quot;$debug_dir&amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
}

Task Release -depends Init {
 msbuild $sln_file &amp;amp;quot;/nologo&amp;amp;quot; &amp;amp;quot;/t:Rebuild&amp;amp;quot; &amp;amp;quot;/p:Configuration=Release&amp;amp;quot; &amp;amp;quot;/p:OutDir=&amp;amp;quot;&amp;amp;quot;$release_dir&amp;amp;quot;&amp;amp;quot;&amp;amp;quot;
&lt;/pre&gt;

&lt;p&gt;Again, the syntax here is relatively straightforward to follow along with, we execute msbuild, passing it the solution file to build, specify not to show the logo (suppressing the output of "copyright microsoft msbuild etc), tell it to execute the rebuild target and to build the Debug configuration, copying the output to the specified debug directory. Notice that that there are no spaces in the paramters that we pass to msbuild. For example, if we passed the parameters like this: "/p:Configuration=Release /p:OutDir=""$release_dir""", then it would fail and we would get a msbuild parse error saying it was invalid.&lt;/p&gt;

&lt;p&gt;[caption id="attachment_129" align="alignleft" width="196" caption="Build script output for Debug task"]&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_example_debug.png"&gt;&lt;img class="size-medium wp-image-129" title="psake_example_debug" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/psake_example_debug-196x300.png" alt="Build script output for Debug task" width="196" height="300" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In a relatively short amount of code, less than 30 lines, we have accomplished quite a lot. We can now issue the command: invoke-psake .build.ps1 -taskList Debug, and psake will automatically clean the output folders, do a full rebuild of the Debug configuration and copy the output to a custom location on our filesystem. What's more, the build script we have written is small, compact, easy to read, easy to maintain and easy to build/extend upon in the future.&lt;/p&gt;

&lt;p&gt;As this is getting a bit long already, I'm going to cut things short here, however, there are some additional things that you can do as part of the build script that are very nice, such as automatically versioning the assembly before you do the full build. If you take a look at &lt;a title="Ayende Rahien Rhino Mocks build script" href="http://ayende.com/Blog/archive/2009/08/30/on-psake.aspx" target="_blank"&gt;Ayende Rahien's example&lt;/a&gt; from Rhino Mocks, that is covered there.&lt;/p&gt;

&lt;p&gt;Also in the new version of psake, there are pre and post conditions and actions that you can add onto your tasks, although I haven't had the opportunity to use them yet. I'll try to cover those in a future blog post though.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2009/10/17/my-recommended-reading-list/</id><title type="text">My recommended reading list</title><summary type="html">&lt;p&gt;Love him or hate him, several years ago, Jeff Atwood (of Codinghorror.com infamy and the really rather awesome StackOverflow.com) &lt;a title="Recommended reading on codinghorror.com" href="http://www.codinghorror.com/blog/archives/000020.html" target="_blank"&gt;posted on his blog&lt;/a&gt; a recommended reading list for developers. He has since become a sort of mini internet programming celebrity. Since imitation is the greatest form of flattery, I present to you my own list of recommended reading.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p&gt;[caption id="attachment_100" align="alignleft" width="131" caption="Code Complete 2nd Edition"]&lt;a href="http://www.amazon.co.uk/gp/product/0735619670?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0735619670"&gt;&lt;img class="size-full wp-image-100 " title="Code Complete 2nd Edition" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/51seLiYuURL._SL160_.jpg" alt="Code Complete 2nd Edition" width="131" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;strong&gt;Code Complete 2nd Edition&lt;/strong&gt;, by &lt;a title="SteveMcConnell.com" href="http://www.stevemcconnell.com/" target="_blank"&gt;Steve McConnel&lt;/a&gt; should be recommended reading on software engineering degrees at Universities the world over. It is a classic book about the software industry. McConnel makes the distinction between average programmers, who are happy to go through the motions of churning out (usually terrible) code and collecting their wages; and above average programmers, who continually seek to improve their base knowledge, actively improving their skills, who write solid, well designed and easily maintainable code. I think this was the book that really changed my mindset about being a programmer, about being proud of the work I do and the programs I write and maintain.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p&gt;[caption id="attachment_103" align="alignright" width="121" caption="Working Effectively with Legacy Code"]&lt;a href="http://www.amazon.co.uk/gp/product/0131177052?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0131177052"&gt;&lt;img class="size-full wp-image-103  " title="Working Effectively with Legacy Code" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/51TG9F1B8AL._SL160_.jpg" alt="Working Effectively with Legacy Code" width="121" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;strong&gt;Working Effectively with Legacy Code&lt;/strong&gt;, by &lt;a title="MichaelFeathers.com" href="http://www.michaelfeathers.com/" target="_blank"&gt;Michael Feathers&lt;/a&gt; is another classic book, and another which I believe should be recommended reading on all University software engineering degrees. The reason I would recommended this book to any aspiring developer is that, more than likely they are going to be working with legacy code. I would say that 95% of the code I work with on a daily basis is legacy code, although that figure is slowly improving, thanks in a large part to the skills and knowledge I've gained from this book.� Feathers' defines legacy code as that which does not have unit tests. I would also add that most legacy code is often poorly designed, with no comments and is usually incredibly difficult to maintain. The book is split into three parts, the first part being about how you can bring about change in your legacy code base (and legacy developers!); the second part is like an FAQ, which links techniques together in a way to address common problems; the third part is a reference of the different dependency breaking techniques that can be employed to get your legacy code under test and under control.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p&gt;[caption id="attachment_104" align="alignleft" width="128" caption="The Art of Unit Testing"]&lt;a href="http://www.amazon.co.uk/gp/product/1933988274?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=1933988274"&gt;&lt;img class="size-full wp-image-104  " title="The Art of Unit Testing" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/51PwNFas0pL._SL160_.jpg" alt="The Art of Unit Testing" width="128" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;strong&gt;The Art of Unit Testing&lt;/strong&gt;, by &lt;a title="ISerializable - Roy Osherove's Blog" href="http://weblogs.asp.net/ROsherove/" target="_blank"&gt;Roy Osherove&lt;/a&gt;, is an excellent book, full of practical advice about unit testing. The book covers everything, from why you want to unit test your code, to how you can unit test code. Even if, as I had, you have written unit tests before, then you can still learn something from this book. Indeed there were several patterns on how to approach particular problems that I'd not even considered before. Also, I had never really gotten my head around using a mock object framework as part of my unit tests, but this book explains and demonstrates in a clear and concise manner, exactly how you can leverage your mock object framework of choice for your benefit. One minor criticism that I have though, is that I feel there is a certain element of bias toward &lt;a title="Typemock Isolator, mock object framework" href="http://learn.typemock.com/" target="_blank"&gt;Typemock Isolator&lt;/a&gt; - Osherove is a chief architect at Typemock.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p&gt;[caption id="attachment_109" align="alignright" width="118" caption="Holub on Patterns"]&lt;a href="http://www.amazon.co.uk/gp/product/159059388X?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=159059388X"&gt;&lt;img class="size-full wp-image-109  " title="Holub on Patterns" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/51DbmGYuYuL._SL160_.jpg" alt="Holub on Patterns" width="118" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Holub on Patterns&lt;/strong&gt;, by &lt;a title="Holub.com" href="http://www.holub.com/" target="_blank"&gt;Allen Holub&lt;/a&gt;, is another excellent book, about software design.� Design patterns offer an excellent way of not re-inventing the wheel, and Holub offers an entertaining and insightful tour of the majority of the &lt;a title="The Famous Gang of Four book" href="http://www.temporalcohesion.co.uk/href=&amp;quot;http://www.amazon.co.uk/gp/product/0201633612?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0201633612&amp;quot;" target="_blank"&gt;Gang of Four&lt;/a&gt; patterns, and offers real world scenarios in which you would use them. The book is very opinionated, but this is not a bad thing, indeed it is refreshing to read as Holub is obviously very passionate about the subject. It certainly opened my eyes into the world of design patterns, as I'm one of these who finds concrete, interesting examples an excellent tool for learning, and I've always found the Gang of Four book rather dry.&lt;/p&gt;

&lt;p&gt;[caption id="attachment_114" align="alignleft" width="128" caption="C# in Depth"]&lt;a href="http://www.amazon.co.uk/gp/product/1933988363?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=1933988363"&gt;&lt;img class="size-full wp-image-114  " title="C# in Depth" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/41-I8sBZWSL._SL160_.jpg" alt="C# in Depth" width="128" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C# In Depth&lt;/strong&gt;, by &lt;a title="Jon Skeet's Coding Blog" href="http://msmvps.com/blogs/jon_skeet/default.aspx" target="_blank"&gt;Jon Skeet&lt;/a&gt; is an excellent book about the C# programming language. If you want to understand something about C#, and I mean really, truly understand why the language does what it does, then I suggest that you read this book. The book is clear and straightforward, with excellent examples. Honestly if most of the people posting C# questions on stackoverflow.com read this book, then I suspect the number of questions would stop increasing at the current rate.&lt;/p&gt;
</summary><published>2009-10-16T23:00:00Z</published><updated>2009-10-16T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2009/10/17/my-recommended-reading-list/" /><content type="html">&lt;p&gt;Love him or hate him, several years ago, Jeff Atwood (of Codinghorror.com infamy and the really rather awesome StackOverflow.com) &lt;a title="Recommended reading on codinghorror.com" href="http://www.codinghorror.com/blog/archives/000020.html" target="_blank"&gt;posted on his blog&lt;/a&gt; a recommended reading list for developers. He has since become a sort of mini internet programming celebrity. Since imitation is the greatest form of flattery, I present to you my own list of recommended reading.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p&gt;[caption id="attachment_100" align="alignleft" width="131" caption="Code Complete 2nd Edition"]&lt;a href="http://www.amazon.co.uk/gp/product/0735619670?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0735619670"&gt;&lt;img class="size-full wp-image-100 " title="Code Complete 2nd Edition" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/51seLiYuURL._SL160_.jpg" alt="Code Complete 2nd Edition" width="131" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;strong&gt;Code Complete 2nd Edition&lt;/strong&gt;, by &lt;a title="SteveMcConnell.com" href="http://www.stevemcconnell.com/" target="_blank"&gt;Steve McConnel&lt;/a&gt; should be recommended reading on software engineering degrees at Universities the world over. It is a classic book about the software industry. McConnel makes the distinction between average programmers, who are happy to go through the motions of churning out (usually terrible) code and collecting their wages; and above average programmers, who continually seek to improve their base knowledge, actively improving their skills, who write solid, well designed and easily maintainable code. I think this was the book that really changed my mindset about being a programmer, about being proud of the work I do and the programs I write and maintain.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p&gt;[caption id="attachment_103" align="alignright" width="121" caption="Working Effectively with Legacy Code"]&lt;a href="http://www.amazon.co.uk/gp/product/0131177052?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0131177052"&gt;&lt;img class="size-full wp-image-103  " title="Working Effectively with Legacy Code" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/51TG9F1B8AL._SL160_.jpg" alt="Working Effectively with Legacy Code" width="121" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;strong&gt;Working Effectively with Legacy Code&lt;/strong&gt;, by &lt;a title="MichaelFeathers.com" href="http://www.michaelfeathers.com/" target="_blank"&gt;Michael Feathers&lt;/a&gt; is another classic book, and another which I believe should be recommended reading on all University software engineering degrees. The reason I would recommended this book to any aspiring developer is that, more than likely they are going to be working with legacy code. I would say that 95% of the code I work with on a daily basis is legacy code, although that figure is slowly improving, thanks in a large part to the skills and knowledge I've gained from this book.� Feathers' defines legacy code as that which does not have unit tests. I would also add that most legacy code is often poorly designed, with no comments and is usually incredibly difficult to maintain. The book is split into three parts, the first part being about how you can bring about change in your legacy code base (and legacy developers!); the second part is like an FAQ, which links techniques together in a way to address common problems; the third part is a reference of the different dependency breaking techniques that can be employed to get your legacy code under test and under control.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p&gt;[caption id="attachment_104" align="alignleft" width="128" caption="The Art of Unit Testing"]&lt;a href="http://www.amazon.co.uk/gp/product/1933988274?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=1933988274"&gt;&lt;img class="size-full wp-image-104  " title="The Art of Unit Testing" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/51PwNFas0pL._SL160_.jpg" alt="The Art of Unit Testing" width="128" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;strong&gt;The Art of Unit Testing&lt;/strong&gt;, by &lt;a title="ISerializable - Roy Osherove's Blog" href="http://weblogs.asp.net/ROsherove/" target="_blank"&gt;Roy Osherove&lt;/a&gt;, is an excellent book, full of practical advice about unit testing. The book covers everything, from why you want to unit test your code, to how you can unit test code. Even if, as I had, you have written unit tests before, then you can still learn something from this book. Indeed there were several patterns on how to approach particular problems that I'd not even considered before. Also, I had never really gotten my head around using a mock object framework as part of my unit tests, but this book explains and demonstrates in a clear and concise manner, exactly how you can leverage your mock object framework of choice for your benefit. One minor criticism that I have though, is that I feel there is a certain element of bias toward &lt;a title="Typemock Isolator, mock object framework" href="http://learn.typemock.com/" target="_blank"&gt;Typemock Isolator&lt;/a&gt; - Osherove is a chief architect at Typemock.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;/p&gt;

&lt;p&gt;[caption id="attachment_109" align="alignright" width="118" caption="Holub on Patterns"]&lt;a href="http://www.amazon.co.uk/gp/product/159059388X?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=159059388X"&gt;&lt;img class="size-full wp-image-109  " title="Holub on Patterns" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/51DbmGYuYuL._SL160_.jpg" alt="Holub on Patterns" width="118" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Holub on Patterns&lt;/strong&gt;, by &lt;a title="Holub.com" href="http://www.holub.com/" target="_blank"&gt;Allen Holub&lt;/a&gt;, is another excellent book, about software design.� Design patterns offer an excellent way of not re-inventing the wheel, and Holub offers an entertaining and insightful tour of the majority of the &lt;a title="The Famous Gang of Four book" href="http://www.temporalcohesion.co.uk/href=&amp;quot;http://www.amazon.co.uk/gp/product/0201633612?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0201633612&amp;quot;" target="_blank"&gt;Gang of Four&lt;/a&gt; patterns, and offers real world scenarios in which you would use them. The book is very opinionated, but this is not a bad thing, indeed it is refreshing to read as Holub is obviously very passionate about the subject. It certainly opened my eyes into the world of design patterns, as I'm one of these who finds concrete, interesting examples an excellent tool for learning, and I've always found the Gang of Four book rather dry.&lt;/p&gt;

&lt;p&gt;[caption id="attachment_114" align="alignleft" width="128" caption="C# in Depth"]&lt;a href="http://www.amazon.co.uk/gp/product/1933988363?ie=UTF8&amp;amp;tag=tempocohes-21&amp;amp;linkCode=as2&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=1933988363"&gt;&lt;img class="size-full wp-image-114  " title="C# in Depth" src="http://temporalcohesion.co.uk/wp-content/uploads/2009/10/41-I8sBZWSL._SL160_.jpg" alt="C# in Depth" width="128" height="160" /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C# In Depth&lt;/strong&gt;, by &lt;a title="Jon Skeet's Coding Blog" href="http://msmvps.com/blogs/jon_skeet/default.aspx" target="_blank"&gt;Jon Skeet&lt;/a&gt; is an excellent book about the C# programming language. If you want to understand something about C#, and I mean really, truly understand why the language does what it does, then I suggest that you read this book. The book is clear and straightforward, with excellent examples. Honestly if most of the people posting C# questions on stackoverflow.com read this book, then I suspect the number of questions would stop increasing at the current rate.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2009/07/27/bending-jquery-to-my-will/</id><title type="text">Bending jQuery to my will</title><summary type="html">&lt;p&gt;Like many people, I have a vanity domain name, www.stuart-grassie.co.uk. Many moons ago I used to host my blog on there, but for a variety of reasons I bought this domain and switched my blog here. So I put up a basic index page, listing a few interesting factoids about me, and what I do. When I say a "basic" page, I mean basic - black text on a white background, almost as if it was just few words typed into a text file - although there was semantically correct and valid xhtml behind it.&lt;/p&gt;

&lt;p&gt;The other day I came across a link,&lt;a title="30 Examples of Extreme Minimalism in web design" href="http://singlefunction.com/30-examples-of-extreme-minimalism-in-web-design/" target="_blank"&gt; 30 Examples of Extreme Minimalism in web design&lt;/a&gt; and it inspired me to do a small make-over on my vanity domain name site. Which I think has turned out fairly ok. Athough that isn't the point of this blog post.&lt;/p&gt;

&lt;p&gt;As there is not a massive amount of information (after all it's just a "here I am, here's some information about me, here's how you can contact me" site, all of it is on one page. I'm using jQuery to hide everything, until the user clicks a link to see the information they want. I used jQuery UI, to use a couple of basic slide in/out effects. The actual effects are "clip" and "blind", using "toggle" to turn them on/off. All the other content apart from the "frontpage" is hidden.&lt;/p&gt;

&lt;p&gt;Initially, I had it working so that you could click a link, and the requested "page" would transition into view, the "frontpage" would transition out of view, then I had a &amp;lt;span&amp;gt;&amp;lt;back&amp;lt;/span&amp;gt;, which I made react to mouse clicks, using jQuery, and you could then click back to the "frontpage".&lt;/p&gt;

&lt;pre lang="html"&gt;
&lt;div id="main"&gt;
Maybe you would like to read this &lt;a id="examplelink" href="http://www.temporalcohesion.co.uk/#example"&gt;example&lt;/a&gt; page.&lt;/div&gt;
&lt;div id="example"&gt;

This is some example content.&lt;/div&gt;&lt;/pre&gt;

&lt;pre lang="javascript"&gt;$(document).ready(function(){
    $("#example").hide(); // Hide the example on page load
});

// detect when the link is clicked, and toggle the two&lt;div&gt;'s
$(function() {
    $("#examplelink").click(function() {
    $("#example").toggle("clip", {}, 500);
        $("#main").toggle("blind", {}, 500);
    return false;
    });
});&lt;/pre&gt;

&lt;p&gt;In my excitement to get this learned and done (I've never used jQuery before), I've lost the original code, but that's essentially what I had, without the code to detect when the fake back button &lt;span&gt;back&lt;/span&gt; is clicked - all it did was to run the toggle again, which returned the user to the "frontpage". I had to to do it this way, because the browser forward/back doesn't work.&lt;/p&gt;

&lt;p&gt;Clearly, this is not an ideal situation, because it has broken one of the cardinal web design guidelines, by breaking the users browser, by rendering the forward/back buttons inoperable.&lt;/p&gt;

&lt;p&gt;I'll show you what I did next time.&lt;/p&gt;
</summary><published>2009-07-26T23:00:00Z</published><updated>2009-07-26T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2009/07/27/bending-jquery-to-my-will/" /><content type="html">&lt;p&gt;Like many people, I have a vanity domain name, www.stuart-grassie.co.uk. Many moons ago I used to host my blog on there, but for a variety of reasons I bought this domain and switched my blog here. So I put up a basic index page, listing a few interesting factoids about me, and what I do. When I say a "basic" page, I mean basic - black text on a white background, almost as if it was just few words typed into a text file - although there was semantically correct and valid xhtml behind it.&lt;/p&gt;

&lt;p&gt;The other day I came across a link,&lt;a title="30 Examples of Extreme Minimalism in web design" href="http://singlefunction.com/30-examples-of-extreme-minimalism-in-web-design/" target="_blank"&gt; 30 Examples of Extreme Minimalism in web design&lt;/a&gt; and it inspired me to do a small make-over on my vanity domain name site. Which I think has turned out fairly ok. Athough that isn't the point of this blog post.&lt;/p&gt;

&lt;p&gt;As there is not a massive amount of information (after all it's just a "here I am, here's some information about me, here's how you can contact me" site, all of it is on one page. I'm using jQuery to hide everything, until the user clicks a link to see the information they want. I used jQuery UI, to use a couple of basic slide in/out effects. The actual effects are "clip" and "blind", using "toggle" to turn them on/off. All the other content apart from the "frontpage" is hidden.&lt;/p&gt;

&lt;p&gt;Initially, I had it working so that you could click a link, and the requested "page" would transition into view, the "frontpage" would transition out of view, then I had a &amp;lt;span&amp;gt;&amp;lt;back&amp;lt;/span&amp;gt;, which I made react to mouse clicks, using jQuery, and you could then click back to the "frontpage".&lt;/p&gt;

&lt;pre lang="html"&gt;
&lt;div id="main"&gt;
Maybe you would like to read this &lt;a id="examplelink" href="http://www.temporalcohesion.co.uk/#example"&gt;example&lt;/a&gt; page.&lt;/div&gt;
&lt;div id="example"&gt;

This is some example content.&lt;/div&gt;&lt;/pre&gt;

&lt;pre lang="javascript"&gt;$(document).ready(function(){
    $("#example").hide(); // Hide the example on page load
});

// detect when the link is clicked, and toggle the two&lt;div&gt;'s
$(function() {
    $("#examplelink").click(function() {
    $("#example").toggle("clip", {}, 500);
        $("#main").toggle("blind", {}, 500);
    return false;
    });
});&lt;/pre&gt;

&lt;p&gt;In my excitement to get this learned and done (I've never used jQuery before), I've lost the original code, but that's essentially what I had, without the code to detect when the fake back button &lt;span&gt;back&lt;/span&gt; is clicked - all it did was to run the toggle again, which returned the user to the "frontpage". I had to to do it this way, because the browser forward/back doesn't work.&lt;/p&gt;

&lt;p&gt;Clearly, this is not an ideal situation, because it has broken one of the cardinal web design guidelines, by breaking the users browser, by rendering the forward/back buttons inoperable.&lt;/p&gt;

&lt;p&gt;I'll show you what I did next time.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2009/07/25/adding-logging-to-an-application/</id><title type="text">Adding logging to an application</title><summary type="html">&lt;p&gt;Nearly every application I have ever used has produced some sort of log output, usually to record details of exactly what the application was doing when an error was encountered. To be perfectly truthful, it is not something that I have ever really given very much consideration to in either my own or work applications, there have always been more pressing things to attend to, such as meeting (unrealistic) deadlines, or implementing some interesting new feature. I've used log4j before in a work application, mostly because someone else had already done all the configuration.&lt;/p&gt;

&lt;p&gt;However, the application that is currently occupying the main focus of my attention at work had (almost) no logging in it what-s0-ever, but given the nature of the application, it can be very difficult to debug exactly what is happening internally using breakpoints. Again, the nature of the application doesn't really lend itself well to showing MessageBox's all the over the place.&lt;/p&gt;

&lt;pre lang="csharp"&gt;MessageBox.Show("Log message");

// or..

Console.WriteLine("Log message");&lt;/pre&gt;

&lt;p&gt;How many times have you done that, or the equivalent, in an application? If you are like me, then you'll have done it hundreds of times, probably in the same application. It's really quick and easy to do, and can be very useful. You just have to remember to take it out of the Release build. What a pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A better way&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using a proper logging library (as I have now discovered) allows you much greater freedom. Freedom to not have to (overly) worry about leaving in &lt;em&gt;Log.Debug("Some message")&lt;/em&gt; all over the code. Freedom to be able to configure what is logged, where it is logged to and how it is displayed. Freedom to receive concrete data on how your application is behaving in the real world, which will enable you to find and fix bugs faster than you would have thought possible.&lt;/p&gt;

&lt;p&gt;There are a multitude of logging libraries available:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Write your own&lt;/li&gt;
    &lt;li&gt;System.Diagnostics.Trace and System.Diagnostics.Debug&lt;/li&gt;
    &lt;li&gt;The Logging Application block from the &lt;a title="Microsoft Enterprise Library" href="http://www.codeplex.com/entlib" target="_self"&gt;Enterprise Library&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Bitfactory.Logging from &lt;a title="Bitfactory.Logging from theobjectguy" href="http://www.theobjectguy.com/dotnetlog/" target="_blank"&gt;http://www.theobjectguy.com/dotnetlog/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title="NLog C# logging library" href="http://csharp-source.net/open-source/logging/nlog" target="_blank"&gt;NLog&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; Plus many more that you can find via google or on Stack Overflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, while it would probably be an interesting exercise to write a small logging library, the world doesn't need another one, so I immediately discounted that option.&lt;/p&gt;

&lt;p&gt;I've used System.Diagnostics here and there, and an ex-colleague wrote a small logging library based around using Trace and Debug, but that is getting dangerously close to writing your own logging library, so again that's out.&lt;/p&gt;

&lt;p&gt;The Logging application block from the Enterprise Library just seems too weighty, and too much of a pain to configure (I can probably be proved wrong though), so I discounted that as well.&lt;/p&gt;

&lt;p&gt;The object guy's logging library seems pretty good, but the documentation and examples kind of suck, and it doesn't look like it's been updated in a while, so after playing with it a little bit (and not really liking it all that much to be perfectly honest), I discounted that as well, although it does seem to have a lot of fans on Stack Overflow.&lt;/p&gt;

&lt;p&gt;NLog has plenty of documentation, and seems pretty straightforward to use, and it too has a lot of fans on Stack Overflow, but again, it's not been updated in a while, so I discounted that too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Log4Net to the rescue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Log4Net is part of the &lt;a title="Apache Logging Services" href="http://logging.apache.org/" target="_self"&gt;Apache Logging Services&lt;/a&gt; project, along with Log4j, and Log4Cxx. It is a C# port of Log4j, and works amazingly well. I am not going to write about how to set it up and configure it, as &lt;a title="log4net info on beefycode.com" href="http://www.beefycode.com/category/log4net.aspx"&gt;others have done that already&lt;/a&gt;, and the documentation is excellent.&lt;/p&gt;

&lt;p&gt;I've read here and there on some blogs, a few message boards and some email lists, that log4net is difficult and time consuming to set-up, and that it is hard to use. Which is nonsense, because after ten minutes (which included downloading the latest version) I had my first small test application up and running and outputting debug messages to the Output window in Visual Studio. Pretty swish indeed.� I did spend some time reading about the best ways to use log4net, and I still do, but I didn't find the initial set-up to be inordinately difficult at all.&lt;/p&gt;

&lt;p&gt;On the whole, I am impressed with it's ease of use, I'm now starting to use it in my own personal projects, and it is proving to be invaluable at work.&lt;/p&gt;
</summary><published>2009-07-24T23:00:00Z</published><updated>2009-07-24T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2009/07/25/adding-logging-to-an-application/" /><content type="html">&lt;p&gt;Nearly every application I have ever used has produced some sort of log output, usually to record details of exactly what the application was doing when an error was encountered. To be perfectly truthful, it is not something that I have ever really given very much consideration to in either my own or work applications, there have always been more pressing things to attend to, such as meeting (unrealistic) deadlines, or implementing some interesting new feature. I've used log4j before in a work application, mostly because someone else had already done all the configuration.&lt;/p&gt;

&lt;p&gt;However, the application that is currently occupying the main focus of my attention at work had (almost) no logging in it what-s0-ever, but given the nature of the application, it can be very difficult to debug exactly what is happening internally using breakpoints. Again, the nature of the application doesn't really lend itself well to showing MessageBox's all the over the place.&lt;/p&gt;

&lt;pre lang="csharp"&gt;MessageBox.Show("Log message");

// or..

Console.WriteLine("Log message");&lt;/pre&gt;

&lt;p&gt;How many times have you done that, or the equivalent, in an application? If you are like me, then you'll have done it hundreds of times, probably in the same application. It's really quick and easy to do, and can be very useful. You just have to remember to take it out of the Release build. What a pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A better way&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using a proper logging library (as I have now discovered) allows you much greater freedom. Freedom to not have to (overly) worry about leaving in &lt;em&gt;Log.Debug("Some message")&lt;/em&gt; all over the code. Freedom to be able to configure what is logged, where it is logged to and how it is displayed. Freedom to receive concrete data on how your application is behaving in the real world, which will enable you to find and fix bugs faster than you would have thought possible.&lt;/p&gt;

&lt;p&gt;There are a multitude of logging libraries available:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Write your own&lt;/li&gt;
    &lt;li&gt;System.Diagnostics.Trace and System.Diagnostics.Debug&lt;/li&gt;
    &lt;li&gt;The Logging Application block from the &lt;a title="Microsoft Enterprise Library" href="http://www.codeplex.com/entlib" target="_self"&gt;Enterprise Library&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Bitfactory.Logging from &lt;a title="Bitfactory.Logging from theobjectguy" href="http://www.theobjectguy.com/dotnetlog/" target="_blank"&gt;http://www.theobjectguy.com/dotnetlog/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a title="NLog C# logging library" href="http://csharp-source.net/open-source/logging/nlog" target="_blank"&gt;NLog&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; Plus many more that you can find via google or on Stack Overflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, while it would probably be an interesting exercise to write a small logging library, the world doesn't need another one, so I immediately discounted that option.&lt;/p&gt;

&lt;p&gt;I've used System.Diagnostics here and there, and an ex-colleague wrote a small logging library based around using Trace and Debug, but that is getting dangerously close to writing your own logging library, so again that's out.&lt;/p&gt;

&lt;p&gt;The Logging application block from the Enterprise Library just seems too weighty, and too much of a pain to configure (I can probably be proved wrong though), so I discounted that as well.&lt;/p&gt;

&lt;p&gt;The object guy's logging library seems pretty good, but the documentation and examples kind of suck, and it doesn't look like it's been updated in a while, so after playing with it a little bit (and not really liking it all that much to be perfectly honest), I discounted that as well, although it does seem to have a lot of fans on Stack Overflow.&lt;/p&gt;

&lt;p&gt;NLog has plenty of documentation, and seems pretty straightforward to use, and it too has a lot of fans on Stack Overflow, but again, it's not been updated in a while, so I discounted that too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Log4Net to the rescue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Log4Net is part of the &lt;a title="Apache Logging Services" href="http://logging.apache.org/" target="_self"&gt;Apache Logging Services&lt;/a&gt; project, along with Log4j, and Log4Cxx. It is a C# port of Log4j, and works amazingly well. I am not going to write about how to set it up and configure it, as &lt;a title="log4net info on beefycode.com" href="http://www.beefycode.com/category/log4net.aspx"&gt;others have done that already&lt;/a&gt;, and the documentation is excellent.&lt;/p&gt;

&lt;p&gt;I've read here and there on some blogs, a few message boards and some email lists, that log4net is difficult and time consuming to set-up, and that it is hard to use. Which is nonsense, because after ten minutes (which included downloading the latest version) I had my first small test application up and running and outputting debug messages to the Output window in Visual Studio. Pretty swish indeed.� I did spend some time reading about the best ways to use log4net, and I still do, but I didn't find the initial set-up to be inordinately difficult at all.&lt;/p&gt;

&lt;p&gt;On the whole, I am impressed with it's ease of use, I'm now starting to use it in my own personal projects, and it is proving to be invaluable at work.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2009/05/25/writing-a-generic-plugin-manager-in-c/</id><title type="text">Writing a generic plugin manager in C#</title><summary type="html">&lt;h4&gt;Update:&lt;/h4&gt;

&lt;p&gt;I have written another post on this subject with some code examples  here: &lt;a title="More on the generic plugin manager" href="http://temporalcohesion.co.uk/2009/11/02/more-on-the-generic-plugin-manager/" target="_self"&gt;http://temporalcohesion.co.uk/2009/11/02/more-on-the-generic-plugin-manager/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Update 2:&lt;/h4&gt;

&lt;p&gt;There is another follow on post here: &lt;a href="http://temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/"&gt;http://temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/&lt;/a&gt; where I talk about what I've learned.&lt;/p&gt;

&lt;p&gt;One of my current long term hobby project is a  map/world editor that I'm writing for Andy's (work in progress) game engine. It is still in a quite rudimentary stage, however, I have gotten an important aspect of the application into a fairly mature state already, and that is the plugin system.&lt;/p&gt;

&lt;p&gt;I don't want to get into too much detail over things that are available via some simple searches on google, so don't expect too much code. There are some good articles &lt;a title="http://msdn.microsoft.com/en-us/library/ms972962.aspx" href="http://" target="_blank"&gt;here&lt;/a&gt;, &lt;a title="http://www.codeproject.com/KB/macros/PluginsManager.aspx?display=Print" href="http://" target="_blank"&gt;here &lt;/a&gt;and &lt;a title="http://www.codeproject.com/KB/cs/Plugin_Basics.aspx" href="http://" target="_blank"&gt;here&lt;/a&gt;, which delve quite deeply into this, and how to develop a plugin framework in general. I developed my plugin framework based on the code in &lt;a title="http://www.amazon.com/2008-NET-Platform-Fourth-Windows-Net/dp/1590598849" href="http://" target="_blank"&gt;this book&lt;/a&gt;, which incidentally is a very good book.&lt;/p&gt;

&lt;p&gt;Also, in my own google searches on this subject, a lot of the articles I found are getting to be four years old, in a few instances even older. Not that this automatically makes them invalid as sources of information, it's just that they may not reflect best practices in modern C#. (Not that I am claiming to be a &lt;a title="http://msmvps.com/blogs/jon_skeet/default.aspx" href="http://" target="_blank"&gt;Jon Skeet&lt;/a&gt;-like C# guru). Also, quite a few of the ones I found make use of an XML configuration file to hold a reference to the plugins. I'm not a big fan of this type of thing, I much prefer convention over configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Generic?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I've written a plugin system for the Editor because I want to provide a way to make it easily extendible in the future, without having to change the core application, to enable it to perform actions that are above and beyond it's core capabilities. Byond that basic requirement, there are a couple of other reasons to make it a generic plugin framework.&lt;/p&gt;

&lt;p&gt;Firstly, I've made it generic because I wanted to make a distinction between different types of plugins, such as a type of plugin for resources, and a type of plugin which adds functionality into the application (such as tools, UI widgets etc).&lt;/p&gt;

&lt;p&gt;Secondly, and perhaps most important (to me, anyway), is that I'll never need to write a C# plugin framework again, for any of my personal projects. I've had a go at writing a plugin framework before, a few times for none-work projects and once for a project at work, and I finally realised what my problem was - reinventing the wheel each time.&lt;/p&gt;

&lt;p&gt;The plugin framework I've written ensures that I don't have to worry about this the next time one of my pet projects needs a plugin system. The Editor will in fact have two types of plugins available, one to extend the types of data sources it can load in resources from, and another to provide additional functionality, like tools.&lt;/p&gt;

&lt;p&gt;I'm fairly pleased with the way that it has turned out, and it works quite well in practice.&lt;/p&gt;
</summary><published>2009-05-24T23:00:00Z</published><updated>2009-05-24T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2009/05/25/writing-a-generic-plugin-manager-in-c/" /><content type="html">&lt;h4&gt;Update:&lt;/h4&gt;

&lt;p&gt;I have written another post on this subject with some code examples  here: &lt;a title="More on the generic plugin manager" href="http://temporalcohesion.co.uk/2009/11/02/more-on-the-generic-plugin-manager/" target="_self"&gt;http://temporalcohesion.co.uk/2009/11/02/more-on-the-generic-plugin-manager/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Update 2:&lt;/h4&gt;

&lt;p&gt;There is another follow on post here: &lt;a href="http://temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/"&gt;http://temporalcohesion.co.uk/2010/03/17/even-more-on-the-generic-plugin-manager/&lt;/a&gt; where I talk about what I've learned.&lt;/p&gt;

&lt;p&gt;One of my current long term hobby project is a  map/world editor that I'm writing for Andy's (work in progress) game engine. It is still in a quite rudimentary stage, however, I have gotten an important aspect of the application into a fairly mature state already, and that is the plugin system.&lt;/p&gt;

&lt;p&gt;I don't want to get into too much detail over things that are available via some simple searches on google, so don't expect too much code. There are some good articles &lt;a title="http://msdn.microsoft.com/en-us/library/ms972962.aspx" href="http://" target="_blank"&gt;here&lt;/a&gt;, &lt;a title="http://www.codeproject.com/KB/macros/PluginsManager.aspx?display=Print" href="http://" target="_blank"&gt;here &lt;/a&gt;and &lt;a title="http://www.codeproject.com/KB/cs/Plugin_Basics.aspx" href="http://" target="_blank"&gt;here&lt;/a&gt;, which delve quite deeply into this, and how to develop a plugin framework in general. I developed my plugin framework based on the code in &lt;a title="http://www.amazon.com/2008-NET-Platform-Fourth-Windows-Net/dp/1590598849" href="http://" target="_blank"&gt;this book&lt;/a&gt;, which incidentally is a very good book.&lt;/p&gt;

&lt;p&gt;Also, in my own google searches on this subject, a lot of the articles I found are getting to be four years old, in a few instances even older. Not that this automatically makes them invalid as sources of information, it's just that they may not reflect best practices in modern C#. (Not that I am claiming to be a &lt;a title="http://msmvps.com/blogs/jon_skeet/default.aspx" href="http://" target="_blank"&gt;Jon Skeet&lt;/a&gt;-like C# guru). Also, quite a few of the ones I found make use of an XML configuration file to hold a reference to the plugins. I'm not a big fan of this type of thing, I much prefer convention over configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Generic?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I've written a plugin system for the Editor because I want to provide a way to make it easily extendible in the future, without having to change the core application, to enable it to perform actions that are above and beyond it's core capabilities. Byond that basic requirement, there are a couple of other reasons to make it a generic plugin framework.&lt;/p&gt;

&lt;p&gt;Firstly, I've made it generic because I wanted to make a distinction between different types of plugins, such as a type of plugin for resources, and a type of plugin which adds functionality into the application (such as tools, UI widgets etc).&lt;/p&gt;

&lt;p&gt;Secondly, and perhaps most important (to me, anyway), is that I'll never need to write a C# plugin framework again, for any of my personal projects. I've had a go at writing a plugin framework before, a few times for none-work projects and once for a project at work, and I finally realised what my problem was - reinventing the wheel each time.&lt;/p&gt;

&lt;p&gt;The plugin framework I've written ensures that I don't have to worry about this the next time one of my pet projects needs a plugin system. The Editor will in fact have two types of plugins available, one to extend the types of data sources it can load in resources from, and another to provide additional functionality, like tools.&lt;/p&gt;

&lt;p&gt;I'm fairly pleased with the way that it has turned out, and it works quite well in practice.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2008/09/12/building-the-project-euler-framework-part-3/</id><title type="text">Building the Project Euler framework, part 3</title><summary type="html">&lt;p&gt;In part 2, I showed you an improved, although still pretty basic problem runner framework for Project Euler. I did leave out some things though, and I'm going to try and explain them now.&lt;/p&gt;

&lt;p&gt;Firstly, I haven't really shown how I use the Problem interface. You can see it in part 1 of this series of posts. In Eclipse, you can create a new class in a package, which should bring up the "New Java Class" dialog. Give the class a name - for Project Euler problems I've chosen to name them "One", "Two", "Three" etc. You can then add an interface that the class is to implement, click 'Add', and type in Problem. You can also choose some methods to stub out, tick 'public static void main(String[] args)'. Click Ok, and you should get something like this:&lt;/p&gt;

&lt;pre lang="java"&gt;package co.uk.temporalcohesion.euler.problems;

import co.uk.temporalcohesion.euler.interfaces.Problem;

public class One implements Problem {

    public String answer() {
        // TODO Auto-generated method stub
        return null;
    }

    public int id() {
        // TODO Auto-generated method stub
        return 0;
    }

    public double time() {
        // TODO Auto-generated method stub
        return 0;
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub

    }

}&lt;/pre&gt;

&lt;p&gt;I can hear you asking why am I including then main(String[] args) function if we already have a class that is capable of running the problems (the main Euler class)? Well, what I do to create is to create a Euler object in the problems main method, and get it to run the problem, like this:&lt;/p&gt;

&lt;pre lang="java"&gt;        /**
     * @param args
     */
    public static void main(String[] args) {
        new Euler().run(1, true);
    }&lt;/pre&gt;

&lt;p&gt;So the problem class is running itself using the Euler object, which knows how to find the problem, instantiate it and run it. I find doing things this way is easier when working on the problem, as you can simply run the problem as a java application, and it will output the result in a standard format we are expecting to to the console in Eclipse.&lt;/p&gt;

&lt;p&gt;Thinking about it, you might be wondering - what's the point of all this, it seems a little excessive for something that can be done fairly easily? Well - I've done it like this because the whole point of me doing the problems on Project Euler, is to practice problem solving and become more comfortable in my use of Java. So I think what I've done is pretty valid in that regard.&lt;/p&gt;
</summary><published>2008-09-11T23:00:00Z</published><updated>2008-09-11T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2008/09/12/building-the-project-euler-framework-part-3/" /><content type="html">&lt;p&gt;In part 2, I showed you an improved, although still pretty basic problem runner framework for Project Euler. I did leave out some things though, and I'm going to try and explain them now.&lt;/p&gt;

&lt;p&gt;Firstly, I haven't really shown how I use the Problem interface. You can see it in part 1 of this series of posts. In Eclipse, you can create a new class in a package, which should bring up the "New Java Class" dialog. Give the class a name - for Project Euler problems I've chosen to name them "One", "Two", "Three" etc. You can then add an interface that the class is to implement, click 'Add', and type in Problem. You can also choose some methods to stub out, tick 'public static void main(String[] args)'. Click Ok, and you should get something like this:&lt;/p&gt;

&lt;pre lang="java"&gt;package co.uk.temporalcohesion.euler.problems;

import co.uk.temporalcohesion.euler.interfaces.Problem;

public class One implements Problem {

    public String answer() {
        // TODO Auto-generated method stub
        return null;
    }

    public int id() {
        // TODO Auto-generated method stub
        return 0;
    }

    public double time() {
        // TODO Auto-generated method stub
        return 0;
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub

    }

}&lt;/pre&gt;

&lt;p&gt;I can hear you asking why am I including then main(String[] args) function if we already have a class that is capable of running the problems (the main Euler class)? Well, what I do to create is to create a Euler object in the problems main method, and get it to run the problem, like this:&lt;/p&gt;

&lt;pre lang="java"&gt;        /**
     * @param args
     */
    public static void main(String[] args) {
        new Euler().run(1, true);
    }&lt;/pre&gt;

&lt;p&gt;So the problem class is running itself using the Euler object, which knows how to find the problem, instantiate it and run it. I find doing things this way is easier when working on the problem, as you can simply run the problem as a java application, and it will output the result in a standard format we are expecting to to the console in Eclipse.&lt;/p&gt;

&lt;p&gt;Thinking about it, you might be wondering - what's the point of all this, it seems a little excessive for something that can be done fairly easily? Well - I've done it like this because the whole point of me doing the problems on Project Euler, is to practice problem solving and become more comfortable in my use of Java. So I think what I've done is pretty valid in that regard.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2008/09/05/building-the-project-euler-framework-part-2/</id><title type="text">Building the Project Euler framework, part 2</title><summary type="html">&lt;p&gt;In Part 1, I showed a basic problem runner framework for Project Euler, however there are a number of ways in which we can improve it. For example:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;How can we run a specific problem?&lt;/li&gt;
    &lt;li&gt;How can we hide the answer, but still run the problem?&lt;/li&gt;
    &lt;li&gt;How can we avoid manually adding problems to the List of problems?&lt;/li&gt;
    &lt;li&gt;Not really to do with the framework, but how can we automate building everything?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll demonstrate some ways that we can do all that, except for the 4th option, which is handled by Ant.&lt;/p&gt;

&lt;h2&gt;Improving the framework&lt;/h2&gt;

&lt;p&gt;The first thing that we can do is to add a utility function that handles showing the answers, this way we only have one place in the code that we need to update when we want to change how the answers are shown.&lt;/p&gt;

&lt;pre lang="java"&gt;private void showAnswers(Problem problem){
        System.out.println("Problem: " + problem.id() + ". Answer: "
                + problem.answer() + ". Time: " + problem.time() + "s");&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;To run a specific problem, we need to overload the &lt;em&gt;run()&lt;/em&gt; function to access the problem we want, and show the answer.&lt;/p&gt;

&lt;pre lang="java"&gt;public void run(int i) {
        try{
            Problem problem = (Problem) problems.get(i);/* problem list starts at 0 */

            if (problem != null) {
                showAnswers(problem);
            }
            else {
                System.out.println("There doesn't appear to be an answer for problem " + i);
            }

        } catch (IndexOutOfBoundsException e){
            System.err.println("There doesn't appear to be an answer for problem " + i);
        }

    }&lt;/pre&gt;

&lt;p&gt;As you can see, we get the specified problem out of the list, and use our new &lt;em&gt;showAnswers()&lt;/em&gt; function to display the answer.� I've tried to include some good error checking - we might try to get a problem that doesn't exist.&lt;/p&gt;

&lt;p&gt;In order to prevent the answer from being shown, we can add a boolean parameter to the &lt;em&gt;run()&lt;/em&gt; and &lt;em&gt;showAnswers()&lt;/em&gt; functions.&lt;/p&gt;

&lt;pre lang="java"&gt;private void showAnswers(Problem problem, boolean showAnswers){
        if(showAnswers){
            System.out.println("Problem: " + problem.id() + ". Answer: "
                    + problem.answer() + ". Time: " + problem.time() + "s");
            }
            else {
                problem.answer(); /* we still need to work out the answer */
                System.out.println("Problem: " + problem.id() + ". Time: " + problem.time() + "s");
            }
    }

public void run(boolean showAnswers) {
        for (Problem problem : problems) {
            if (problem != null) {
                showAnswers(problem, showAnswers);
            }
        }
    }&lt;/pre&gt;

&lt;p&gt;Dont't forget to change the overloaded &lt;em&gt;run(int i)&lt;/em&gt; to &lt;em&gt;run(int i, boolean showAnswers)&lt;/em&gt;. This way we can control exactly� whether to show the answers when we run all the problems, or to show the answer if we run a specific problem.&lt;/p&gt;

&lt;p&gt;One thing remains to do, and that is to correctly parse the command line arguments to control whether the answers are shown or not. We want to handle something like this:&lt;/p&gt;

&lt;p&gt;C:developmenteuler&amp;gt;java -jar ProjectEuler.jar 42 -noanswer&lt;/p&gt;

&lt;p&gt;Where 42 is problem 42, and -noanswer clearly specifies not to show the answer. We'll also need to handle all combinations of this as well, such as:&lt;/p&gt;

&lt;p&gt;C:developmenteuler&amp;gt;java -jar ProjectEuler.jar 42&lt;/p&gt;

&lt;p&gt;Which should show the answer. I'm not going to show my code for parsing the command line arguements, I'll leave that as an exercise for the reader, as I believe that it is adequately covered elsewhere on the internet, and in any number of Java books.&lt;/p&gt;

&lt;p&gt;The more astute among you will notice that I've not mentioned how we are going to avoid manually adding problems to the List of problems. I'll cover that next time.&lt;/p&gt;
</summary><published>2008-09-04T23:00:00Z</published><updated>2008-09-04T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2008/09/05/building-the-project-euler-framework-part-2/" /><content type="html">&lt;p&gt;In Part 1, I showed a basic problem runner framework for Project Euler, however there are a number of ways in which we can improve it. For example:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;How can we run a specific problem?&lt;/li&gt;
    &lt;li&gt;How can we hide the answer, but still run the problem?&lt;/li&gt;
    &lt;li&gt;How can we avoid manually adding problems to the List of problems?&lt;/li&gt;
    &lt;li&gt;Not really to do with the framework, but how can we automate building everything?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll demonstrate some ways that we can do all that, except for the 4th option, which is handled by Ant.&lt;/p&gt;

&lt;h2&gt;Improving the framework&lt;/h2&gt;

&lt;p&gt;The first thing that we can do is to add a utility function that handles showing the answers, this way we only have one place in the code that we need to update when we want to change how the answers are shown.&lt;/p&gt;

&lt;pre lang="java"&gt;private void showAnswers(Problem problem){
        System.out.println("Problem: " + problem.id() + ". Answer: "
                + problem.answer() + ". Time: " + problem.time() + "s");&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;To run a specific problem, we need to overload the &lt;em&gt;run()&lt;/em&gt; function to access the problem we want, and show the answer.&lt;/p&gt;

&lt;pre lang="java"&gt;public void run(int i) {
        try{
            Problem problem = (Problem) problems.get(i);/* problem list starts at 0 */

            if (problem != null) {
                showAnswers(problem);
            }
            else {
                System.out.println("There doesn't appear to be an answer for problem " + i);
            }

        } catch (IndexOutOfBoundsException e){
            System.err.println("There doesn't appear to be an answer for problem " + i);
        }

    }&lt;/pre&gt;

&lt;p&gt;As you can see, we get the specified problem out of the list, and use our new &lt;em&gt;showAnswers()&lt;/em&gt; function to display the answer.� I've tried to include some good error checking - we might try to get a problem that doesn't exist.&lt;/p&gt;

&lt;p&gt;In order to prevent the answer from being shown, we can add a boolean parameter to the &lt;em&gt;run()&lt;/em&gt; and &lt;em&gt;showAnswers()&lt;/em&gt; functions.&lt;/p&gt;

&lt;pre lang="java"&gt;private void showAnswers(Problem problem, boolean showAnswers){
        if(showAnswers){
            System.out.println("Problem: " + problem.id() + ". Answer: "
                    + problem.answer() + ". Time: " + problem.time() + "s");
            }
            else {
                problem.answer(); /* we still need to work out the answer */
                System.out.println("Problem: " + problem.id() + ". Time: " + problem.time() + "s");
            }
    }

public void run(boolean showAnswers) {
        for (Problem problem : problems) {
            if (problem != null) {
                showAnswers(problem, showAnswers);
            }
        }
    }&lt;/pre&gt;

&lt;p&gt;Dont't forget to change the overloaded &lt;em&gt;run(int i)&lt;/em&gt; to &lt;em&gt;run(int i, boolean showAnswers)&lt;/em&gt;. This way we can control exactly� whether to show the answers when we run all the problems, or to show the answer if we run a specific problem.&lt;/p&gt;

&lt;p&gt;One thing remains to do, and that is to correctly parse the command line arguments to control whether the answers are shown or not. We want to handle something like this:&lt;/p&gt;

&lt;p&gt;C:developmenteuler&amp;gt;java -jar ProjectEuler.jar 42 -noanswer&lt;/p&gt;

&lt;p&gt;Where 42 is problem 42, and -noanswer clearly specifies not to show the answer. We'll also need to handle all combinations of this as well, such as:&lt;/p&gt;

&lt;p&gt;C:developmenteuler&amp;gt;java -jar ProjectEuler.jar 42&lt;/p&gt;

&lt;p&gt;Which should show the answer. I'm not going to show my code for parsing the command line arguements, I'll leave that as an exercise for the reader, as I believe that it is adequately covered elsewhere on the internet, and in any number of Java books.&lt;/p&gt;

&lt;p&gt;The more astute among you will notice that I've not mentioned how we are going to avoid manually adding problems to the List of problems. I'll cover that next time.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2008/08/29/source-control-using-dropbox/</id><title type="text">Source control using Dropbox</title><summary type="html">&lt;p&gt;Everyone developer should use some form of &lt;a title="Wikipedia entry on source control" href="http://en.wikipedia.org/wiki/Source_control" target="_blank"&gt;source control&lt;/a&gt;. It's like an unwritten law, if you don't use it, then you should - as long as it isn't &lt;a title="Jeff Atwood on why you shouldn't use sourcesafe" href="http://www.codinghorror.com/blog/archives/000660.html" target="_blank"&gt;sourcesafe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I recently managed to get hold of an invite to &lt;a title="get dropbox" href="http://www.getdropbox.com/" target="_blank"&gt;Dropbox&lt;/a&gt;, which describes itself as "Secure back up, sync and sharing made easy". I've been using it both as a basic form of source control, and because I always tend to forget my usb pendrive, as a portable storage device.&lt;/p&gt;

&lt;p&gt;The great thing about Dropbox is that you get 2gb of free storage. So far, I've sync'd a few photo's, some word documents and pdf's and the Java source for my Project Euler code, and according to the Dropbox client on my laptop, I've used 0.1% of 2gb. This is more than enough for me, and more than likely I'll use it for some more coding projects. I'd like to see how a Visual Studio project takes to being sync'd across different computers.&lt;/p&gt;

&lt;p&gt;With Dropbox, you get complete file history, so if you mistakenly remove some code that turns out to be pretty vital... you can get it back using the simple to use web interface. While you can share folders, and allow people to modify shared folders, I'm not too sure that it would work too well for collaborative software development. I think it would be far better to get a proper form of source control running on a server both parties have access to. There are plenty of proper source control providers out there with free options, and I am considering moving my code onto one of those, if I can find one that has a reasonable yearly subscription.&lt;/p&gt;

&lt;p&gt;For my current requirements, it suits me just fine. I realise that Dropbox is not intended to be a source control system, however... When the client is able to sync specific folders that you tell it to, it will be perfect.&lt;/p&gt;
</summary><published>2008-08-28T23:00:00Z</published><updated>2008-08-28T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2008/08/29/source-control-using-dropbox/" /><content type="html">&lt;p&gt;Everyone developer should use some form of &lt;a title="Wikipedia entry on source control" href="http://en.wikipedia.org/wiki/Source_control" target="_blank"&gt;source control&lt;/a&gt;. It's like an unwritten law, if you don't use it, then you should - as long as it isn't &lt;a title="Jeff Atwood on why you shouldn't use sourcesafe" href="http://www.codinghorror.com/blog/archives/000660.html" target="_blank"&gt;sourcesafe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I recently managed to get hold of an invite to &lt;a title="get dropbox" href="http://www.getdropbox.com/" target="_blank"&gt;Dropbox&lt;/a&gt;, which describes itself as "Secure back up, sync and sharing made easy". I've been using it both as a basic form of source control, and because I always tend to forget my usb pendrive, as a portable storage device.&lt;/p&gt;

&lt;p&gt;The great thing about Dropbox is that you get 2gb of free storage. So far, I've sync'd a few photo's, some word documents and pdf's and the Java source for my Project Euler code, and according to the Dropbox client on my laptop, I've used 0.1% of 2gb. This is more than enough for me, and more than likely I'll use it for some more coding projects. I'd like to see how a Visual Studio project takes to being sync'd across different computers.&lt;/p&gt;

&lt;p&gt;With Dropbox, you get complete file history, so if you mistakenly remove some code that turns out to be pretty vital... you can get it back using the simple to use web interface. While you can share folders, and allow people to modify shared folders, I'm not too sure that it would work too well for collaborative software development. I think it would be far better to get a proper form of source control running on a server both parties have access to. There are plenty of proper source control providers out there with free options, and I am considering moving my code onto one of those, if I can find one that has a reasonable yearly subscription.&lt;/p&gt;

&lt;p&gt;For my current requirements, it suits me just fine. I realise that Dropbox is not intended to be a source control system, however... When the client is able to sync specific folders that you tell it to, it will be perfect.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2008/08/22/building-the-project-euler-framework-part-1/</id><title type="text">Building the Project Euler framework, part 1</title><summary type="html">&lt;p&gt;As promised, here is the first part of the series of posts I hope to write demonstrating how I wrote my problem runner framework for &lt;a title="Project Euler!" href="http://projecteuler.net/" target="_blank"&gt;Project Euler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, before you continue reading, I suggest that you research the &lt;a title="The Command pattern on Wikipedia" href="http://en.wikipedia.org/wiki/Command_pattern" target="_blank"&gt;Command&lt;/a&gt; pattern, Google will also provide you with some good sources in your research.&lt;/p&gt;

&lt;p&gt;Done? Ok then. It shouldn't matter what IDE you use, I am using Eclipse (ganymede), any IDE should do. If you don't know what an IDE is, then go and find out, and then come back.&lt;/p&gt;

&lt;h2&gt;Start Coding&lt;/h2&gt;

&lt;p&gt;In your IDE, and following the &lt;a title="Java package naming conventions" href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc8.html" target="_blank"&gt;Java package naming conventions&lt;/a&gt;, create a package to hold the Project Euler code, for example: co.uk.temporalcohesion.euler.problems. Because we are going to need an interface, also create a package to hold those, as this can help keep things more organised, for example: co.uk.temporalcohesion.euler.interfaces&lt;/p&gt;

&lt;p&gt;Let's define that interface&lt;/p&gt;

&lt;pre lang="java"&gt;public interface Problem {

    /**
     * Answer method. Returns the answer for the problem
     * @return - the integer answer to the problem
     */
    String answer();

    /**
     * The problem number.
     * @return - The number of the problem
     */
    int id();

    /**
     * How long does it take to work out the answer?
     * @return - The time in seconds it takes to work out the answer to the problem
     */
    double time();
}&lt;/pre&gt;

&lt;p&gt;Before we move on an implement that interface in a problem, let's write the basic problem runner itself. We'll need a way to register an instance of a problem, and a way to run the problem and get the answer.&lt;/p&gt;

&lt;pre lang="java"&gt;public class Euler {
    private List&amp;lt;Problem&amp;gt; problems = new ArrayList();

    public Euler() {
        problems.add(new One());
    }

    private void run() {
        for (Problem prob : problems) {
            System.out.println("Problem " + prob.id() + ": " + prob.answer());
        }
    }

    public static void main(String[] args) {
        new Euler().run();
    }
}&lt;/pre&gt;

&lt;p&gt;That's pretty much all you need for a basic problem runner. You just register an instance of each problem you write into the problems List object in the constructor, and run the program, and it iterates through each Problem in the List, and outputs the answer.&lt;/p&gt;

&lt;p&gt;I'm not going to give you the code to problem one, however it is pretty trivial if you know what the modulus operator is used for...&lt;/p&gt;

&lt;p&gt;As you can see, the problem runner itself is fairly basic, and does present some immediate areas of improvement, such as running a specific problem.&lt;/p&gt;

&lt;p&gt;I'll cover that next time.&lt;/p&gt;
</summary><published>2008-08-21T23:00:00Z</published><updated>2008-08-21T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2008/08/22/building-the-project-euler-framework-part-1/" /><content type="html">&lt;p&gt;As promised, here is the first part of the series of posts I hope to write demonstrating how I wrote my problem runner framework for &lt;a title="Project Euler!" href="http://projecteuler.net/" target="_blank"&gt;Project Euler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, before you continue reading, I suggest that you research the &lt;a title="The Command pattern on Wikipedia" href="http://en.wikipedia.org/wiki/Command_pattern" target="_blank"&gt;Command&lt;/a&gt; pattern, Google will also provide you with some good sources in your research.&lt;/p&gt;

&lt;p&gt;Done? Ok then. It shouldn't matter what IDE you use, I am using Eclipse (ganymede), any IDE should do. If you don't know what an IDE is, then go and find out, and then come back.&lt;/p&gt;

&lt;h2&gt;Start Coding&lt;/h2&gt;

&lt;p&gt;In your IDE, and following the &lt;a title="Java package naming conventions" href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc8.html" target="_blank"&gt;Java package naming conventions&lt;/a&gt;, create a package to hold the Project Euler code, for example: co.uk.temporalcohesion.euler.problems. Because we are going to need an interface, also create a package to hold those, as this can help keep things more organised, for example: co.uk.temporalcohesion.euler.interfaces&lt;/p&gt;

&lt;p&gt;Let's define that interface&lt;/p&gt;

&lt;pre lang="java"&gt;public interface Problem {

    /**
     * Answer method. Returns the answer for the problem
     * @return - the integer answer to the problem
     */
    String answer();

    /**
     * The problem number.
     * @return - The number of the problem
     */
    int id();

    /**
     * How long does it take to work out the answer?
     * @return - The time in seconds it takes to work out the answer to the problem
     */
    double time();
}&lt;/pre&gt;

&lt;p&gt;Before we move on an implement that interface in a problem, let's write the basic problem runner itself. We'll need a way to register an instance of a problem, and a way to run the problem and get the answer.&lt;/p&gt;

&lt;pre lang="java"&gt;public class Euler {
    private List&amp;lt;Problem&amp;gt; problems = new ArrayList();

    public Euler() {
        problems.add(new One());
    }

    private void run() {
        for (Problem prob : problems) {
            System.out.println("Problem " + prob.id() + ": " + prob.answer());
        }
    }

    public static void main(String[] args) {
        new Euler().run();
    }
}&lt;/pre&gt;

&lt;p&gt;That's pretty much all you need for a basic problem runner. You just register an instance of each problem you write into the problems List object in the constructor, and run the program, and it iterates through each Problem in the List, and outputs the answer.&lt;/p&gt;

&lt;p&gt;I'm not going to give you the code to problem one, however it is pretty trivial if you know what the modulus operator is used for...&lt;/p&gt;

&lt;p&gt;As you can see, the problem runner itself is fairly basic, and does present some immediate areas of improvement, such as running a specific problem.&lt;/p&gt;

&lt;p&gt;I'll cover that next time.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2008/08/15/project-euler-problem-runner-framework-in-java/</id><title type="text">Project Euler problem runner framework in Java</title><summary type="html">&lt;p&gt;Recently, I've been working on the problems on &lt;a title="Projec Euler!" href="http://projecteuler.net/" target="_blank"&gt;Project Euler&lt;/a&gt;, and I've done the first 16 problems (in Java), although I will freely admit that I had help on two of the most difficult ones. I do intend on continuing to do the problems, and I am currently working on problem 17, however I paused to write the problem runner framework I'm going to talk about in this post.&lt;/p&gt;

&lt;p&gt;What I had started to do, was to write each solution in it's own Class, and have the main(String[] args) method output the answer. This was fine for the first few problems, and I could have continued to do it like that for all of the problems - however I wanted to be able to run all the problems at once, or a specific problem, and get the answer(s), or not show the answers but still get the timings.&lt;/p&gt;

&lt;p&gt;After chatting with one of the Senior Dev's at my job, he pointed out that what I wanted to do was basically the &lt;a title="Command Pattern on Wikipedia" href="http://en.wikipedia.org/wiki/Command_pattern" target="_blank"&gt;Command&lt;/a&gt; pattern. He sent me some example code, although once he'd said "Command pattern" I knew exactly what it was that I needed to do.&lt;/p&gt;

&lt;p&gt;Thus, my problem runner framework was born, and whilst fairly simple, it does employ some techniques that the beginning Java developer might not be aware of. So, what I am going to (try) to do over the next few weeks is write a series of posts that show how I wrote it, partly just to have some content on my blog (which I am really, really lazy at updating), secondly to see how good I am at explaining something like this, and thirdly - it might actually be useful to someone.&lt;/p&gt;

&lt;p&gt;The output of the problem runner framework looks like this:&lt;/p&gt;

&lt;p&gt;C:development&amp;gt;java -jar euler.jar -noanswers
Project Euler : Problem Runner - http://projecteuler.net/&lt;/p&gt;

&lt;p&gt;Problem: 1. Time: 0.0s
Problem: 2. Time: 0.0s
Problem: 3. Time: 0.347s
Problem: 4. Time: 0.307s
Problem: 5. Time: 63.803s
Problem: 6. Time: 0.0s
Problem: 7. Time: 0.335s
Problem: 8. Time: 0.0020s
Problem: 9. Time: 34.178s
Problem: 10. Time: 0.369s
Problem: 11. Time: 1.218275999017E9s
Problem: 12. Time: 0.021s
Problem: 13. Time: 0.0s
Problem: 14. Time: 21.717s
Problem: 15. Time: 0.0s
Problem: 16. Time: 0.0010s&lt;/p&gt;

&lt;p&gt;As you can see, I have output a list of the problems, and the time taken to solve the problem, but I haven't shown the answer.&lt;/p&gt;

&lt;p&gt;Well, you didn't think I was going to tell you the answers... Did you?&lt;/p&gt;

&lt;p&gt;This also shows that I need to work on problem 5, 9 and 14 to try and optimise the solution to speed up performance, Project Euler says that problems "should" take under a minute to solve, however I'd still like to improve the code.&lt;/p&gt;
</summary><published>2008-08-14T23:00:00Z</published><updated>2008-08-14T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2008/08/15/project-euler-problem-runner-framework-in-java/" /><content type="html">&lt;p&gt;Recently, I've been working on the problems on &lt;a title="Projec Euler!" href="http://projecteuler.net/" target="_blank"&gt;Project Euler&lt;/a&gt;, and I've done the first 16 problems (in Java), although I will freely admit that I had help on two of the most difficult ones. I do intend on continuing to do the problems, and I am currently working on problem 17, however I paused to write the problem runner framework I'm going to talk about in this post.&lt;/p&gt;

&lt;p&gt;What I had started to do, was to write each solution in it's own Class, and have the main(String[] args) method output the answer. This was fine for the first few problems, and I could have continued to do it like that for all of the problems - however I wanted to be able to run all the problems at once, or a specific problem, and get the answer(s), or not show the answers but still get the timings.&lt;/p&gt;

&lt;p&gt;After chatting with one of the Senior Dev's at my job, he pointed out that what I wanted to do was basically the &lt;a title="Command Pattern on Wikipedia" href="http://en.wikipedia.org/wiki/Command_pattern" target="_blank"&gt;Command&lt;/a&gt; pattern. He sent me some example code, although once he'd said "Command pattern" I knew exactly what it was that I needed to do.&lt;/p&gt;

&lt;p&gt;Thus, my problem runner framework was born, and whilst fairly simple, it does employ some techniques that the beginning Java developer might not be aware of. So, what I am going to (try) to do over the next few weeks is write a series of posts that show how I wrote it, partly just to have some content on my blog (which I am really, really lazy at updating), secondly to see how good I am at explaining something like this, and thirdly - it might actually be useful to someone.&lt;/p&gt;

&lt;p&gt;The output of the problem runner framework looks like this:&lt;/p&gt;

&lt;p&gt;C:development&amp;gt;java -jar euler.jar -noanswers
Project Euler : Problem Runner - http://projecteuler.net/&lt;/p&gt;

&lt;p&gt;Problem: 1. Time: 0.0s
Problem: 2. Time: 0.0s
Problem: 3. Time: 0.347s
Problem: 4. Time: 0.307s
Problem: 5. Time: 63.803s
Problem: 6. Time: 0.0s
Problem: 7. Time: 0.335s
Problem: 8. Time: 0.0020s
Problem: 9. Time: 34.178s
Problem: 10. Time: 0.369s
Problem: 11. Time: 1.218275999017E9s
Problem: 12. Time: 0.021s
Problem: 13. Time: 0.0s
Problem: 14. Time: 21.717s
Problem: 15. Time: 0.0s
Problem: 16. Time: 0.0010s&lt;/p&gt;

&lt;p&gt;As you can see, I have output a list of the problems, and the time taken to solve the problem, but I haven't shown the answer.&lt;/p&gt;

&lt;p&gt;Well, you didn't think I was going to tell you the answers... Did you?&lt;/p&gt;

&lt;p&gt;This also shows that I need to work on problem 5, 9 and 14 to try and optimise the solution to speed up performance, Project Euler says that problems "should" take under a minute to solve, however I'd still like to improve the code.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2008/01/07/new-years-resolutions-are-so-passe/</id><title type="text">New Year's Resolutions are so pass�</title><summary type="html">&lt;p&gt;It's true, New Years resolutions are pass�. Every year, you look at what is wrong in your life and triumphantly decide that you are going to resolve these problems by issuing a bold and sweeping set of statements, or edicts.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Lose weight&lt;/li&gt;
    &lt;li&gt;Stop smoking&lt;/li&gt;
    &lt;li&gt;Get fit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are what you want to achieve, chasing that ever elusive dream of making your life better. Can you? Can a simple list of statements help you achieve these goals? I'm not so sure. For some people I'm sure that they don't even have to write them down, those super motivated people who seem to exude success.&lt;/p&gt;

&lt;p&gt;I used to do this, on scraps of easily lost paper, "Stuart's New Year's Resolutions!" it would say, with a list of two or three word ambition's for the year. Lost by February. For the last few years I haven't even bothered with writing them down, I'd just mouth off to anyone who would listen, "I'm gonna do this, and that, this year, you wait and see".&lt;/p&gt;

&lt;p&gt;Which funnily enough, didn't get me very far with achieving very much. That said, 2007 was a year I'll never forget, for a number of reasons (not all of which I want to go into here), and it has led me to believe even more than I did, that it is all well and good to strole through life without a care, thinking everything is fine and dandy. Because it is not. Doing that will get you stuck, trapped in a rut that you can't get out of, never having made anything of your life.&lt;/p&gt;

&lt;p&gt;Thankfully, I'm pretty certain that I'm not in a rut. Trust me, I've been there and I know what it is like.&lt;/p&gt;

&lt;p&gt;So what to do instead of making 'New Year's Resolutions'? It's simple: Set goals. "But", I hear you cry, "a goal IS a resolution?!" Which in this sense I suppose they are, however there is a crucial difference. A goal set's out what you want to do and how you are going to achieve it.&lt;/p&gt;

&lt;p&gt;The above list could be re-written like so:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Lose weight by eating healthily and exercising more to get fit.&lt;/li&gt;
    &lt;li&gt;Stop smoking by using patches and will power, giving up completely by Easter.&lt;/li&gt;
    &lt;li&gt;Get fit, by joining a gym, running and cycling and lose 2 stone by Easter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These aren't my goals for this year... Ok, I don't smoke, but the other two count. I'm not revealing my other goals... yet. I have several though, and I intend to get stuck in and achieve them.&lt;/p&gt;
</summary><published>2008-01-07T00:00:00Z</published><updated>2008-01-07T00:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2008/01/07/new-years-resolutions-are-so-passe/" /><content type="html">&lt;p&gt;It's true, New Years resolutions are pass�. Every year, you look at what is wrong in your life and triumphantly decide that you are going to resolve these problems by issuing a bold and sweeping set of statements, or edicts.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Lose weight&lt;/li&gt;
    &lt;li&gt;Stop smoking&lt;/li&gt;
    &lt;li&gt;Get fit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are what you want to achieve, chasing that ever elusive dream of making your life better. Can you? Can a simple list of statements help you achieve these goals? I'm not so sure. For some people I'm sure that they don't even have to write them down, those super motivated people who seem to exude success.&lt;/p&gt;

&lt;p&gt;I used to do this, on scraps of easily lost paper, "Stuart's New Year's Resolutions!" it would say, with a list of two or three word ambition's for the year. Lost by February. For the last few years I haven't even bothered with writing them down, I'd just mouth off to anyone who would listen, "I'm gonna do this, and that, this year, you wait and see".&lt;/p&gt;

&lt;p&gt;Which funnily enough, didn't get me very far with achieving very much. That said, 2007 was a year I'll never forget, for a number of reasons (not all of which I want to go into here), and it has led me to believe even more than I did, that it is all well and good to strole through life without a care, thinking everything is fine and dandy. Because it is not. Doing that will get you stuck, trapped in a rut that you can't get out of, never having made anything of your life.&lt;/p&gt;

&lt;p&gt;Thankfully, I'm pretty certain that I'm not in a rut. Trust me, I've been there and I know what it is like.&lt;/p&gt;

&lt;p&gt;So what to do instead of making 'New Year's Resolutions'? It's simple: Set goals. "But", I hear you cry, "a goal IS a resolution?!" Which in this sense I suppose they are, however there is a crucial difference. A goal set's out what you want to do and how you are going to achieve it.&lt;/p&gt;

&lt;p&gt;The above list could be re-written like so:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Lose weight by eating healthily and exercising more to get fit.&lt;/li&gt;
    &lt;li&gt;Stop smoking by using patches and will power, giving up completely by Easter.&lt;/li&gt;
    &lt;li&gt;Get fit, by joining a gym, running and cycling and lose 2 stone by Easter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These aren't my goals for this year... Ok, I don't smoke, but the other two count. I'm not revealing my other goals... yet. I have several though, and I intend to get stuck in and achieve them.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2007/10/10/more-cake/</id><title type="text">more cake</title><summary type="html">&lt;p&gt;Something I discovered fairly quickly when coding (cake)PHP in eclipse, is that, like code completion in Models, unless you do a little extra configuration, code completion in Views won't work.&lt;/p&gt;

&lt;p&gt;If however, you make a slight modification to the Views index.ctp, and create a HtmlHelper() yourself, then you get code completion on $html-&amp;gt;, and access to all the methods, and the rendered view isn't affected at all.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre lang="PHP"&gt;
&lt;?php
if(false)

{

$html = new HtmlHelper();

}

?&gt;&lt;/pre&gt;

&lt;p&gt;I found the answer to this after posting on the &lt;a href="http://groups.google.com/group/cake-php/browse_thread/thread/04b94b593714b394/9c71e02157bcaacd#9c71e02157bcaacd" target="_blank"&gt;CakePHP google group&lt;/a&gt;, and getting a good answer from a user. Top Stuff&lt;/p&gt;
</summary><published>2007-10-09T23:00:00Z</published><updated>2007-10-09T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2007/10/10/more-cake/" /><content type="html">&lt;p&gt;Something I discovered fairly quickly when coding (cake)PHP in eclipse, is that, like code completion in Models, unless you do a little extra configuration, code completion in Views won't work.&lt;/p&gt;

&lt;p&gt;If however, you make a slight modification to the Views index.ctp, and create a HtmlHelper() yourself, then you get code completion on $html-&amp;gt;, and access to all the methods, and the rendered view isn't affected at all.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre lang="PHP"&gt;
&lt;?php
if(false)

{

$html = new HtmlHelper();

}

?&gt;&lt;/pre&gt;

&lt;p&gt;I found the answer to this after posting on the &lt;a href="http://groups.google.com/group/cake-php/browse_thread/thread/04b94b593714b394/9c71e02157bcaacd#9c71e02157bcaacd" target="_blank"&gt;CakePHP google group&lt;/a&gt;, and getting a good answer from a user. Top Stuff&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2007/10/07/cakephp-with-eclipse/</id><title type="text">cakePHP with Eclipse</title><summary type="html">&lt;p&gt;&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2007/10/php_dev_in_eclipse.png" title="cakePHP development in Eclipse"&gt;&lt;img src="http://temporalcohesion.co.uk/wp-content/uploads/2007/10/php_dev_in_eclipse.thumbnail.png" title="cakePHP development in Eclipse" alt="cakePHP development in Eclipse" align="left" height="223" hspace="20" width="295" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After chatting with one of my friends who is earning loads of cash doing php web development, I've decided that I'm going  relearn PHP, not because I want a change of career, I'm happy where I am, but because... I just want to.&lt;/p&gt;

&lt;p&gt;Because I've become a bit of a snob, used to having intellisense and and all the wonders that IDE's such as Visual Studio and Borland Delphi provide, I wanted to do my PHP development in a proper IDE. Since I've been doing a lot of Java at work - enter &lt;a href="http://www.eclipse.org" title="The Eclipse IDE" target="_blank"&gt;Eclipse&lt;/a&gt;, and the &lt;a href="http://www.eclipse.org/pdt/" title="Eclipse PDT plugins" target="_blank"&gt;Eclipse PHP&lt;/a&gt; plugins.&lt;/p&gt;

&lt;p&gt;As you can see in the screenshot above (which shows some code from the &lt;a href="http://www.cakephp.org" title="A Nice Piece of Cake!"&gt;cakePHP&lt;/a&gt; 15 minute blog tutorial), the plugins provide an awesome amount of functionality, such as:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Code folding&lt;/li&gt;
    &lt;li&gt;Intellisense/code completion&lt;/li&gt;
    &lt;li&gt;Syntax highlighting/colouring&lt;/li&gt;
    &lt;li&gt;API Documentation tool-tips&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this functionality is pretty easy to set up, and there is a pretty good guide available in &lt;a href="http://bakery.cakephp.org/articles/view/setting-up-eclipse-to-work-with-cake" target="_blank"&gt;The Bakery&lt;/a&gt; that covers just about everything you need to know to get going. There was a little bit of configuration that I did that was slightly different to that guide:&lt;/p&gt;

&lt;p&gt;Firstly, I don't believe that you need to set up cakePHP as a project in order to get the code completion to work. If you expand your project, and right click on your project include paths, you should be on the PHP Include path dialog, in the projects properties. If you add an external folder, and browse to the cake core directory (for me: C:xampphtdocscake), and click ok, you should now have code completion and all the associated awesomeness in your project, with the added benefit that for any different projects in your workspace, you can set up different versions of cakePHP or (I haven't tried this though) a different framework such as &lt;a href="http://www.symfony-project.com"&gt;Symfony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Secondly, for code completion in Models, you just have to do something like this:&lt;/p&gt;

&lt;pre lang="PHP"&gt;
class PostsController extends AppController{var $name = 'Posts';

/**

* @var Post

*/

var $Post;

...code

}&lt;/pre&gt;

&lt;p&gt;Hope this is of use to somebody :)&lt;/p&gt;
</summary><published>2007-10-06T23:00:00Z</published><updated>2007-10-06T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2007/10/07/cakephp-with-eclipse/" /><content type="html">&lt;p&gt;&lt;a href="http://temporalcohesion.co.uk/wp-content/uploads/2007/10/php_dev_in_eclipse.png" title="cakePHP development in Eclipse"&gt;&lt;img src="http://temporalcohesion.co.uk/wp-content/uploads/2007/10/php_dev_in_eclipse.thumbnail.png" title="cakePHP development in Eclipse" alt="cakePHP development in Eclipse" align="left" height="223" hspace="20" width="295" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After chatting with one of my friends who is earning loads of cash doing php web development, I've decided that I'm going  relearn PHP, not because I want a change of career, I'm happy where I am, but because... I just want to.&lt;/p&gt;

&lt;p&gt;Because I've become a bit of a snob, used to having intellisense and and all the wonders that IDE's such as Visual Studio and Borland Delphi provide, I wanted to do my PHP development in a proper IDE. Since I've been doing a lot of Java at work - enter &lt;a href="http://www.eclipse.org" title="The Eclipse IDE" target="_blank"&gt;Eclipse&lt;/a&gt;, and the &lt;a href="http://www.eclipse.org/pdt/" title="Eclipse PDT plugins" target="_blank"&gt;Eclipse PHP&lt;/a&gt; plugins.&lt;/p&gt;

&lt;p&gt;As you can see in the screenshot above (which shows some code from the &lt;a href="http://www.cakephp.org" title="A Nice Piece of Cake!"&gt;cakePHP&lt;/a&gt; 15 minute blog tutorial), the plugins provide an awesome amount of functionality, such as:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Code folding&lt;/li&gt;
    &lt;li&gt;Intellisense/code completion&lt;/li&gt;
    &lt;li&gt;Syntax highlighting/colouring&lt;/li&gt;
    &lt;li&gt;API Documentation tool-tips&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this functionality is pretty easy to set up, and there is a pretty good guide available in &lt;a href="http://bakery.cakephp.org/articles/view/setting-up-eclipse-to-work-with-cake" target="_blank"&gt;The Bakery&lt;/a&gt; that covers just about everything you need to know to get going. There was a little bit of configuration that I did that was slightly different to that guide:&lt;/p&gt;

&lt;p&gt;Firstly, I don't believe that you need to set up cakePHP as a project in order to get the code completion to work. If you expand your project, and right click on your project include paths, you should be on the PHP Include path dialog, in the projects properties. If you add an external folder, and browse to the cake core directory (for me: C:xampphtdocscake), and click ok, you should now have code completion and all the associated awesomeness in your project, with the added benefit that for any different projects in your workspace, you can set up different versions of cakePHP or (I haven't tried this though) a different framework such as &lt;a href="http://www.symfony-project.com"&gt;Symfony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Secondly, for code completion in Models, you just have to do something like this:&lt;/p&gt;

&lt;pre lang="PHP"&gt;
class PostsController extends AppController{var $name = 'Posts';

/**

* @var Post

*/

var $Post;

...code

}&lt;/pre&gt;

&lt;p&gt;Hope this is of use to somebody :)&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2007/08/20/source-control-systems/</id><title type="text">source control systems</title><summary type="html">&lt;p&gt;The other day, I watched the Linus Torvalds &lt;a href="http://www.youtube.com/watch?v=4XpnKHJAok8" title="Linus Torvald's tech talk on git" target="_blank"&gt;tech talk&lt;/a&gt; at google, which he gave on source control systems. It was mostly (biased) about how great &lt;a href="http://git.or.cz/" target="_blank"&gt;git&lt;/a&gt; is, and how other source control systems, with a few exceptions, have mostly got it wrong. This all got me thinking about source control systems I have used.&lt;/p&gt;

&lt;p&gt;Now, I use Microsoft's &lt;a href="http://msdn2.microsoft.com/en-us/vstudio/aa718670.aspx" target="_blank"&gt;Visual Sourcesafe&lt;/a&gt; every day at work, and let me tell you: it's shit. The only (slightly) good thing about it, is the integration with VS.Net 2005, which is unsurprisingly very good. I know that I'm not really offering much of an argument as to exactly why VSS is a horrible pile of dog turd, but anyone whose ever used will understand.&lt;/p&gt;

&lt;p&gt;Anyway. I digress.&lt;/p&gt;

&lt;p&gt;I never really thought that the creator of Linux would be such an engaging and humorous speaker - aren't stereotypes fun - but he was. It kind of got me thinking about source control. I've used CVS and SVN before on a few open source projects I've contributed to, or just wanted to get the latest source for.&lt;/p&gt;

&lt;p&gt;I've mostly only ever used CVS or SVN, arguably the two most popular version control systems currently in use today. Better than VSS in every way, but still lacking quite a lot. For instance it's a well known fact that merges in CVS are a horrible nightmare, and that merges in SVN aren't much better. Thankfully I've never had to do them. And I know enough about VSS to know that merges are just generally avoided. Like you'd try to avoid an STI.&lt;/p&gt;

&lt;p&gt;So, over the weekend (you'll notice how much of my free time is "over the weekend") I decided to have a little play with with some distributed version control systems. Now, I'm not going to go on about what one of those is, nor how great they are, as you can use google for that. But suffice to say that they are fucking ace.&lt;/p&gt;

&lt;p&gt;I had to discount Git pretty much straight away - for various reasons (development being primary) I've installed Winxp back onto my laptop, and I'm playing with Windows Server 2003 R2 on my dev server, so I road tested Mercurial and Bazaar-ng. I spent a great deal of time researching the two systems, and ultimately decided to go with bazaar.  I've not really got down to much development with bazaar yet, but early results look promising.&lt;/p&gt;

&lt;p&gt;After about 10 minutes fannying around, I had Bazaar installed, and a shared repository set-up on my dev server, which I checked out and branched a few times on my laptop (3 branches: dev, testing and stable). With bazaar I can make as many dev branches as I like, for each crazy idea I have, and easily merge them upstream as they become awesomely realised ideas, or deleted and forgotten about like a red-headed step-child.&lt;/p&gt;

&lt;p&gt;This is all on my laptop, and I can easily push my working code onto my desktop if I want to code on there, or back onto my server for safe keeping, or publish it on a website. Or any combination of those. I'll post some more about Bazaar after I've been using it for a while.&lt;/p&gt;
</summary><published>2007-08-19T23:00:00Z</published><updated>2007-08-19T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2007/08/20/source-control-systems/" /><content type="html">&lt;p&gt;The other day, I watched the Linus Torvalds &lt;a href="http://www.youtube.com/watch?v=4XpnKHJAok8" title="Linus Torvald's tech talk on git" target="_blank"&gt;tech talk&lt;/a&gt; at google, which he gave on source control systems. It was mostly (biased) about how great &lt;a href="http://git.or.cz/" target="_blank"&gt;git&lt;/a&gt; is, and how other source control systems, with a few exceptions, have mostly got it wrong. This all got me thinking about source control systems I have used.&lt;/p&gt;

&lt;p&gt;Now, I use Microsoft's &lt;a href="http://msdn2.microsoft.com/en-us/vstudio/aa718670.aspx" target="_blank"&gt;Visual Sourcesafe&lt;/a&gt; every day at work, and let me tell you: it's shit. The only (slightly) good thing about it, is the integration with VS.Net 2005, which is unsurprisingly very good. I know that I'm not really offering much of an argument as to exactly why VSS is a horrible pile of dog turd, but anyone whose ever used will understand.&lt;/p&gt;

&lt;p&gt;Anyway. I digress.&lt;/p&gt;

&lt;p&gt;I never really thought that the creator of Linux would be such an engaging and humorous speaker - aren't stereotypes fun - but he was. It kind of got me thinking about source control. I've used CVS and SVN before on a few open source projects I've contributed to, or just wanted to get the latest source for.&lt;/p&gt;

&lt;p&gt;I've mostly only ever used CVS or SVN, arguably the two most popular version control systems currently in use today. Better than VSS in every way, but still lacking quite a lot. For instance it's a well known fact that merges in CVS are a horrible nightmare, and that merges in SVN aren't much better. Thankfully I've never had to do them. And I know enough about VSS to know that merges are just generally avoided. Like you'd try to avoid an STI.&lt;/p&gt;

&lt;p&gt;So, over the weekend (you'll notice how much of my free time is "over the weekend") I decided to have a little play with with some distributed version control systems. Now, I'm not going to go on about what one of those is, nor how great they are, as you can use google for that. But suffice to say that they are fucking ace.&lt;/p&gt;

&lt;p&gt;I had to discount Git pretty much straight away - for various reasons (development being primary) I've installed Winxp back onto my laptop, and I'm playing with Windows Server 2003 R2 on my dev server, so I road tested Mercurial and Bazaar-ng. I spent a great deal of time researching the two systems, and ultimately decided to go with bazaar.  I've not really got down to much development with bazaar yet, but early results look promising.&lt;/p&gt;

&lt;p&gt;After about 10 minutes fannying around, I had Bazaar installed, and a shared repository set-up on my dev server, which I checked out and branched a few times on my laptop (3 branches: dev, testing and stable). With bazaar I can make as many dev branches as I like, for each crazy idea I have, and easily merge them upstream as they become awesomely realised ideas, or deleted and forgotten about like a red-headed step-child.&lt;/p&gt;

&lt;p&gt;This is all on my laptop, and I can easily push my working code onto my desktop if I want to code on there, or back onto my server for safe keeping, or publish it on a website. Or any combination of those. I'll post some more about Bazaar after I've been using it for a while.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2007/08/05/linux-adventures/</id><title type="text">linux adventures</title><summary type="html">&lt;p&gt;I spent much of the weekend fucking around installing linux on my laptop. I like linux, it's free, and there's loads of cool software available. I tried:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Ubuntu 7.04&lt;/li&gt;
    &lt;li&gt;Fedora 7&lt;/li&gt;
    &lt;li&gt;opensuse 10.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The actual installations themselves went pretty painlessly, just pop the disk in, and boot from it, and click install. These modern installations are pretty cool, not like the good old days of installing redhat/slackware/debian from multiple floppy discs.&lt;/p&gt;

&lt;p&gt;The only problem I had was getting my 3Com 3crwe62092b wireless lan pcmcia card to work. What a pain in the fucking arse that was. Ubuntu Feistey Fawn 7.04 wouldn't even detect it, and Fedora 7 detected it, but it wouldn't work.&lt;/p&gt;

&lt;p&gt;Needless to say, I was getting frustrated at this point, and I downloaded opensuse 10.2, specifically a 44mb network install disk. And fuck me, it asked me for wlan details, and connected to my wireless network first time. Ace.&lt;/p&gt;

&lt;p&gt;But - and theres always a but - when it rebooted there was a problem. The wireless stopped working. I managed to get the rest of the installation completed using a wired connection. After some further googling, it turns out that the solution to my problem was to download the atmel-firmware, and copy the *.bin's to /lib/firmware. Rebooted and the wireless came up straightway. Hurrah!&lt;/p&gt;

&lt;p&gt;I suspect that armed with this new knowledge I should be able to install Ubuntu/Fedora and get the card to work on them, but I'm liking opensuse enough that I'm not sure I can be bothered to reinstall a different distribution again.&lt;/p&gt;

&lt;p&gt;This is also the reason that linux isn't ready for the desktop yet - the average person wouldn't spend time googling and recompiling kernels and installing different distributions just to get wireless working on their laptop. It should just work, with no effort. This is the advantage that windows has over linux, the driver support is significantly better.&lt;/p&gt;

&lt;p&gt;But it works for me, so fuck em.&lt;/p&gt;
</summary><published>2007-08-04T23:00:00Z</published><updated>2007-08-04T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2007/08/05/linux-adventures/" /><content type="html">&lt;p&gt;I spent much of the weekend fucking around installing linux on my laptop. I like linux, it's free, and there's loads of cool software available. I tried:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Ubuntu 7.04&lt;/li&gt;
    &lt;li&gt;Fedora 7&lt;/li&gt;
    &lt;li&gt;opensuse 10.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The actual installations themselves went pretty painlessly, just pop the disk in, and boot from it, and click install. These modern installations are pretty cool, not like the good old days of installing redhat/slackware/debian from multiple floppy discs.&lt;/p&gt;

&lt;p&gt;The only problem I had was getting my 3Com 3crwe62092b wireless lan pcmcia card to work. What a pain in the fucking arse that was. Ubuntu Feistey Fawn 7.04 wouldn't even detect it, and Fedora 7 detected it, but it wouldn't work.&lt;/p&gt;

&lt;p&gt;Needless to say, I was getting frustrated at this point, and I downloaded opensuse 10.2, specifically a 44mb network install disk. And fuck me, it asked me for wlan details, and connected to my wireless network first time. Ace.&lt;/p&gt;

&lt;p&gt;But - and theres always a but - when it rebooted there was a problem. The wireless stopped working. I managed to get the rest of the installation completed using a wired connection. After some further googling, it turns out that the solution to my problem was to download the atmel-firmware, and copy the *.bin's to /lib/firmware. Rebooted and the wireless came up straightway. Hurrah!&lt;/p&gt;

&lt;p&gt;I suspect that armed with this new knowledge I should be able to install Ubuntu/Fedora and get the card to work on them, but I'm liking opensuse enough that I'm not sure I can be bothered to reinstall a different distribution again.&lt;/p&gt;

&lt;p&gt;This is also the reason that linux isn't ready for the desktop yet - the average person wouldn't spend time googling and recompiling kernels and installing different distributions just to get wireless working on their laptop. It should just work, with no effort. This is the advantage that windows has over linux, the driver support is significantly better.&lt;/p&gt;

&lt;p&gt;But it works for me, so fuck em.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2007/07/23/limitations-in-delphi/</id><title type="text">Limitations in Delphi</title><summary type="html">&lt;p&gt;One of the things in Delphi that frustrates me is the inability to match on strings in case statements. For those people who haven't done delphi before, case statements are very similar to c++ switch statements, and only opererate on ordinal types.. Now I've not done any Java, but as I understand it you can't switch on strings in that language either. You can in c# though.&lt;/p&gt;

&lt;p&gt;I think C# is generally better, but that said I have it on good authority that templates are still much better in C++ than generics are in C#.&lt;/p&gt;

&lt;p&gt;Anyway, that's enough rambling. On to the solution.&lt;/p&gt;

&lt;p&gt;What you need to do in order to get around this limitation is cheat. Well, it's not really cheating. The tricks is to use a look up function that accepts a string, one that you are expecting, which you have in a string array. Then all you need do is return which element of the array has been matched, and use that in the case statement.&lt;/p&gt;

&lt;pre lang="delphi"&gt;
function TClassName.lookupFunction(lookup: string): integer;
const
  ARRAY = ['one', 'two', 'three', 'four', 'five'];
var
  i: integer;
begin
  for i := 0 to Length(ARRAY) do
    if lookup = ARRAY[i] then
    begin
      Result := i;
      break;
    end
end

procedure TClassName.someProc(somestring: string);
begin
  case LookupFunction(somestring)
  1 : //code that does stuff for 'one'
  2 : //code that does stuff for 'two'
  3 : //code that does stuff for 'three'
  4 : //code that does stuff for 'four'
  5 : //code that does stuff for 'five'
end&lt;/pre&gt;

&lt;p&gt;See! That's how simple it is.&lt;/p&gt;

&lt;p&gt;Maybe in a future version of delphi borland/codegear will introduce native string support for case statements. I won't hold my breather though.&lt;/p&gt;
</summary><published>2007-07-22T23:00:00Z</published><updated>2007-07-22T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2007/07/23/limitations-in-delphi/" /><content type="html">&lt;p&gt;One of the things in Delphi that frustrates me is the inability to match on strings in case statements. For those people who haven't done delphi before, case statements are very similar to c++ switch statements, and only opererate on ordinal types.. Now I've not done any Java, but as I understand it you can't switch on strings in that language either. You can in c# though.&lt;/p&gt;

&lt;p&gt;I think C# is generally better, but that said I have it on good authority that templates are still much better in C++ than generics are in C#.&lt;/p&gt;

&lt;p&gt;Anyway, that's enough rambling. On to the solution.&lt;/p&gt;

&lt;p&gt;What you need to do in order to get around this limitation is cheat. Well, it's not really cheating. The tricks is to use a look up function that accepts a string, one that you are expecting, which you have in a string array. Then all you need do is return which element of the array has been matched, and use that in the case statement.&lt;/p&gt;

&lt;pre lang="delphi"&gt;
function TClassName.lookupFunction(lookup: string): integer;
const
  ARRAY = ['one', 'two', 'three', 'four', 'five'];
var
  i: integer;
begin
  for i := 0 to Length(ARRAY) do
    if lookup = ARRAY[i] then
    begin
      Result := i;
      break;
    end
end

procedure TClassName.someProc(somestring: string);
begin
  case LookupFunction(somestring)
  1 : //code that does stuff for 'one'
  2 : //code that does stuff for 'two'
  3 : //code that does stuff for 'three'
  4 : //code that does stuff for 'four'
  5 : //code that does stuff for 'five'
end&lt;/pre&gt;

&lt;p&gt;See! That's how simple it is.&lt;/p&gt;

&lt;p&gt;Maybe in a future version of delphi borland/codegear will introduce native string support for case statements. I won't hold my breather though.&lt;/p&gt;
</content></entry><entry><id>http://www.temporalcohesion.co.uk/2007/07/20/hello-world-2/</id><title type="text">Hello world!</title><summary type="html">&lt;p&gt;Welcome to my new website, and my new blog. I'd kind of outgrown the old site, which I've now turned into a kind of "here's my CV" sort of site. Although I am happy in my job.&lt;/p&gt;

&lt;p&gt;I'm going to attempt to write more often on here, about a lot of things. I'm still getting things just the way I like them - I've still got a few plugins for wordpress to download and install yet. If I get time I might even write my own theme, but considering there are so many already brilliant themes available I might just save myself the time and effort.&lt;/p&gt;

&lt;p&gt;Hell, that's why I'm using Wordpress and not writing my own blogging system.&lt;/p&gt;

&lt;p&gt;As an old friend of mine used to say: Onwards and Upwards!&lt;/p&gt;
</summary><published>2007-07-19T23:00:00Z</published><updated>2007-07-19T23:00:00Z</updated><link rel="alternate" href="http://www.temporalcohesion.co.uk/2007/07/20/hello-world-2/" /><content type="html">&lt;p&gt;Welcome to my new website, and my new blog. I'd kind of outgrown the old site, which I've now turned into a kind of "here's my CV" sort of site. Although I am happy in my job.&lt;/p&gt;

&lt;p&gt;I'm going to attempt to write more often on here, about a lot of things. I'm still getting things just the way I like them - I've still got a few plugins for wordpress to download and install yet. If I get time I might even write my own theme, but considering there are so many already brilliant themes available I might just save myself the time and effort.&lt;/p&gt;

&lt;p&gt;Hell, that's why I'm using Wordpress and not writing my own blogging system.&lt;/p&gt;

&lt;p&gt;As an old friend of mine used to say: Onwards and Upwards!&lt;/p&gt;
</content></entry></feed>